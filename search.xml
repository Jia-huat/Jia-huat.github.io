<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>promise</title>
      <link href="/2023/12/08/promise/"/>
      <url>/2023/12/08/promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise概念"><a href="#Promise概念" class="headerlink" title="Promise概念"></a>Promise概念</h1><blockquote><p>可以解决回调地狱的问题</p></blockquote><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p><img src="/2023/12/08/promise/image-20230407163727796.png" alt="image-20230407163727796"></p><blockquote><p>数据库操作、定时器等等</p></blockquote><p><img src="/2023/12/08/promise/image-20230407163912822.png" alt="image-20230407163912822"></p><blockquote><p><code>异步编程的一个新解决方案</code></p></blockquote><h2 id="为什么要使用"><a href="#为什么要使用" class="headerlink" title="为什么要使用"></a>为什么要使用</h2><h3 id="更加灵活"><a href="#更加灵活" class="headerlink" title="更加灵活"></a>更加灵活</h3><p><img src="/2023/12/08/promise/image-20230407164144763.png" alt="image-20230407164144763"></p><blockquote><p><code>指定回调函数的方式更加灵活</code></p></blockquote><p>怎么多个法呢？</p><h3 id="支持链式调用，可以解决回调地狱问题"><a href="#支持链式调用，可以解决回调地狱问题" class="headerlink" title="支持链式调用，可以解决回调地狱问题"></a>支持链式调用，可以解决回调地狱问题</h3><p><strong>回调地狱</strong></p><blockquote><p>nodejs中学过，回调函数套回调函数<code>(回调套回调)</code></p></blockquote><p><img src="/2023/12/08/promise/image-20230407164448495.png" alt="image-20230407164448495"></p><blockquote><p>会有不便于阅读和不便于处理异常的问题<code>(就是出了问题会变得麻烦)</code></p></blockquote><hr><h1 id="Promise初体验"><a href="#Promise初体验" class="headerlink" title="Promise初体验"></a>Promise初体验</h1><h2 id="Promise-的状态"><a href="#Promise-的状态" class="headerlink" title="Promise 的状态"></a>Promise 的状态</h2><p><strong>实例对象中的一个属性 『PromiseState』</strong></p><ul><li>pending  未决定的</li><li>resolved / fullfilled  成功</li><li>rejected  失败</li></ul><h2 id="Promise-对象的值"><a href="#Promise-对象的值" class="headerlink" title="Promise 对象的值"></a>Promise 对象的值</h2><p><strong>实例对象中的另一个属性 『PromiseResult』</strong><br><strong>保存着异步任务『成功/失败』的结果</strong></p><ul><li>resolve</li><li>reject </li></ul><h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><p><strong>1.流程图</strong></p><p><img src="/2023/12/08/promise/image-20230410173449186.png" alt="image-20230410173449186"></p><p><strong>2.代码结构</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">30</span>)&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(n); <span class="comment">// 将 promise 对象的状态设置为 『成功』</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">reject</span>(n); <span class="comment">// 将 promise 对象的状态设置为 『失败』</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">// value 值</span></span><br><span class="line"><span class="comment">// reason 理由</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;.成功的回调..&#x27;</span> + value);</span><br><span class="line">&#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;.失败的回调..&#x27;</span> + reason);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>调用 then()方法，<code>处理状态的结果</code>，这里要理解then的流程(<code>是异步相对异步的流程吗</code>)</p></blockquote><h2 id="读取文件的promise方法"><a href="#读取文件的promise方法" class="headerlink" title="读取文件的promise方法"></a>读取文件的promise方法</h2><p><img src="/2023/12/08/promise/image-20230410181409628.png" alt="image-20230410181409628"></p><blockquote><p>1.new一个promise对象</p><p>2.对函数进行封装</p><p>3.then方法根据promise状态处理回调</p></blockquote><h3 id="状态与回调"><a href="#状态与回调" class="headerlink" title="状态与回调"></a>状态与回调</h3><p><img src="/2023/12/08/promise/image-20230410190321804.png" alt="image-20230410190321804"></p><p>1.都有可能，正常情况下是先指定回调再改变状态，但也可以先改状态再指定回调</p><ul><li><p>当执行器函数中的任务是<code>同步任务</code> 你直接去调resolve的时候 在这种情况下 先改变promise对象的状态 <code>后指定回调</code></p></li><li><p>当执行器函数中的任务是<code>异步任务时</code> 也就是说我需要等待一段时间才能改变状态 在这种情况下 先执行then方法指定回调 <code>后改变promise对象的状态</code> 在具体使用promise时 这种情况用的比较多</p></li></ul><hr><h1 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h1><blockquote><p>需要用到服务器，注意跨域，服务器的一些问题</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>);</span><br><span class="line">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//创建promise对象</span></span><br><span class="line">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建对象</span></span><br><span class="line">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">            <span class="comment">//2.初始化</span></span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:3000/home&#x27;</span>)</span><br><span class="line">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;jiajiahuat&#x27;</span>)</span><br><span class="line">            <span class="comment">//3.发送</span></span><br><span class="line">            xhr.<span class="title function_">send</span>()</span><br><span class="line">            <span class="comment">//4.事件绑定</span></span><br><span class="line">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="comment">//判断(服务端返回了所有结果)</span></span><br><span class="line">                <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;=<span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                         <span class="comment">//响应行</span></span><br><span class="line">                        <span class="title function_">resolve</span>(xhr.<span class="property">response</span>)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(xhr.<span class="property">status</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//响应体</span></span><br><span class="line">        &#125;,<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">        &#125;)    </span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>其实就是<code>promise封装了之前的原生ajax</code>。要留意流程</p></blockquote><p>设置的东西应该要<code>放在初始化之后，在发送之前</code></p><p><img src="/2023/12/08/promise/image-20230410225428700.png" alt="image-20230410225428700"></p><hr><h1 id="promise封装练习"><a href="#promise封装练习" class="headerlink" title="promise封装练习"></a>promise封装练习</h1><blockquote><p><code>在html和js(服务器端)均可以使用</code></p></blockquote><h2 id="手动封装"><a href="#手动封装" class="headerlink" title="手动封装"></a>手动封装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line"> * 封装一个函数</span><br><span class="line"> * 参数：path   </span><br><span class="line"> * 返回：promise 对象</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mineReadFile</span>(<span class="params">path</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFile</span>(path,<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(err)<span class="title function_">reject</span>(err)</span><br><span class="line">            <span class="title function_">resolve</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mineReadFile</span>(<span class="string">&#x27;../resource/content.txt&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;,<span class="function">(<span class="params">reason</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;搞错了再来&#x27;</span>+reason);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>参数为path的一个函数</p></blockquote><h2 id="引入util-promisify-方法"><a href="#引入util-promisify-方法" class="headerlink" title="引入util.promisify 方法"></a>引入util.promisify 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line"> * util.<span class="property">promisify</span> 方法</span><br><span class="line"> */</span><br><span class="line"><span class="comment">//引入 util 模块</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="comment">//引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//返回一个新的函数</span></span><br><span class="line"><span class="keyword">let</span> mineReadFile = util.<span class="title function_">promisify</span>(fs.<span class="property">readFile</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">mineReadFile</span>(<span class="string">&#x27;./resource/content.txt&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><code>其实就是你封装好的promise的读取文件的函数</code>，省了手动封装，并且一般只返回结果</p></blockquote><h2 id="封装ajax请求"><a href="#封装ajax请求" class="headerlink" title="封装ajax请求"></a>封装ajax请求</h2><blockquote><p>同文件读取，用路径作为参数</p></blockquote><p><img src="/2023/12/08/promise/image-20230412161220801.png" alt="image-20230412161220801"></p><blockquote><p>有个想法，<code>设置多个参数</code>会怎么样，例如<code>用数组或者对象</code>作为参数，实现设置请求头信息等等</p></blockquote><hr><h1 id="Promise从入门到自定义"><a href="#Promise从入门到自定义" class="headerlink" title="Promise从入门到自定义"></a>Promise从入门到自定义</h1><blockquote><p>理论知识</p></blockquote><h2 id="第-1-章：Promise-的重要属性"><a href="#第-1-章：Promise-的重要属性" class="headerlink" title="第 1 章：Promise 的重要属性"></a>第 1 章：Promise 的重要属性</h2><h3 id="promise的状态改变"><a href="#promise的状态改变" class="headerlink" title="promise的状态改变"></a>promise的状态改变</h3><p><strong>1.pending 变为 resolved</strong></p><p><strong>2.pending 变为 rejected</strong></p><blockquote><p>说明: 只有这 2 种, 且一个 promise 对象只能改变一次</p><p>无论变为成功还是失败, 都会有一个结果数据</p><p>成功的结果数据一般称为 value, 失败的结果数据一般称为 reason</p></blockquote><p><img src="/2023/12/08/promise/image-20230412164643260.png" alt="image-20230412164643260"></p><blockquote><p><code>对象的一个属性</code>,且<code>只有两种</code>类型,决定执行成功或者失败的属性</p></blockquote><h3 id="promise-对象的值"><a href="#promise-对象的值" class="headerlink" title="promise 对象的值"></a>promise 对象的值</h3><p><strong>PromiseResult</strong></p><p><img src="/2023/12/08/promise/image-20230412165212347.png" alt="image-20230412165212347"></p><blockquote><p>内置属性，<code>保存着这个异步任务两种结果</code>，决定结果(err||data)</p></blockquote><h2 id="如何使用-Promise"><a href="#如何使用-Promise" class="headerlink" title="如何使用 Promise?"></a>如何使用 Promise?</h2><h3 id="Promise的API"><a href="#Promise的API" class="headerlink" title="Promise的API"></a>Promise的API</h3><p><strong>1.Promise 构造函数: Promise (excutor) {}</strong></p><p>(1) executor 函数: <code>执行器 (resolve, reject) =&gt; &#123;&#125; </code></p><p>(2) resolve 函数: <code>内部定义成功</code>时我们调用的函数 <code>value =&gt; &#123;&#125;</code></p><p>(3) reject 函数: 内部定义<code>失败时</code>我们调用的函数 <code>reason =&gt; &#123;&#125;</code></p><blockquote><p>说明: <code>executor</code> 会在 Promise 内部立即<code>同步调用</code>,异步操作在执行器()中执行</p></blockquote><p><img src="/2023/12/08/promise/image-20230412170233657.png" alt="image-20230412170233657"></p><h3 id="prototype属性-内置"><a href="#prototype属性-内置" class="headerlink" title="prototype属性(内置)"></a>prototype属性(内置)</h3><blockquote><p><code>js进阶里面讲过</code></p></blockquote><p><strong>2.Promise.prototype.then 方法: (onResolved, onRejected) =&gt; {}</strong></p><p>(1) onResolved 函数: 成功的回调函数 (value) =&gt; {}</p><p>(2) onRejected 函数: 失败的回调函数 (reason) =&gt; {}</p><blockquote><p>说明: 指定用于得到成功 value 的成功回调和用于得到失败 reason 的失败回调</p></blockquote><p><code>返回一个新的 promise 对象</code></p><p><strong>3.Promise.prototype.catch 方法: (onRejected) =&gt; {}</strong></p><p>(1) onRejected 函数: 失败的回调函数 (reason) =&gt; {} </p><blockquote><p>说明: 也是then()的语法实现, 相当于: then(undefined, onRejected)，返回的也是promise</p><p><code>只能指定失败的回调</code></p></blockquote><h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><p><strong>4.Promise.resolve 方法: (value) =&gt; {}</strong></p><p>(1) value: 成功的数据或 promise 对象</p><p>说明: 返回一个成功/失败的 promise 对象</p><p> <img src="/2023/12/08/promise/image-20230412172419855.png" alt="image-20230412172419855"></p><blockquote><p>其实就是用于快速返回一个结果</p></blockquote><p><strong>5.Promise.reject 方法: (reason) =&gt; {}</strong></p><p>(1) reason: 失败的原因</p><blockquote><p>说明: 返回一个失败的 promise 对象</p><p>输入成功的结果也表示失败的状态</p></blockquote><p><strong>6.Promise.all 方法: (promises) =&gt; {}</strong></p><p>(1) promises: <code>包含 n 个 promise 的数组</code></p><blockquote><p>Promise.all([p1,p2,p3])</p></blockquote><p><img src="/2023/12/08/promise/image-20230412173108976.png" alt="image-20230412173108976"></p><blockquote><p>说明: 返回一个新的 promise, 只有所有的 promise 都成功才成功, 只要有一个失败了就直接失败且返回失败的结果，<code>逻辑与的用法</code></p></blockquote><p><strong>7.Promise.race 方法: (promises) =&gt; {}</strong></p><p>(1) promises: 包含 n 个 promise 的数组</p><blockquote><p>说明: 返回一个新的 promise, 第一个完成的 promise 的结果状态就是最终的结果状态</p><p><code>第一个完成的promise状态决定最终状态和结果</code></p></blockquote><hr><h2 id="promise-的几个关键问题"><a href="#promise-的几个关键问题" class="headerlink" title="promise 的几个关键问题"></a>promise 的几个关键问题</h2><p><strong>1.如何改变 promise 的状态?</strong></p><p>(1) resolve(value): 如果当前是 pending 就会变为 resolved</p><p>(2) reject(reason): 如果当前是 pending 就会变为 rejected</p><p>(3) 抛出异常: 如果当前是 pending 就会变为 rejected</p><p><strong>图解</strong></p><p><img src="/2023/12/08/promise/image-20230412174613237.png" alt="image-20230412174613237"></p><blockquote><p>目前认识三种</p></blockquote><p><strong>2.一个 promise 指定多个成功/失败回调函数, 都会调用吗?</strong></p><blockquote><p>当 promise 改变为<code>对应状态</code>时<code>都会调用</code></p><p>看起来就是根据结果给<code>符合条件的函数调用</code></p></blockquote><p><strong>3.改变 promise 状态和指定回调函数谁先谁后?</strong></p><p>(1) 都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调</p><p>(2) 如何先改状态再指定回调?</p><p>① 在执行器中直接调用 resolve()/reject()</p><p>② 延迟更长时间才调用 then()</p><p>(3) 什么时候才能得到数据?</p><p>① 如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据</p><p>② 如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</p><blockquote><p><code>then的顺序</code>是<code>先指定回调</code>后根据<code>获得的状态</code>，来执行自己的回调函数</p><p><code>指定回调</code>和<code>promise中的状态</code>的改变时间<code>顺序</code>由<code>执行器的同步或者异步相关</code>(时间)</p></blockquote><p><strong>4.promise.then()返回的新 promise 的结果状态由什么决定?</strong></p><p>(1) 简单表达: 由 then()指定的回调函数执行的结果决定</p><p>(2) 详细表达:</p><p>① 如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常</p><p>② 如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值</p><p>③ 如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</p><blockquote><p>promise.then()有点像<code>封装好的promise.resolve()加reject</code>.</p><p>promise.then()<code>本身就是一个promise</code></p></blockquote><p><img src="/2023/12/08/promise/image-20230412181339122.png" alt="image-20230412181339122"></p><p><strong>5.promise 如何串连多个操作任务?</strong></p><blockquote><p><code>展现效果：多个条件串联相关</code></p></blockquote><p>(1) promise 的 then()返回一个新的 promise, 可以开成 then()的链式调用</p><p>(2) 通过 then 的链式调用串连多个同步/异步任务 </p><p> <img src="/2023/12/08/promise/image-20230412182140960.png" alt="image-20230412182140960"></p><blockquote><p>层层递进，与以前的<code>回调地狱</code>看起来，确实<code>晰多了</code>(特别是要<code>串联很多的时候</code>)</p></blockquote><p>注意：当中间有promise没有返回值时，就会输出成功的结果:undefind</p><p><strong>6.promise 异常传透?</strong></p><p>(1) 当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调, </p><p>(2) 前面任何操作出了异常, 都会传到最后失败的回调中处理</p><p><img src="/2023/12/08/promise/image-20230412205920744.png" alt="image-20230412205920744"></p><blockquote><p>只需要最后指定失败回调</p></blockquote><p><strong>7.中断 promise 链?</strong></p><p>(1) 当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数</p><p>(2) 办法: 在回调函数中返回一个 pendding 状态的 promise 对象</p><blockquote><p>唯一方法：<code>返回一个pendding待机状态的promise</code></p></blockquote><p><img src="/2023/12/08/promise/image-20230412210621640.png" alt="image-20230412210621640"></p><hr><h1 id="自定义-手写-Promise"><a href="#自定义-手写-Promise" class="headerlink" title="自定义(手写)Promise"></a>自定义(手写)Promise</h1><h2 id="定义整体结构-初步"><a href="#定义整体结构-初步" class="headerlink" title="定义整体结构(初步)"></a>定义整体结构(初步)</h2><p><strong>js模块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*自定义 Promise*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">   <span class="comment">/*值回调函数*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;&#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;&#125;</span><br><span class="line">    <span class="comment">/*内部同步执行的函数 (resolve, reject) =&gt; &#123;&#125;*/</span></span><br><span class="line">    <span class="title function_">executor</span>(<span class="params">resolve,reject</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*添加then方法*/</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) &#123;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>如下图</strong></p><p> <img src="/2023/12/08/promise/image-20230412212503619.png" alt="image-20230412212503619"></p><blockquote><p>resolve函数，修改状态(promiseState)+设置对象结果值(promiseResult)</p></blockquote><h2 id="完善执行器"><a href="#完善执行器" class="headerlink" title="完善执行器"></a><strong>完善执行器</strong></h2><p><img src="/2023/12/08/promise/image-20230412221319565.png" alt="image-20230412221319565"></p><p><img src="/2023/12/08/promise/image-20230412222146642.png" alt="image-20230412222146642"></p><blockquote><p>try{}暂时不清楚，但是后面就是将获得的值给了e又给了reject()<code>只有try，catch才能处理throw的值</code></p></blockquote><h2 id="完善状态功能"><a href="#完善状态功能" class="headerlink" title="完善状态功能"></a>完善状态功能</h2><blockquote><p><code>说的改一次状态，实际上是认为设定条件限制改了就不能再改</code></p></blockquote><p><img src="/2023/12/08/promise/image-20230412222902944.png" alt="image-20230412222902944"></p><blockquote><p>简简单单的判断条件而已，因为状态替换毫无意义，条件本来就是选出合适的才需要两个状态值的</p></blockquote><h2 id="完善then"><a href="#完善then" class="headerlink" title="完善then"></a>完善then</h2><p><img src="/2023/12/08/promise/image-20230414165352823.png" alt="image-20230414165352823"></p><blockquote><p>PromiseResult指的就是值</p><p>this指的就是调用then函数的p</p></blockquote><h2 id="异步任务回调的执行"><a href="#异步任务回调的执行" class="headerlink" title="异步任务回调的执行"></a>异步任务回调的执行</h2><p><img src="/2023/12/08/promise/image-20230414171620494.png" alt="image-20230414171620494"></p><blockquote><p>讲解了同步和异步之间的执行关系</p></blockquote><h2 id="指定多个回调的实现"><a href="#指定多个回调的实现" class="headerlink" title="指定多个回调的实现"></a>指定多个回调的实现</h2><blockquote><p>利用数组push进多个结果，在使用forEach遍历</p><p>目的是为了防止下一个覆盖下一个</p></blockquote><p><img src="/2023/12/08/promise/image-20230414211221623.png" alt="image-20230414211221623"></p><hr><h2 id="同步结果时，then的返回结果"><a href="#同步结果时，then的返回结果" class="headerlink" title="同步结果时，then的返回结果"></a>同步结果时，then的返回结果</h2><blockquote><p>这里解答<code>为什么then是一个promise对象</code></p></blockquote><p><img src="/2023/12/08/promise/image-20230414213052097.png" alt="image-20230414213052097"></p><blockquote><p>这里的this指的是最外边的Promise，双v表示返回结果跟随上一个promise的结果(<code>跟正常的promise使用一样</code>)</p></blockquote><blockquote><p>遗留问题：为什么可以调用then方法?(为什么声明的时候不会报错)不知道是不是因为是在一个新对象里面</p></blockquote><p><img src="/2023/12/08/promise/image-20230419174555949.png" alt="image-20230419174555949"></p><blockquote><p>递归函数，这里不知道为什么可以用</p></blockquote><h3 id="异步修改状态then的返回结果"><a href="#异步修改状态then的返回结果" class="headerlink" title="异步修改状态then的返回结果"></a>异步修改状态then的返回结果</h3><blockquote><p>用定时器模仿</p></blockquote><p><img src="/2023/12/08/promise/image-20230419154006343.png" alt="image-20230419154006343"></p><blockquote><p>当返回结果时undefind(非promise)时，状态变成了成功</p><p>因为中间有一个promise没有返回结果</p></blockquote><p><img src="/2023/12/08/promise/image-20230419163135725.png" alt="image-20230419163135725"></p><blockquote><p>第一行的属性指的是创建时promise的设置</p></blockquote><h4 id="关于then的return"><a href="#关于then的return" class="headerlink" title="关于then的return"></a>关于then的return</h4><p><img src="/2023/12/08/promise/image-20230419171557450.png" alt="image-20230419171557450"></p><blockquote><p>return的结果代表的就是onResolved的执行结果，所以目前没有return的时候，输入什么值都不会运算，变成undefind。<code>可能规定了返回非promise结果默认为undefinded，且为成功</code></p><p>只有当回调函数也是promise的时候，才会有值</p></blockquote><p>res表示返回的新promise</p><h4 id="then方法的完善与优化"><a href="#then方法的完善与优化" class="headerlink" title="then方法的完善与优化"></a>then方法的完善与优化</h4><blockquote><p>由于执行回调部分功能相同，因此可以封装成一个函数来调用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">type</span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">        <span class="keyword">let</span> result = <span class="title function_">type</span>(self.<span class="property">PromiseResult</span>);</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">            <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">            result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(v);</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">            <span class="title function_">resolve</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="catch方法封装"><a href="#catch方法封装" class="headerlink" title="catch方法封装"></a>catch方法封装</h3><blockquote><p>异常(错误)穿透效果，只报错</p></blockquote><p><img src="/2023/12/08/promise/image-20230420161835113.png" alt="image-20230420161835113"></p><blockquote><p>this指的是上一个then返回的promise<code>之前设定then返回的就是promise</code></p><p>相当于又then了一次，不过设定了一些参数</p><p><code>因为reason没有值(undefined)，所以会有两个undefinded报错</code></p></blockquote><p><img src="/2023/12/08/promise/image-20230420165424106.png" alt="image-20230420165424106"></p><blockquote><p>因为为undefinded，所以将回调函数改成这个形式，可以实现一直传递结果</p></blockquote><p><img src="/2023/12/08/promise/image-20230420171453335.png" alt="image-20230420171453335"></p><blockquote><p>reject时，throw reason的处理结果。效果就是传递错误的值</p><p><code>循环里面只有三次</code>，最后一次的onRejected为reason=&gt;{console.warn()}</p></blockquote><h3 id="为什么reject最后状态成功"><a href="#为什么reject最后状态成功" class="headerlink" title="为什么reject最后状态成功"></a>为什么reject最后状态成功</h3><p><img src="/2023/12/08/promise/image-20230420174940804.png" alt="image-20230420174940804"></p><blockquote><p>最后，非promise又执行了一次resolve()<code>执行后必为成功</code></p><p>then的参数决定了封装函数执行的回调函数的类型是onResolved还是onRejected，而且会默认执行</p></blockquote><hr><h2 id="封装Promise-resolve-方法"><a href="#封装Promise-resolve-方法" class="headerlink" title="封装Promise.resolve()方法"></a>封装Promise.resolve()方法</h2><blockquote><p>目的：用于快速返回一个值或者promise的对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加 resolve 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">resolve</span> = <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="comment">//返回promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">            value.<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(v);</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//状态设置为成功</span></span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里你会发现方法之间<code>很多套用</code>，所以那些对结果的<code>处理</code>啊，对参数的调用保存之类的，<code>之前的方法已经处理好了</code>。不必考虑太多</p></blockquote><h2 id="封装Promise-reject-方法"><a href="#封装Promise-reject-方法" class="headerlink" title="封装Promise.reject()方法"></a>封装Promise.reject()方法</h2><blockquote><p>不管传入什么，都返回失败结果的promise</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加 reject 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">resolve</span> = <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="comment">//返回promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">       <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p><img src="/2023/12/08/promise/image-20230421170922746.png" alt="image-20230421170922746"></p><hr><h2 id="all方法"><a href="#all方法" class="headerlink" title="all方法"></a>all方法</h2><blockquote><p>多个promise快速判断，全部成功才为成功</p></blockquote><p><img src="/2023/12/08/promise/image-20230421171946432.png" alt="image-20230421171946432"></p><h2 id="race方法"><a href="#race方法" class="headerlink" title="race方法"></a>race方法</h2><blockquote><p>运行优先原则</p></blockquote><p><img src="/2023/12/08/promise/image-20230421173053189.png" alt="image-20230421173053189"></p><blockquote><p>看起来就是简简单单</p></blockquote><h2 id="将then方法改成异步"><a href="#将then方法改成异步" class="headerlink" title="将then方法改成异步"></a>将then方法改成异步</h2><p><img src="/2023/12/08/promise/image-20230421180153669.png" alt="image-20230421180153669"></p><blockquote><p><code>在最后执行回调函数的时候</code>，添加一个定时器，包括异步封装的，和同步的</p></blockquote><h2 id="最后class的封装"><a href="#最后class的封装" class="headerlink" title="最后class的封装"></a>最后class的封装</h2><p><img src="/2023/12/08/promise/image-20230424213346271.png" alt="image-20230424213346271"></p><blockquote><p>不是实例对象的函数需要注释static</p></blockquote><h1 id="第-3-章：async-与-await"><a href="#第-3-章：async-与-await" class="headerlink" title="第 3 章：async 与 await"></a>第 3 章：async 与 await</h1><p>3.1. mdn 文档</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await</a></p><h2 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h2><p>1.函数的返回值为 promise 对象</p><p>2.promise 对象的结果由 async 函数执行的返回值决定</p><blockquote></blockquote><h2 id="await-表达式"><a href="#await-表达式" class="headerlink" title="await 表达式"></a>await 表达式</h2><p>1.await 右侧的表达式<code>一般为 promise 对象, 但也可以是其它的值</code></p><p>2.如果表达式是 promise 对象, <code>await 返回的是 promise 成功的值</code></p><p>3.<code>如果表达式是其它值</code>, 直接将此值作为 await 的返回值</p><blockquote><p>主要用于获取结果</p></blockquote><h2 id="3-4-注意"><a href="#3-4-注意" class="headerlink" title="3.4. 注意"></a>3.4. 注意</h2><p>1.await 必须写在 async 函数中, 但 async 函数中可以没有 await</p><p>2.如果 await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</p><p><img src="/2023/12/08/promise/image-20230424214412186.png" alt="image-20230424214412186"></p><blockquote><p>OK</p><p>20</p><p>Error<code>这里需要用到try catch获取</code></p></blockquote><h1 id="结合async与await"><a href="#结合async与await" class="headerlink" title="结合async与await"></a>结合async与await</h1><h2 id="以前的回调函数"><a href="#以前的回调函数" class="headerlink" title="以前的回调函数"></a>以前的回调函数</h2><p><img src="/2023/12/08/promise/image-20230424215127932.png" alt="image-20230424215127932"></p><h2 id="结合"><a href="#结合" class="headerlink" title="结合"></a>结合</h2><p><img src="/2023/12/08/promise/image-20230424215203149.png" alt="image-20230424215203149"></p><p><img src="/2023/12/08/promise/image-20230424215031952.png" alt="image-20230424215031952"></p><h2 id="封装AJAX"><a href="#封装AJAX" class="headerlink" title="封装AJAX"></a>封装AJAX</h2><p><img src="/2023/12/08/promise/image-20230424223213831.png" alt="image-20230424223213831"></p><blockquote><p>省了又省，then那些都省了。<code>内部的await对then又做了处理吧</code></p></blockquote><h3 id="对比之前"><a href="#对比之前" class="headerlink" title="对比之前"></a>对比之前</h3><p><img src="/2023/12/08/promise/image-20230424223557240.png" alt="image-20230424223557240"></p><h1 id="学到的新东西"><a href="#学到的新东西" class="headerlink" title="学到的新东西"></a>学到的新东西</h1><h2 id="关于this的指向"><a href="#关于this的指向" class="headerlink" title="关于this的指向"></a>关于this的指向</h2><ul><li><p>普通函数的this指向就是window</p></li><li><p>箭头函数的this指向就是是上一层this的指向</p></li><li><p>DOM事件流的this指的是事件对象</p></li></ul><h2 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h2><ul><li>当打印出来两个中括号[[PromiseState]]，表明为内置属性</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>axios</title>
      <link href="/2023/12/08/axios/"/>
      <url>/2023/12/08/axios/</url>
      
        <content type="html"><![CDATA[<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><blockquote><p>前  置知识：promise\ajax</p></blockquote><p>可以搭建临时服务json-server</p><p>axios的依赖包</p><h1 id="axios的基本使用"><a href="#axios的基本使用" class="headerlink" title="axios的基本使用"></a>axios的基本使用</h1><h2 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h2><blockquote><p>之前了解过ajax的axios发送请求</p></blockquote><h3 id="更新数据-PUT"><a href="#更新数据-PUT" class="headerlink" title="更新数据(PUT)"></a>更新数据(PUT)</h3><p><img src="/2023/12/08/axios/image-20230425210630436.png" alt="image-20230425210630436"></p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p><strong>1.查找数据</strong></p><p>方法改成get</p><p>url的关键值(id)要看你需要的数据</p><p>不用请求体(条件)</p><p><strong>2.添加数据</strong></p><p>方法改成post</p><p>路径到目录-</p><p>请求体是更新内容(不用添加id)</p><p><strong>3.删除单个数据</strong></p><p>方法改成delete</p><p>路径到id</p><p>不用请求体</p><h3 id="路由路径"><a href="#路由路径" class="headerlink" title="路由路径"></a>路由路径</h3><p><img src="/2023/12/08/axios/image-20230425211737342.png" alt="image-20230425211737342"></p><hr><h2 id="axios的API请求方法"><a href="#axios的API请求方法" class="headerlink" title="axios的API请求方法"></a>axios的API请求方法</h2><blockquote><p>之前ajax就见过</p></blockquote><p><img src="/2023/12/08/axios/image-20230425212326702.png" alt="image-20230425212326702"></p><blockquote><p>别名方法？</p></blockquote><h3 id="演示post"><a href="#演示post" class="headerlink" title="演示post"></a>演示post</h3><p><img src="/2023/12/08/axios/image-20230425213208879.png" alt="image-20230425213208879"></p><h3 id="响应结果的结构"><a href="#响应结果的结构" class="headerlink" title="响应结果的结构"></a>响应结果的结构</h3><blockquote><p>就是响应头，响应行，响应体，状态码，等等</p></blockquote><h2 id="总结起来"><a href="#总结起来" class="headerlink" title="总结起来"></a>总结起来</h2><blockquote><p>axios真的包含有promise的then的使用</p><p>不知道里面的原码是怎样封装的</p></blockquote><hr><h2 id="axios配置对象-Request-config"><a href="#axios配置对象-Request-config" class="headerlink" title="axios配置对象(Request config)"></a>axios配置对象(Request config)</h2><h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><p>url</p><p>method</p><p>baseURL</p><p><strong>预处理</strong></p><blockquote><p>transformRequest:[function (data,headers){return data}]</p><p>transformResponse:[function (data){return data}]</p></blockquote><p>headers:{}</p><p>params:{}</p><p><img src="/2023/12/08/axios/image-20230425221226881.png" alt="image-20230425221226881"></p><h2 id="设置默认配置"><a href="#设置默认配置" class="headerlink" title="设置默认配置"></a>设置默认配置</h2><blockquote><p>之前在ajax那里见过，当时用来设置一部分公共的路径，<code>后面的url要加上参数</code></p></blockquote><p><img src="/2023/12/08/axios/image-20230426170025779.png" alt="image-20230426170025779"></p><hr><h1 id="axios创建实例对象发送请求"><a href="#axios创建实例对象发送请求" class="headerlink" title="axios创建实例对象发送请求"></a>axios创建实例对象发送请求</h1><p><img src="/2023/12/08/axios/image-20230426170912977.png" alt="image-20230426170912977"></p><blockquote><p>好像是将默认配置放在对象里面</p></blockquote><p><strong>好处：</strong></p><blockquote><p>设置多个对象可以向不同的服务发送请求，而(默认配置要每个请求，都要重新创建一个完整的)</p></blockquote><hr><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><blockquote><p><strong>interceptorManager</strong></p></blockquote><blockquote><p>满足条件才放行</p><p>分成请求拦截器、响应拦截器</p><p><code>在过程中可以进行预处理</code></p></blockquote><p><img src="/2023/12/08/axios/image-20230426171537353.png" alt="image-20230426171537353"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><strong>请求拦截器，后进先执行</strong></p><p><strong>响应拦截器，先进先执行</strong></p><p><img src="/2023/12/08/axios/image-20230426172151802.png" alt="image-20230426172151802"></p><blockquote><p>两者的结合有点像promise</p></blockquote><h1 id="axios取消请求"><a href="#axios取消请求" class="headerlink" title="axios取消请求"></a>axios取消请求</h1><blockquote><p>cancelToken</p><p><code>要记得给服务器加个延时，不然还没停止就返回结果了</code></p></blockquote><blockquote><p>这个函数在axios包里面，所以之前那个取消函数就可以直接调用</p></blockquote><p><img src="/2023/12/08/axios/image-20230426174350825.png" alt="image-20230426174350825"></p><h2 id="重复请求等问题"><a href="#重复请求等问题" class="headerlink" title="重复请求等问题"></a>重复请求等问题</h2><hr><h1 id="axios源码分析"><a href="#axios源码分析" class="headerlink" title="axios源码分析"></a>axios源码分析</h1><h2 id="取消函数"><a href="#取消函数" class="headerlink" title="取消函数"></a>取消函数</h2><h3 id="CancelToken"><a href="#CancelToken" class="headerlink" title="CancelToken"></a>CancelToken</h3><blockquote><p>作为函数暴露</p></blockquote><p><img src="/2023/12/08/axios/image-20230426174723208.png" alt="image-20230426174723208"></p><h3 id="Cancel"><a href="#Cancel" class="headerlink" title="Cancel"></a>Cancel</h3><blockquote><p>作为函数暴露</p></blockquote><p><img src="/2023/12/08/axios/image-20230426174350825.png" alt="image-20230426174350825"></p><blockquote><p>两者封装成函数的形式暴露，引入就可以直接调用</p></blockquote><hr><h2 id="core核心文件"><a href="#core核心文件" class="headerlink" title="core核心文件"></a>core核心文件</h2><p><img src="/2023/12/08/axios/image-20230426175029616.png" alt="image-20230426175029616"></p><h3 id="axios构造函数文件"><a href="#axios构造函数文件" class="headerlink" title="axios构造函数文件"></a>axios构造函数文件</h3><blockquote><p>暴露为对象</p></blockquote><h3 id="构建完整URL文件"><a href="#构建完整URL文件" class="headerlink" title="构建完整URL文件"></a>构建完整URL文件</h3><blockquote><p>暴露为函数</p></blockquote><h3 id="创建Error对象"><a href="#创建Error对象" class="headerlink" title="创建Error对象"></a>创建Error对象</h3><blockquote><p>暴露为函数，用于创建对象</p></blockquote><h3 id="发送http请求文件"><a href="#发送http请求文件" class="headerlink" title="发送http请求文件"></a>发送http请求文件</h3><blockquote><p>dispatchRequest是小老板调用http和xhr</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入工具</span></span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./../utils&#x27;</span>);</span><br><span class="line"><span class="comment">//引入数据转化工具</span></span><br><span class="line"><span class="keyword">var</span> transformData = <span class="built_in">require</span>(<span class="string">&#x27;./transformData&#x27;</span>);</span><br><span class="line"><span class="comment">//引入检测是否为取消对象的函数</span></span><br><span class="line"><span class="keyword">var</span> isCancel = <span class="built_in">require</span>(<span class="string">&#x27;../cancel/isCancel&#x27;</span>);</span><br><span class="line"><span class="comment">//引入请求的默认配置</span></span><br><span class="line"><span class="keyword">var</span> defaults = <span class="built_in">require</span>(<span class="string">&#x27;../defaults&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Throws a `Cancel` if cancellation has been requested.</span></span><br><span class="line"><span class="comment"> * 抛出一个 Cancel 类型的错误, 如果这个请求已经发送出去</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throwIfCancellationRequested</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">cancelToken</span>) &#123;</span><br><span class="line">        config.<span class="property">cancelToken</span>.<span class="title function_">throwIfRequested</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用配置好的适配器发送一个请求</span></span><br><span class="line"><span class="comment"> * Dispatch a request to the server using the configured adapter.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object</span>&#125; config The config that is to be used for the request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Promise</span>&#125; The Promise to be fulfilled</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">dispatchRequest</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">//如果被取消的请求被发送出去, 抛出错误</span></span><br><span class="line">    <span class="title function_">throwIfCancellationRequested</span>(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ensure headers exist</span></span><br><span class="line">    <span class="comment">//确保头信息存在</span></span><br><span class="line">    config.<span class="property">headers</span> = config.<span class="property">headers</span> || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对请求数据进行初始化转化</span></span><br><span class="line">    config.<span class="property">data</span> = <span class="title function_">transformData</span>(</span><br><span class="line">        config.<span class="property">data</span>,</span><br><span class="line">        config.<span class="property">headers</span>,</span><br><span class="line">        config.<span class="property">transformRequest</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并一切其他头信息的配置项</span></span><br><span class="line">    config.<span class="property">headers</span> = utils.<span class="title function_">merge</span>(</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">common</span> || &#123;&#125;,</span><br><span class="line">        config.<span class="property">headers</span>[config.<span class="property">method</span>] || &#123;&#125;,</span><br><span class="line">        config.<span class="property">headers</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将配置项中关于方法的配置项全部移除</span></span><br><span class="line">    utils.<span class="title function_">forEach</span>(</span><br><span class="line">        [<span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;put&#x27;</span>, <span class="string">&#x27;patch&#x27;</span>, <span class="string">&#x27;common&#x27;</span>],</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">cleanHeaderConfig</span>(<span class="params">method</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> config.<span class="property">headers</span>[method];</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line"><span class="comment">//...返回response  </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>对配置做一些设置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取适配器对象 http  xhr</span></span><br><span class="line">    <span class="keyword">var</span> adapter = config.<span class="property">adapter</span> || defaults.<span class="property">adapter</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求， 返回请求后 promise 对象  ajax HTTP</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">adapter</span>(config).<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">onAdapterResolution</span>(<span class="params">response</span>) &#123;</span><br><span class="line">        <span class="title function_">throwIfCancellationRequested</span>(config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Transform response data</span></span><br><span class="line">        response.<span class="property">data</span> = <span class="title function_">transformData</span>(</span><br><span class="line">            response.<span class="property">data</span>,</span><br><span class="line">            response.<span class="property">headers</span>,</span><br><span class="line">            config.<span class="property">transformResponse</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//设置 promise 成功的值为 响应结果</span></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;, <span class="keyword">function</span> <span class="title function_">onAdapterRejection</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">isCancel</span>(reason)) &#123;</span><br><span class="line">            <span class="title function_">throwIfCancellationRequested</span>(config);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Transform response data</span></span><br><span class="line">            <span class="keyword">if</span> (reason &amp;&amp; reason.<span class="property">response</span>) &#123;</span><br><span class="line">                reason.<span class="property">response</span>.<span class="property">data</span> = <span class="title function_">transformData</span>(</span><br><span class="line">                    reason.<span class="property">response</span>.<span class="property">data</span>,</span><br><span class="line">                    reason.<span class="property">response</span>.<span class="property">headers</span>,</span><br><span class="line">                    config.<span class="property">transformResponse</span></span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置 promise 为失败, 失败的值为错误信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>adapter模块返回的是一个promise对象，这里做的就是对该对象的结果进行回调处理(then)<code>响应错误</code></p><p>处理函数在then回调里面自己安排</p></blockquote><h3 id="拦截器实例化文件"><a href="#拦截器实例化文件" class="headerlink" title="拦截器实例化文件"></a>拦截器实例化文件</h3><blockquote><p>暴露为函数用于创建实例对象(拦截器)</p></blockquote><p><img src="/2023/12/08/axios/image-20230509221201962.png" alt="image-20230509221201962"></p><blockquote><p>axios就是Axios</p></blockquote><h3 id="合并配置文件"><a href="#合并配置文件" class="headerlink" title="合并配置文件"></a>合并配置文件</h3><blockquote><p>合并配置数据</p></blockquote><h3 id="settle改变promise状态"><a href="#settle改变promise状态" class="headerlink" title="settle改变promise状态"></a>settle改变promise状态</h3><blockquote><p>暴露为函数，根据状态码改变promise状态</p></blockquote><h3 id="结果-transformData-文件"><a href="#结果-transformData-文件" class="headerlink" title="结果(transformData)文件"></a>结果(transformData)文件</h3><blockquote><p>用于对结果进行处理</p></blockquote><hr><h2 id="help处理文档"><a href="#help处理文档" class="headerlink" title="help处理文档"></a>help处理文档</h2><blockquote><p>对如下的东西进行处理</p></blockquote><p><img src="/2023/12/08/axios/image-20230426210146219.png" alt="image-20230426210146219"></p><hr><h2 id="其他文件"><a href="#其他文件" class="headerlink" title="其他文件"></a>其他文件</h2><p><img src="/2023/12/08/axios/image-20230426210332433.png" alt="image-20230426210332433"></p><blockquote><p>axios入口文件、默认配置对象文件、整个包的入口文件(index)</p></blockquote><h3 id="axios入口文件"><a href="#axios入口文件" class="headerlink" title="axios入口文件"></a>axios入口文件</h3><p><strong>上半部分</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入工具</span></span><br><span class="line">    <span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>);</span><br><span class="line">    <span class="comment">//引入绑定函数  创建函数</span></span><br><span class="line">    <span class="keyword">var</span> bind = <span class="built_in">require</span>(<span class="string">&#x27;./helpers/bind&#x27;</span>);<span class="comment">// 创建函数的</span></span><br><span class="line">    <span class="comment">//引入 Axios 主文件</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Axios</span> = <span class="built_in">require</span>(<span class="string">&#x27;./core/Axios&#x27;</span>);</span><br><span class="line">    <span class="comment">//...等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createInstance</span>(<span class="params">defaultConfig</span>) &#123;</span><br><span class="line">    <span class="comment">//创建一个实例对象 context 可以调用 get  post put delete request</span></span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">new</span> <span class="title class_">Axios</span>(defaultConfig);<span class="comment">// context 不能当函数使用  </span></span><br><span class="line">    <span class="comment">// 将 request 方法的 this 指向 context 并返回新函数  instance 可以用作函数使用, 且返回的是一个 promise 对象</span></span><br><span class="line">    <span class="keyword">var</span> instance = <span class="title function_">bind</span>(<span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>, context);<span class="comment">// instance 与 Axios.prototype.request 代码一致</span></span><br><span class="line">    <span class="comment">// instance(&#123;method:&#x27;get&#x27;&#125;);  instance.get() .post()</span></span><br><span class="line">    <span class="comment">// Copy axios.prototype to instance</span></span><br><span class="line">    <span class="comment">// 将 Axios.prototype 和实例对象的方法都添加到 instance 函数身上</span></span><br><span class="line">    utils.<span class="title function_">extend</span>(instance, <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>, context);<span class="comment">// instance.get instance.post ...</span></span><br><span class="line">    <span class="comment">// instance()  instance.get()</span></span><br><span class="line">    <span class="comment">// 将实例对象的方法和属性扩展到 instance 函数身上</span></span><br><span class="line">    utils.<span class="title function_">extend</span>(instance, context);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>引入工具+创建实例对象</p><p>bind使得instance变成与 Axios.prototype.request 代码一致的函数，指向实例对象context</p><p>utils.extend(instance, Axios.prototype, context);将Axios.prototype的内容(属性与方法)复制给instance</p><p>utils.extend(instance, context);同理，这里要看看context里面有什么 </p></blockquote><p><img src="/2023/12/08/axios/image-20230426214422979.png" alt="image-20230426214422979"></p><p><img src="/2023/12/08/axios/image-20230426222753168.png" alt="image-20230426222753168"></p><blockquote><p>这里添加了defaults和interceptors这两个属性给调用这个函数的对象context</p><p>其中defaults属性就是绕了一圈将默认配置文件的内容</p><p>所以最后context就有了以上两个属性的</p></blockquote><p><strong>下半部分</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过配置创建 axios 函数，并添加属性</span></span><br><span class="line">    <span class="keyword">var</span> axios = <span class="title function_">createInstance</span>(defaults);</span><br><span class="line">    <span class="comment">// axios 添加 Axios 属性</span></span><br><span class="line">    axios.<span class="property">Axios</span> = <span class="title class_">Axios</span>;</span><br><span class="line">    <span class="comment">// 工厂函数  用来返回创建实例对象的函数</span></span><br><span class="line">    axios.<span class="property">create</span> = <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">instanceConfig</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">createInstance</span>(<span class="title function_">mergeConfig</span>(axios.<span class="property">defaults</span>, instanceConfig));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// Expose Cancel &amp; CancelToken</span></span><br><span class="line">    axios.<span class="property">Cancel</span> = <span class="built_in">require</span>(<span class="string">&#x27;./cancel/Cancel&#x27;</span>);</span><br><span class="line">    axios.<span class="property">CancelToken</span> = <span class="built_in">require</span>(<span class="string">&#x27;./cancel/CancelToken&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露对象</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = axios;</span><br><span class="line">    <span class="comment">//简单实现全局暴露 axios</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">axios</span> = axios;</span><br><span class="line">    <span class="comment">// Allow use of default import syntax in TypeScript</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">default</span> = axios;</span><br></pre></td></tr></table></figure><blockquote><p>给对象添加其他属性和函数+暴露</p></blockquote><h3 id="将instance给axios并暴露"><a href="#将instance给axios并暴露" class="headerlink" title="将instance给axios并暴露"></a>将instance给axios并暴露</h3><blockquote><p>var axios = createInstance(defaults);</p><p><code>return instance</code></p><p>相当于axios就是instance，并且有了它的属性和函数</p></blockquote><p><strong>最终可以在全局用axios发送请求</strong></p><p><img src="/2023/12/08/axios/image-20230426224750119.png" alt="image-20230426224750119"></p><blockquote><p>既可以 当做函数使用<code>通用</code>，</p><p>又可以用里面的方法<code>API请求</code></p></blockquote><h1 id="模仿axios请求的创建"><a href="#模仿axios请求的创建" class="headerlink" title="模仿axios请求的创建"></a>模仿axios请求的创建</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Axios</span>(<span class="params">config</span>)&#123;</span><br><span class="line">            <span class="comment">//初始化</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">defaults</span> = config;<span class="comment">//为了创建 default 默认属性</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">intercepters</span> = &#123;</span><br><span class="line">                <span class="attr">request</span>: &#123;&#125;,</span><br><span class="line">                <span class="attr">response</span>: &#123;&#125;</span><br><span class="line">            &#125;<span class="comment">//intercepters实例</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加两个属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原型添加相关的方法，</span></span><br><span class="line"><span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送 AJAX 请求 请求的类型为 &#x27;</span>+ config.<span class="property">method</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123;<span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">post</span> = <span class="keyword">function</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123;<span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加request的原型方法，<code>属性.方法</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">createInstance</span>(<span class="params">config</span>)&#123;</span><br><span class="line">            <span class="comment">//实例化一个对象</span></span><br><span class="line">            <span class="keyword">let</span> context = <span class="keyword">new</span> <span class="title class_">Axios</span>(config);<span class="comment">// context.get()  context.post()  但是不能当做函数使用 context() X</span></span><br><span class="line">            <span class="comment">//创建请求函数</span></span><br><span class="line">            <span class="keyword">let</span> instance = <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>.<span class="title function_">bind</span>(context);<span class="comment">// instance 是一个函数 并且可以 instance(&#123;&#125;)  此时 instance 不能 instance.get X</span></span><br><span class="line">            <span class="comment">//将 Axios.prototype 对象中的方法添加到instance函数对象中</span></span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">                instance[key] = <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>[key].<span class="title function_">bind</span>(context);<span class="comment">// this.default  this.interceptors</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//为 instance 函数对象添加属性 default 与 interceptors</span></span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">keys</span>(context).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">                instance[key] = context[key];</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> axios = <span class="title function_">createInstance</span>();</span><br></pre></td></tr></table></figure><blockquote><p>创建对象<code>,先获取原形方法，后获取属性方法</code>，最后返回<code>intance</code>，可以使用函数和对象方法</p><p>其中对象context可以使用.get/.post/.request，但是不能context()，函数形式</p><p>bind()的作用<code>(返回一个函数)</code>需要自己了解一下</p><p>key就是属性值<code>(同for in 里面的key)</code>这里有get,post,request</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送请求</span></span><br><span class="line"><span class="comment">// axios(&#123;method:&#x27;POST&#x27;&#125;);</span></span><br><span class="line">axios.<span class="title function_">get</span>(&#123;&#125;);</span><br><span class="line">axios.<span class="title function_">post</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>发送请求</p></blockquote><h3 id="回忆object"><a href="#回忆object" class="headerlink" title="回忆object"></a>回忆object</h3><p><img src="/2023/12/08/axios/image-20230430163014684.png" alt="image-20230430163014684"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为 instance 函数对象添加属性 default 与 interceptors</span></span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">keys</span>(context).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">                instance[key] = context[key];</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>object.属性(对象)，得到的是<code>数组形式的</code>[object.属性,object.属性,object.属性]</p></blockquote><hr><h1 id="了解发送请求的过程"><a href="#了解发送请求的过程" class="headerlink" title="了解发送请求的过程"></a>了解发送请求的过程</h1><blockquote><p>result返回一个promise对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios 发送请求   axios  Axios.prototype.request  bind</span></span><br><span class="line"><span class="comment">//1. 声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Axios</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">config</span> = config;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="comment">//创建一个 promise 对象</span></span><br><span class="line">    <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span><br><span class="line">    <span class="comment">//声明一个数组</span></span><br><span class="line">    <span class="keyword">let</span> chains = [dispatchRequest, <span class="literal">undefined</span>];<span class="comment">// undefined 占位</span></span><br><span class="line">    <span class="comment">//调用 then 方法指定回调</span></span><br><span class="line">    <span class="keyword">let</span> result = promise.<span class="title function_">then</span>(chains[<span class="number">0</span>], chains[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//返回 promise 的结果</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. dispatchRequest 请求函数...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. adapter 适配器...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 创建 axios 函数...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="请求函数搭建"><a href="#请求函数搭建" class="headerlink" title="请求函数搭建"></a>请求函数搭建</h3><p><strong>dispatchRequest 函数</strong></p><blockquote><p>response就是xhrAdapter的promise对象的值</p><p>dispatchRequest 函数，就是根据adapter的回调结果处理，再调用自己的回调函数</p><p><code>then本身就是一个promise对象</code></p><p>此时response就是适配器的处理值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. dispatchRequest 函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dispatchRequest</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="comment">//调用适配器发送请求</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">xhrAdapter</span>(config).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//响应的结果进行转换处理(配置信息加工)</span></span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>adapter 适配器</strong></p><blockquote><p>adapter 适配器，用于设置请求，并根据状态码(接口)</p><p>返回一个<code>包含请求信息的对象信息的promise对象</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. adapter 适配器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">xhrAdapter</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xhrAdapter 函数执行&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//发送 AJAX 请求</span></span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        xhr.<span class="title function_">open</span>(config.<span class="property">method</span>, config.<span class="property">url</span>);</span><br><span class="line">        <span class="comment">//发送</span></span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">        <span class="comment">//绑定事件</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="comment">//判断成功的条件</span></span><br><span class="line">                <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                    <span class="comment">//成功的状态</span></span><br><span class="line">                    <span class="title function_">resolve</span>(&#123;</span><br><span class="line">                        <span class="comment">//配置对象</span></span><br><span class="line">                        <span class="attr">config</span>: config,</span><br><span class="line">                        <span class="comment">//响应体</span></span><br><span class="line">                        <span class="attr">data</span>: xhr.<span class="property">response</span>,</span><br><span class="line">                        <span class="comment">//响应头</span></span><br><span class="line">                        <span class="attr">headers</span>: xhr.<span class="title function_">getAllResponseHeaders</span>(), <span class="comment">//字符串  parseHeaders</span></span><br><span class="line">                        <span class="comment">// xhr 请求对象</span></span><br><span class="line">                        <span class="attr">request</span>: xhr,</span><br><span class="line">                        <span class="comment">//响应状态码</span></span><br><span class="line">                        <span class="attr">status</span>: xhr.<span class="property">status</span>,</span><br><span class="line">                        <span class="comment">//响应状态字符串</span></span><br><span class="line">                        <span class="attr">statusText</span>: xhr.<span class="property">statusText</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//失败的状态</span></span><br><span class="line">                    <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请求失败 失败的状态码为&#x27;</span> + xhr.<span class="property">status</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.创建 axios 函数，这里axios是一个promise对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4. 创建 axios 函数</span></span><br><span class="line"><span class="keyword">let</span> axios = <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>.<span class="title function_">bind</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;http://localhost:3000/posts&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="拦截器-1"><a href="#拦截器-1" class="headerlink" title="拦截器"></a>拦截器</h1><p><strong>构造代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Axios</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">config</span> = config;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span> = &#123;</span><br><span class="line">        <span class="attr">request</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>(),</span><br><span class="line">        <span class="attr">response</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>(),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送请求  难点与重点</span></span><br><span class="line"><span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="comment">//创建一个 promise 对象</span></span><br><span class="line">    <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span><br><span class="line">    <span class="comment">//创建一个数组</span></span><br><span class="line">    <span class="keyword">const</span> chains = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line">    <span class="comment">//处理拦截器</span></span><br><span class="line">    <span class="comment">//请求拦截器 将请求拦截器的回调 压入到 chains 的前面  request.handles = []</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="property">handlers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        chains.<span class="title function_">unshift</span>(item.<span class="property">fulfilled</span>, item.<span class="property">rejected</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//响应拦截器</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="property">handlers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        chains.<span class="title function_">push</span>(item.<span class="property">fulfilled</span>, item.<span class="property">rejected</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(chains);</span></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">while</span>(chains.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        promise = promise.<span class="title function_">then</span>(chains.<span class="title function_">shift</span>(), chains.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dispatchRequest</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="comment">//返回一个promise 对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(&#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">statusText</span>: <span class="string">&#x27;OK&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">let</span> context = <span class="keyword">new</span> <span class="title class_">Axios</span>(&#123;&#125;);</span><br><span class="line"><span class="comment">//创建axios函数</span></span><br><span class="line"><span class="keyword">let</span> axios = <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>.<span class="title function_">bind</span>(context);</span><br><span class="line"><span class="comment">//将 context 属性 config interceptors 添加至 axios 函数对象身上</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(context).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    axios[key] = context[key];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//拦截器管理器构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">InterceptorManager</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">InterceptorManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">use</span> = <span class="keyword">function</span>(<span class="params">fulfilled, rejected</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        fulfilled,</span><br><span class="line">        rejected</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>拦截器回调的执行流程，通过调用函数和里面的属性，将获得的回调压入数组里面(use的保留作用)</p></blockquote><p><img src="/2023/12/08/axios/image-20230509225210380.png" alt="image-20230509225210380"></p><blockquote><p>handles数组里面已经有了两组回调函数</p></blockquote><p><img src="/2023/12/08/axios/image-20230509230239051.png" alt="image-20230509230239051"></p><blockquote><p>Axios文件中，然后将interceptor的回调压入chain数组里面，最后取出</p></blockquote><p><img src="/2023/12/08/axios/image-20230510152901151.png" alt="image-20230510152901151"></p><blockquote><p>这里请求拦截器和响应拦截器是拦截器对象里面不同的两个属性，</p><p>一个往前压一个往后压，</p><p>中间是开始chain[,]设定的值</p><p>全部是<code>chain[f(full),f(rej), dispatchRequest, undefined, f(full),f(rej)]</code>六个元素</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个成功的 promise 且成功的值为合并后的请求配置</span></span><br><span class="line">    <span class="keyword">var</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);<span class="comment">//  promise 成功的Promise</span></span><br></pre></td></tr></table></figure><blockquote><p>通过创建一个成功的回调来让then执行成功的回调函数</p><p>所以先第一个成功的回调取出(请求拦截器)</p><p>数据会被覆盖，当中间报错时就会<code>异常穿透就会直接报错</code>，没异常就直接报正确，所以没问题</p></blockquote><p><strong>功能测试代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下为功能测试代码</span></span><br><span class="line"><span class="comment">// 设置请求拦截器  config 配置对象</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> <span class="title function_">one</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 成功 - 1号&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> <span class="title function_">one</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 失败 - 1号&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> <span class="title function_">two</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 成功 - 2号&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> <span class="title function_">two</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 失败 - 2号&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 成功 1号&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 失败 1号&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 成功 2号&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 失败 2号&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>axios(配置对象)，axios是promise所以可以使用then</p><p>response的值源于axios这个promise的结果</p><p>axios这个promise的结果，来源于promise = promise.then(chains.shift(), chains.shift());</p><p>chains.shift()，就是then的resolve返回结果</p><p>此时在循环中，不断经历打印的过程，因为chains.shift()为一个函数如下<code>(这个就是使用了方法将函数以变量的形式，压入handler数组)</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> <span class="title function_">one</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 成功 - 1号&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> <span class="title function_">one</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 失败 - 1号&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><p><strong>为什么请求拦截器后进先执行</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理拦截器</span></span><br><span class="line"><span class="comment">//请求拦截器 将请求拦截器的回调 压入到 chains 的前面  request.handles = []</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="property">handlers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    chains.<span class="title function_">unshift</span>(item.<span class="property">fulfilled</span>, item.<span class="property">rejected</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>unshift往前面插入，先获取1,1，后获取2,2</p><p>所以变成handles = [2,2,1,1]  (这里1，1指的是成功与失败的第一个回调)</p></blockquote><p>forEach可以遍历对象？</p><hr><h1 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h1><h2 id="了解功能实现"><a href="#了解功能实现" class="headerlink" title="了解功能实现"></a>了解功能实现</h2><blockquote><p><strong>cancel = c 是什么意思</strong></p></blockquote><p><img src="/2023/12/08/axios/image-20230511210054992.png" alt="image-20230511210054992"></p><blockquote><p>这里cancel = c相当于绑定了resolvePromise()</p><p>cancel()相当于resolvePromise()，<code>也就是说cancel()是代理</code></p></blockquote><p><img src="/2023/12/08/axios/image-20230513145525973.png" alt="image-20230513145525973"></p><blockquote><p><strong>在promise中</strong></p><p>相当于执行了executor(resolve)</p></blockquote><p><img src="/2023/12/08/axios/image-20230513145515940.png" alt="image-20230513145515940"></p><blockquote><p>将函数<code>resolve()</code>给了resolvePromise,所以<code>最终的状态一定是成功fulfilled</code></p><p>result由resolvePromise(data)，的data决定</p></blockquote><p><strong>如何利用promise状态调用abort实现取消</strong></p><p><img src="/2023/12/08/axios/image-20230513153138909.png" alt="image-20230513153138909"></p><blockquote><p>此时只有一个回调函数，且该回调处于pendding状态</p><p>当改变状态时，再执行。</p><p>疑问：虽然知道cancel()执行不管状态是什么。但是为什么then后面指定一个回调不会报错</p></blockquote><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h3><blockquote><p>1.构造Axios函数(总的函数)</p><p>2.添加request的Axios原型方法(返回请求信息)</p><p>3.请求函数的搭建+适配器()</p><p>4.取消请求的处理函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Axios</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">config</span> = config;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原型 request 方法</span></span><br><span class="line"><span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatchRequest</span>(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dispatchRequest 函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dispatchRequest</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">xhrAdapter</span>(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//xhrAdapter</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">xhrAdapter</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="comment">//发送 AJAX 请求</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//实例化对象</span></span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        xhr.<span class="title function_">open</span>(config.<span class="property">method</span>, config.<span class="property">url</span>);</span><br><span class="line">        <span class="comment">//发送</span></span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">        <span class="comment">//处理结果</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="comment">//判断结果</span></span><br><span class="line">                <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                    <span class="comment">//设置为成功的状态</span></span><br><span class="line">                    <span class="title function_">resolve</span>(&#123;</span><br><span class="line">                        <span class="attr">status</span>: xhr.<span class="property">status</span>,</span><br><span class="line">                        <span class="attr">statusText</span>: xhr.<span class="property">statusText</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请求失败&#x27;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//取消请求......</span></span><br></pre></td></tr></table></figure><p><strong>请求返回</strong></p><p><img src="/2023/12/08/axios/image-20230516211105107.png" alt="image-20230516211105107"></p><blockquote><p>1.有意思的是，你会发现因为返回的是promise所以发送请求的回调处理可以使用then</p><p>2.也可以这么说，在回调函数的地方使用then(解决回调地狱问题)，所以前面选择返回promise</p></blockquote><p><strong>取消请求操作</strong></p><blockquote><p>1.abort()的根据promise状态实现</p><p>2.CancelToken函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">//关于取消请求的处理</span></span><br><span class="line">        <span class="keyword">if</span>(config.<span class="property">cancelToken</span>)&#123;</span><br><span class="line">            <span class="comment">//对 cancelToken 对象身上的 promise 对象指定成功的回调</span></span><br><span class="line">            config.<span class="property">cancelToken</span>.<span class="property">promise</span>.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                xhr.<span class="title function_">abort</span>();</span><br><span class="line">                <span class="comment">//将整体结果设置为失败</span></span><br><span class="line">                <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请求已经被取消&#x27;</span>))</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建 axios 函数</span></span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">new</span> <span class="title class_">Axios</span>(&#123;&#125;);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>.<span class="title function_">bind</span>(context);</span><br><span class="line"></span><br><span class="line"><span class="comment">//CancelToken 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CancelToken</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//声明一个变量</span></span><br><span class="line">    <span class="keyword">var</span> resolvePromise;</span><br><span class="line">    <span class="comment">//为实例对象添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">promise</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//将 resolve 赋值给 resolvePromise</span></span><br><span class="line">        resolvePromise = resolve</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//调用 executor 函数</span></span><br><span class="line">    <span class="title function_">executor</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//执行 resolvePromise 函数</span></span><br><span class="line">        <span class="title function_">resolvePromise</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取按钮 以上为模拟实现的代码</span></span><br><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="comment">//2.声明全局变量</span></span><br><span class="line"><span class="keyword">let</span> cancel = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//检测上一次的请求是否已经完成</span></span><br><span class="line">    <span class="keyword">if</span>(cancel !== <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//取消上一次的请求</span></span><br><span class="line">        <span class="title function_">cancel</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 cancelToken 的值</span></span><br><span class="line">    <span class="keyword">let</span> cancelToken = <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span>(<span class="params">c</span>)&#123;</span><br><span class="line">        cancel = c;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">        <span class="comment">//1. 添加配置对象的属性</span></span><br><span class="line">        <span class="attr">cancelToken</span>: cancelToken</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">        <span class="comment">//将 cancel 的值初始化</span></span><br><span class="line">        cancel = <span class="literal">null</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定第二个事件取消请求</span></span><br><span class="line">btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">cancel</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遇到的问题</p><blockquote><p>要理解清除流程</p><p>一步一步地建立自己的思路</p><p>触发事件要搞清楚，不然都发送不了请求</p></blockquote><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="axios与Axios的一些关系"><a href="#axios与Axios的一些关系" class="headerlink" title="axios与Axios的一些关系"></a>axios与Axios的一些关系</h2><p><img src="/2023/12/08/axios/image-20230517152130601.png" alt="image-20230517152130601"></p><h2 id="instance与axios的区别"><a href="#instance与axios的区别" class="headerlink" title="instance与axios的区别"></a>instance与axios的区别</h2><p><img src="/2023/12/08/axios/image-20230517152342191.png" alt="image-20230517152342191"></p><blockquote><p>在createInstance外添加的一些axios属性，instance是没有的，像取消功能，对象外添加的属性与方法都没得</p></blockquote><p><img src="/2023/12/08/axios/image-20230517152728010.png" alt="image-20230517152728010"></p><hr><h2 id="axios运行总体流程"><a href="#axios运行总体流程" class="headerlink" title="axios运行总体流程"></a>axios运行总体流程</h2><p><img src="/2023/12/08/axios/image-20230517153626591.png" alt="image-20230517153626591"></p><p><strong>1.整体流程:</strong> </p><p>​        request(config) ==&gt; dispatchRequest(config) ==&gt; xhrAdapter(config) </p><p><strong>2.request(config):</strong> </p><p>​        将请求拦截器 / dispatchRequest() / 响应拦截器 通过 promise 链串连起来, </p><p>​        返回 promise</p><p><strong>3.dispatchRequest(config):</strong> </p><p>​        转换请求数据 ==&gt; 调用 xhrAdapter()发请求 ==&gt; 请求返回后转换响应数</p><p>​        据. 返回 promise</p><p><strong>4.xhrAdapter(config):</strong> </p><p>​        创建 XHR 对象, 根据 config 进行相应设置, 发送特定请求, 并接收响应数据, </p><p>​        返回 promise </p><hr><h2 id="axios请求拦截器与响应拦截器"><a href="#axios请求拦截器与响应拦截器" class="headerlink" title="axios请求拦截器与响应拦截器"></a>axios请求拦截器与响应拦截器</h2><p><img src="/2023/12/08/axios/image-20230517154006965.png" alt="image-20230517154006965"></p><p><strong>1.请求拦截器:</strong> </p><p>​    在真正发送请求前执行的回调函数</p><p>​    可以对请求进行检查或配置进行特定处理</p><p>​    成功的回调函数, 传递的默认是 config(也必须是)</p><p>​    失败的回调函数, 传递的默认是 error</p><p><strong>2.响应拦截器</strong></p><p>​    在请求得到响应后执行的回调函数</p><p>​    可以对响应数据进行特定处理</p><p>​    成功的回调函数, 传递的默认是 response</p><p>​    失败的回调函数, 传递的默认是 error</p><hr><h2 id="axios-的请求响应数据转换器"><a href="#axios-的请求响应数据转换器" class="headerlink" title="axios 的请求响应数据转换器"></a>axios 的请求响应数据转换器</h2><blockquote><p><code>起到一些预处理作用，完全可以使用拦截器代替</code></p></blockquote><p><strong>1.请求转换器: 对请求头和请求体数据进行特定处理的函数</strong></p><p>if (utils.isObject(data)) {</p><p> setContentTypeIfUnset(headers, ‘application/json;charset=utf-8’);</p><p> return JSON.stringify(data);</p><p>}</p><p><strong>2.响应转换器: 将响应体 json 字符串解析为 js 对象或数组的函数</strong></p><p>response.data = JSON.parse(response.data)</p><h2 id="response的整体结构"><a href="#response的整体结构" class="headerlink" title="response的整体结构"></a>response的整体结构</h2><p>{</p><p> data,</p><p> status,</p><p> statusText,</p><p> headers,</p><p> config,</p><p> request</p><p> }</p><hr><h2 id="error-的整体结构"><a href="#error-的整体结构" class="headerlink" title="error 的整体结构"></a>error 的整体结构</h2><p>{</p><p> message, </p><p> response,</p><p>request,</p><p>}</p><hr><h2 id="如何取消未完成的请求"><a href="#如何取消未完成的请求" class="headerlink" title="如何取消未完成的请求?"></a>如何取消未完成的请求?</h2><p><strong>1.当配置了 cancelToken 对象时, 保存 cancel 函数</strong></p><p>(1) 创建一个用于将来中断请求的 cancelPromise</p><p>(2) 并定义了一个用于取消请求的 cancel 函数</p><p>(3) 将 cancel 函数传递出来</p><p><strong>2.调用 cancel()取消请求</strong></p><p>(1) 执行 cacel 函数, 传入错误信息 message</p><p>(2) 内部会让 cancelPromise 变为成功, 且成功的值为一个 Cancel 对象</p><p>(3) 在 cancelPromise 的成功回调中中断请求, 并让发请求的 proimse 失败, </p><p>失败的 reason 为 Cancel 对象</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ajax</title>
      <link href="/2023/12/08/ajax/"/>
      <url>/2023/12/08/ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="ajax介绍"><a href="#ajax介绍" class="headerlink" title="ajax介绍"></a>ajax介绍</h1><p><img src="/2023/12/08/ajax/image-20230406212245114.png" alt="image-20230406212245114"></p><p>百度搜索的提醒</p><p>用户注册的提醒</p><p>二级菜单的展开</p><p><img src="/2023/12/08/ajax/image-20230406212719934.png" alt="image-20230406212719934"></p><hr><h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="/2023/12/08/ajax/image-20230406212945483.png" alt="image-20230406212945483"></p><h2 id="与HTML的区别"><a href="#与HTML的区别" class="headerlink" title="与HTML的区别"></a>与HTML的区别</h2><p><img src="/2023/12/08/ajax/image-20230406213215609.png" alt="image-20230406213215609"></p><blockquote><p>预定义标签，如a，p,h,</p></blockquote><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p><img src="/2023/12/08/ajax/image-20230406214054356.png" alt="image-20230406214054356"></p><blockquote><p>跨域问题指的是不同网页地址之间的请求(不同源)</p><p>SEO(爬虫)，因为是异步的请求所以爬不了</p></blockquote><h1 id="请求报文中"><a href="#请求报文中" class="headerlink" title="请求报文中"></a>请求报文中</h1><p><img src="/2023/12/08/ajax/image-20230406214751170.png" alt="image-20230406214751170"></p><blockquote><p>get方法请求体是空的，post可以不为空</p></blockquote><hr><h1 id="原生ajax"><a href="#原生ajax" class="headerlink" title="原生ajax"></a>原生ajax</h1><h2 id="在html页面中的请求操作"><a href="#在html页面中的请求操作" class="headerlink" title="在html页面中的请求操作"></a>在html页面中的请求操作</h2><p><img src="/2023/12/08/ajax/image-20230406221208177.png" alt="image-20230406221208177"></p><p><img src="/2023/12/08/ajax/image-20230406221330517.png" alt="image-20230406221330517"></p><h3 id="获取效果如下"><a href="#获取效果如下" class="headerlink" title="获取效果如下"></a>获取效果如下</h3><p><img src="/2023/12/08/ajax/image-20230406221300266.png" alt="image-20230406221300266"></p><blockquote><p>innerHTML = xhr.response</p><p>让页面获得响应结果，而不用刷新页面</p></blockquote><h2 id="设置请求参数-query"><a href="#设置请求参数-query" class="headerlink" title="设置请求参数(query)"></a>设置请求参数(query)</h2><p><img src="/2023/12/08/ajax/image-20230406221832482.png" alt="image-20230406221832482"></p><blockquote><p>也是在地址栏后面？(参数a)&amp;(参数b)</p></blockquote><h2 id="ajax发送post请求"><a href="#ajax发送post请求" class="headerlink" title="ajax发送post请求"></a>ajax发送post请求</h2><p><img src="/2023/12/08/ajax/image-20230406222537911.png" alt="image-20230406222537911"></p><h3 id="post方法设置请求体参数"><a href="#post方法设置请求体参数" class="headerlink" title="post方法设置请求体参数"></a>post方法设置请求体参数</h3><p><img src="/2023/12/08/ajax/image-20230406222822883.png" alt="image-20230406222822883"></p><blockquote><p>将参数发给服务器</p></blockquote><h3 id="Ajax设置请求头信息"><a href="#Ajax设置请求头信息" class="headerlink" title="Ajax设置请求头信息"></a>Ajax设置请求头信息</h3><h4 id="路由的设置"><a href="#路由的设置" class="headerlink" title="路由的设置"></a>路由的设置</h4><p><img src="/2023/12/08/ajax/image-20230406224543811.png" alt="image-20230406224543811"></p><p><img src="/2023/12/08/ajax/image-20230406224657746.png" alt="image-20230406224657746"></p><h4 id="可能还需要一个校验所以设置all"><a href="#可能还需要一个校验所以设置all" class="headerlink" title="可能还需要一个校验所以设置all"></a>可能还需要一个校验所以设置all</h4><p><img src="/2023/12/08/ajax/image-20230406225040578.png" alt="image-20230406225040578"></p><h2 id="服务端设置json响应"><a href="#服务端设置json响应" class="headerlink" title="服务端设置json响应"></a>服务端设置json响应</h2><h3 id="服务器端设置json响应"><a href="#服务器端设置json响应" class="headerlink" title="服务器端设置json响应"></a>服务器端设置json响应</h3><p><img src="/2023/12/08/ajax/image-20230406225534563.png" alt="image-20230406225534563"></p><h3 id="html里面将json内容进行数据转化"><a href="#html里面将json内容进行数据转化" class="headerlink" title="html里面将json内容进行数据转化"></a>html里面将json内容进行数据转化</h3><p><strong>手动</strong></p><p><img src="/2023/12/08/ajax/image-20230406225919833.png" alt="image-20230406225919833"></p><p><img src="/2023/12/08/ajax/image-20230406230141995.png" alt="image-20230406230141995"></p><p><strong>自动</strong></p><p><img src="/2023/12/08/ajax/image-20230406230220571.png" alt="image-20230406230220571"></p><p><img src="/2023/12/08/ajax/image-20230406230319481.png" alt="image-20230406230319481"></p><hr><h2 id="ajax解决经常遇到的问题"><a href="#ajax解决经常遇到的问题" class="headerlink" title="ajax解决经常遇到的问题"></a>ajax解决经常遇到的问题</h2><h3 id="IE缓存问题解决"><a href="#IE缓存问题解决" class="headerlink" title="IE缓存问题解决"></a>IE缓存问题解决</h3><blockquote><p>之前获取过数据缓存，客户端下一次获取的可能是旧的数据(更新不及时)</p></blockquote><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p><img src="/2023/12/08/ajax/image-20230406231252775.png" alt="image-20230406231252775"></p><blockquote><p>利用时间戳区别两次请求，<code>但是很多工具包都会设置好，一般不需要自己解决</code></p></blockquote><h3 id="请求超时与网络异常-自动取消请求"><a href="#请求超时与网络异常-自动取消请求" class="headerlink" title="请求超时与网络异常(自动取消请求)"></a>请求超时与网络异常(自动取消请求)</h3><p><img src="/2023/12/08/ajax/image-20230406231948047.png" alt="image-20230406231948047"></p><blockquote><p>timeout()超时的设置ontimeout() = 回调函数</p></blockquote><p><img src="/2023/12/08/ajax/image-20230406232143274.png" alt="image-20230406232143274"></p><blockquote><p>网络异常的设置onerror</p></blockquote><h3 id="取消请求-手动"><a href="#取消请求-手动" class="headerlink" title="取消请求(手动)"></a>取消请求(手动)</h3><p><img src="/2023/12/08/ajax/image-20230406232844827.png" alt="image-20230406232844827"></p><blockquote><p><code>abort()方法，是xhr里面独有的取消请求的方法</code></p><p>暂时没看源码，现在看来应该和axios用promise里面的状态有关</p></blockquote><h3 id="请求重复发送问题"><a href="#请求重复发送问题" class="headerlink" title="请求重复发送问题"></a>请求重复发送问题</h3><blockquote><p>服务器来不及处理(恶意让服务器压力大)</p></blockquote><p><img src="/2023/12/08/ajax/image-20230406233852318.png" alt="image-20230406233852318"></p><hr><h1 id="jquery中的ajax"><a href="#jquery中的ajax" class="headerlink" title="jquery中的ajax"></a>jquery中的ajax</h1><p><img src="/2023/12/08/ajax/image-20230406234535096.png" alt="image-20230406234535096"></p><blockquote><p>设置成匿名就不会携带当前的cookie去访问</p></blockquote><h2 id="发送请求get-amp-post"><a href="#发送请求get-amp-post" class="headerlink" title="发送请求get&amp;post"></a>发送请求get&amp;post</h2><p><img src="/2023/12/08/ajax/image-20230406234844161.png" alt="image-20230406234844161"></p><h3 id="json数据返回"><a href="#json数据返回" class="headerlink" title="json数据返回"></a>json数据返回</h3><p><img src="/2023/12/08/ajax/image-20230406235145330.png" alt="image-20230406235145330"></p><blockquote><p><code>在jQuery中省了自己解析json文件</code></p></blockquote><h2 id="通用方法ajax"><a href="#通用方法ajax" class="headerlink" title="通用方法ajax"></a>通用方法ajax</h2><p> <img src="/2023/12/08/ajax/image-20230407142329270.png" alt="image-20230407142329270">&gt;  </p><blockquote><p>设置头信息的时候，要注意自定义的响应头</p></blockquote><hr><h1 id="axios最热门的ajax工具库"><a href="#axios最热门的ajax工具库" class="headerlink" title="axios最热门的ajax工具库"></a>axios最热门的ajax工具库</h1><h2 id="ajax-axios发送请求"><a href="#ajax-axios发送请求" class="headerlink" title="ajax-axios发送请求"></a>ajax-axios发送请求</h2><p><img src="/2023/12/08/ajax/image-20230407143536105.png" alt="image-20230407143536105"></p><blockquote><p>设置默认路径</p></blockquote><h3 id="方法的格式"><a href="#方法的格式" class="headerlink" title="方法的格式"></a>方法的格式</h3><p><img src="/2023/12/08/ajax/image-20230407143919704.png" alt="image-20230407143919704"></p><h3 id="post"><a href="#post" class="headerlink" title="post"></a>post</h3><p><img src="/2023/12/08/ajax/image-20230407144151638.png" alt="image-20230407144151638"></p><h2 id="axios通用方法"><a href="#axios通用方法" class="headerlink" title="axios通用方法"></a>axios通用方法</h2><p><img src="/2023/12/08/ajax/image-20230407144456447.png" alt="image-20230407144456447"></p><h4 id="最后打印一下响应结果"><a href="#最后打印一下响应结果" class="headerlink" title="最后打印一下响应结果"></a>最后打印一下响应结果</h4><p><img src="/2023/12/08/ajax/image-20230407144637359.png" alt="image-20230407144637359"></p><h4 id="response分别对应"><a href="#response分别对应" class="headerlink" title="response分别对应"></a>response分别对应</h4><p><img src="/2023/12/08/ajax/image-20230407144823627.png" alt="image-20230407144823627"></p><hr><h1 id="使用fetch函数发送请求"><a href="#使用fetch函数发送请求" class="headerlink" title="使用fetch函数发送请求"></a>使用fetch函数发送请求</h1><blockquote><p>该函数也可以像axios一样发送请求，不过用的比较少</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><img src="/2023/12/08/ajax/image-20230407145536174.png" alt="image-20230407145536174"></p><h3 id="fetch设置请求"><a href="#fetch设置请求" class="headerlink" title="fetch设置请求"></a>fetch设置请求</h3><p><img src="/2023/12/08/ajax/image-20230407145945241.png" alt="image-20230407145945241"></p><blockquote><p>与axios方法一样</p></blockquote><p><img src="/2023/12/08/ajax/image-20230407150029065.png" alt="image-20230407150029065"></p><blockquote><p>对响应内容作方法处理</p></blockquote><p><img src="/2023/12/08/ajax/image-20230407150250937.png" alt="image-20230407150250937"></p><blockquote><p>总的来说，用axios比较多</p></blockquote><hr><h1 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><blockquote><p>浏览器的一种安全策略,要求当前网页与ajax请求的资源来自<code>同一个服务器(到端口为止)</code></p></blockquote><p><img src="/2023/12/08/ajax/image-20230407150548000.png" alt="image-20230407150548000"></p><p><img src="/2023/12/08/ajax/image-20230407151207369.png" alt="image-20230407151207369"></p><h3 id="同源策略的请求"><a href="#同源策略的请求" class="headerlink" title="同源策略的请求"></a>同源策略的请求</h3><p><img src="/2023/12/08/ajax/image-20230407152238705.png" alt="image-20230407152238705"></p><h2 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h2><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><blockquote><p>非官方的，由程序员想出来的解决方案，<code>只支持get请求</code></p></blockquote><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p><img src="/2023/12/08/ajax/image-20230407152553795.png" alt="image-20230407152553795"></p><blockquote><p>利用标签的跨域特性</p></blockquote><p><img src="/2023/12/08/ajax/image-20230407153543509.png" alt="image-20230407153543509"></p><blockquote><p>实现了不同源之间的信息传递(请求与响应)</p></blockquote><h3 id="检测用户是否存在"><a href="#检测用户是否存在" class="headerlink" title="检测用户是否存在"></a>检测用户是否存在</h3><p><img src="/2023/12/08/ajax/image-20230407154228377.png" alt="image-20230407154228377"></p><blockquote><p>check-username服务返回检测数据，插入到网页文档中。这就实现了跨域(就是以前的各种调用，只不过网页所在的源与调用的源不同)</p></blockquote><h2 id="jQuery发送jsonp-跨域-请求"><a href="#jQuery发送jsonp-跨域-请求" class="headerlink" title="jQuery发送jsonp(跨域)请求"></a>jQuery发送jsonp(跨域)请求</h2><p><img src="/2023/12/08/ajax/image-20230407160056499.png" alt="image-20230407160056499"></p><hr><h2 id="官方的解决跨域的-CORS-方法"><a href="#官方的解决跨域的-CORS-方法" class="headerlink" title="官方的解决跨域的(CORS)方法"></a>官方的解决跨域的(CORS)方法</h2><p><img src="/2023/12/08/ajax/image-20230407161203615.png" alt="image-20230407161203615"></p><p><img src="/2023/12/08/ajax/image-20230407161358966.png" alt="image-20230407161358966"></p><blockquote><p>在服务器端口设置响应头就可以实现</p></blockquote><p><img src="/2023/12/08/ajax/image-20230407161531869.png" alt="image-20230407161531869"></p><p><img src="/2023/12/08/ajax/image-20230407161609711.png" alt="image-20230407161609711"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>打包工具</title>
      <link href="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要学习webpack"><a href="#为什么要学习webpack" class="headerlink" title="为什么要学习webpack"></a>为什么要学习webpack</h1><blockquote><p>解决(ESM)兼容性问题，和文件过多浏览器加载的问题</p></blockquote><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230517161754844.png" alt="image-20230517161754844"></p><blockquote><p>1.只需要发送一个请求(减少请求的发送)</p><p>2.合并后不是es模块化标准，解决兼容问题</p><p>​    将文件打包后不是直接交给浏览器，而是将es语法的文件，进行处理。让它成为旧的浏览器能够接受的旧js语法</p></blockquote><hr><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p><code>一切皆能打包</code></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230517162509634.png" alt="image-20230517162509634"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230518170354801.png" alt="image-20230518170354801"></p><blockquote><p>yarn add -D 名字</p><p>yarn remove 名字</p></blockquote><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230518171258970.png" alt="image-20230518171258970"></p><blockquote><p>注意区分是开发依赖还是全局依赖</p><p>-cli是为了方便执行webpack</p></blockquote><p>4.执行yarn webpack 进行打包</p><blockquote><p>产生dist/main.js(打包文件)</p><p>源文件index.js</p></blockquote><p>5.主文件下创建其它js文件</p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230518173246640.png" alt="image-20230518173246640"></p><blockquote><p>自定义属性，用于快速运行,yarn build</p></blockquote><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230521155740390.png" alt="image-20230521155740390"></p><p>网页生成文件目前需要每次都要重新打包生成，才会更新</p><hr><h1 id="应用jquery"><a href="#应用jquery" class="headerlink" title="应用jquery"></a>应用jquery</h1><h2 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h2><p><strong>1.没用也打包了jquery</strong></p><p><strong>2.没用上的变量a、b也打包了</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230521161135847.png" alt="image-20230521161135847"></p><blockquote><p>1.因为不能判断你一些默认的东西有没有用上，所以会打包一些jquery里面没有在export的内容(自动变绿)</p><p>2.a,b经过调用export输出，当没有通过export调用时，就不会被打包</p></blockquote><hr><h1 id="配置文件属性"><a href="#配置文件属性" class="headerlink" title="配置文件属性"></a>配置文件属性</h1><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230521161858411.png" alt="image-20230521161858411"></p><blockquote><p><code>src是前端规范，src以外遵循node规范</code></p></blockquote><p>其实是要用module.export(node.js的语法规范)</p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230521164900969.png" alt="image-20230521164900969"></p><h2 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h2><blockquote><p>配置文件里面的，用来指定主文件的<code>入口</code></p></blockquote><p><strong>直接形式</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230522162045700.png" alt="image-20230522162045700"></p><p><strong>数组形式</strong></p><blockquote><p>只需要修改配置即可，打包文件会重新生成</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,<span class="comment">//生产模式，development，开发模式</span></span><br><span class="line">    <span class="comment">//entry: &quot; &quot;//用来指定打包时的主文件，默认index.js</span></span><br><span class="line">    <span class="attr">entry</span>: [<span class="string">&quot;./src/a.js&quot;</span>]<span class="comment">//数组形式,只需要修改配置即可</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//    entry: [__dirname + &quot;/src/a.js&quot;]//使用绝对路径</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>对象形式</strong></p><blockquote><p>生成对应的打包文件，不再是单个，<code>名字由属性名决定</code></p></blockquote><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230522164949501.png" alt="image-20230522164949501"></p><p><strong>注意</strong></p><ul><li>当有多个entry入口的时候，只执行最后一个</li></ul><hr><h2 id="output"><a href="#output" class="headerlink" title="output"></a>output</h2><p>这里使用了node.js的path模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入path模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,<span class="comment">//生产模式，development，开发模式</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;/src/a.js&quot;</span>,<span class="comment">//用来指定打包时的主文件，默认index.js</span></span><br><span class="line">    <span class="comment">//entry: [__dirname + &quot;/src/a.js&quot;]//数组形式,只需要修改配置即可</span></span><br><span class="line">    <span class="comment">// entry:&#123;</span></span><br><span class="line">    <span class="comment">//     text:&quot;./src/b.js&quot;,</span></span><br><span class="line">    <span class="comment">//     mod:&quot;./src/a.js&quot;,</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;hi.js&quot;</span>,</span><br><span class="line">        <span class="attr">clean</span>:<span class="literal">true</span>,</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>path属性要用好，重复名字容易把你原来的文件吞了</p></blockquote><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230522181909319.png" alt="image-20230522181909319"></p><p>当要打包的文件有多个的时候，可以用一个<code>中括号变量来实现打包输出多个文件名</code></p><p><strong>加入id\hash</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230522182220409.png" alt="image-20230522182220409"></p><p>hash是文件的身份证的意思，很少用得上</p><hr><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><blockquote><p>通过loader可以处理其它类型(非js)的文件</p></blockquote><p><strong>css-loader</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230522224531185.png" alt="image-20230522224531185"></p><blockquote><p>正则表达式的问题<code>/\.css$/i</code></p><p>表示以<code>.css</code>结尾，且不区分大小写<code>i = ignore</code></p><p>另一个是g = global (匹配满足所有满足正则表达式的结果)</p><p>这里之所以要.是因为.在正则中代表任意字符，需要转义</p></blockquote><p><strong>style-loader</strong></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用css-loader-D</span></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>:<span class="regexp">/\.css$/i</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>遵循<code>从后往前执行</code>，<code>先css(转化成js)后style(使用js形式的css)</code>.</p><p>配置→index.js引用.css→打包→index.html引用main.js</p></blockquote><p><strong>样式如图</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230523161942130.png" alt="image-20230523161942130"></p><p><strong>引入图片</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用css-loader-D</span></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>:<span class="regexp">/\.css$/i</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>:<span class="regexp">/\.(png|jpg|gif)$/i</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&quot;asset/resource&quot;</span><span class="comment">//图片直接资源类型type处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230523220110201.png" alt="image-20230523220110201"></p><h2 id="半总结"><a href="#半总结" class="headerlink" title="半总结"></a>半总结</h2><p><strong>安装流程</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230523220507133.png" alt="image-20230523220507133"></p><p><strong>配置代码 web.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入path模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,<span class="comment">//生产模式，development，开发模式</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;/src/index.js&quot;</span>,<span class="comment">//用来指定打包时的主文件，默认index.js</span></span><br><span class="line">    <span class="comment">//entry: [__dirname + &quot;/src/a.js&quot;]//数组形式,只需要修改配置即可</span></span><br><span class="line">    <span class="comment">// entry: &#123;</span></span><br><span class="line">    <span class="comment">//     text:&quot;./src/b.js&quot;,</span></span><br><span class="line">    <span class="comment">//     mod:&quot;./src/a.js&quot;,</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">//path: path.resolve(__dirname, &quot;dist&quot;),</span></span><br><span class="line">        <span class="comment">//filename: &quot;[name]-[id]-[hash].js&quot;,</span></span><br><span class="line">        <span class="comment">// clean:true,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用css-loader-D</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.css$/i</span>,</span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.(png|jpg|gif)$/i</span>,</span><br><span class="line">                <span class="attr">type</span>:<span class="string">&quot;asset/resource&quot;</span><span class="comment">//图片直接资源类型type处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>src外使用node规范</p><p>注意css样式的流程顺序</p><p>注意图片type的处理</p></blockquote><p><strong>普通执行函数</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230524171756699.png" alt="image-20230524171756699"></p><p><strong>事件触发的回调函数</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230524172229457.png" alt="image-20230524172229457"></p><blockquote><p>回调函数还是得执行</p><p>那IE怎么解决箭头函数不兼容呢(IE已死所以不存在了)</p></blockquote><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230524172848649.png" alt="image-20230524172848649"></p><h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><blockquote><p>属于loader的一个工具，处理兼容性问题(es6\es5)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.m?js$/</span>,<span class="comment">//有无m的js文件</span></span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,<span class="comment">//除了这些文件外的</span></span><br><span class="line">      <span class="attr">use</span>: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,<span class="comment">//连接核心文件babel的工具</span></span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]<span class="comment">//核心处理文件/环境所需要的插件</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果如图</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230524211250783.png" alt="image-20230524211250783"></p><h2 id="配置兼容列表"><a href="#配置兼容列表" class="headerlink" title="配置兼容列表"></a>配置兼容列表</h2><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230524211740320.png" alt="image-20230524211740320"></p><blockquote><p>里面可以添加需要兼容的浏览器版本，不写就是默认</p></blockquote><hr><h1 id="插件-plugin"><a href="#插件-plugin" class="headerlink" title="插件(plugin)"></a>插件(plugin)</h1><blockquote><p>实现了，html的自定义创建</p></blockquote><p><strong>html-webpack-plugin</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230524212409029.png" alt="image-20230524212409029"></p><p><strong>创建模板</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230524222550530.png" alt="image-20230524222550530"></p><blockquote><p>自定义html模板，通过配置生成到dist目录下面</p></blockquote><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p><strong>1.defer表示延迟加载</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230522182928698.png" alt="image-20230522182928698"></p><p>因为引用的文件里面的东西可能还没有生成，需要后面引用</p><p><strong>2.设置字符串补全标签</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;emmet.triggerExpansionOnTab&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;emmet.showAbbreviationSuggestions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;emmet.showExpandedAbbreviation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;emmet.includeLanguages&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;javascript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>3.兼容性问题</strong></p><ul><li><p>采用折中方案，使用新特性，在代码完成时通过一些工具将新代码转换成旧代码</p></li><li><p>babel可以将新的js语法转化成旧语法</p></li></ul><p><strong>4.项目持续更新</strong></p><ul><li><p>在本地端</p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230528145331358.png" alt="image-20230528145331358"></p></li></ul><blockquote><p>1.可以在配置文件里面设置(最好)</p><p>2.在命令行输入webpack –watch</p></blockquote><ul><li><p>在创建服务器端</p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230528145902061.png" alt="image-20230528145902061"></p></li></ul><blockquote><p>yarn add -D webpack-dev-server</p><p>1.可以在配置文件里面设置(最好)</p><p>2.在命令行输入webpack serve –open 启动</p></blockquote><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230528150151285.png" alt="image-20230528150151285"></p><blockquote><p>服务器的时候，是打包到服务器的，不会在这里显示dist</p><p>所以要自己手动dist生成一个本地的</p></blockquote><p><strong>5.生产模式与开发模式</strong></p><ul><li>开发模式development</li></ul><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230528152648168.png" alt="image-20230528152648168"></p><blockquote><p>调试不了一点</p></blockquote><ul><li>生产模式production</li></ul><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230528152822752.png" alt="image-20230528152822752"></p><blockquote><p>打包上线</p></blockquote><p><code>6.import()函数与import语句</code></p><p><strong>import()函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">import</span>(<span class="string">&#x27;./xxx/aaa&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">msg</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//加载内容  不会报错</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//error codo</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>import语句</strong></p><p>import语句是<a href="https://so.csdn.net/so/search?q=es6&spm=1001.2101.3001.7020">es6</a>中提出的静态化的模块化思想的产物，与export配合使用，<code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</p><p><strong>不同</strong></p><blockquote><p>1.语句是静态的模块，不能有变量与export对应</p><p>2.函数是异步的模块，是一个promise</p><p>3.import命令会被 JavaScript 引擎静态分析，先于模块内的其他语句执行，异步加载，只能放在模块首部</p></blockquote><hr><h1 id="source-map"><a href="#source-map" class="headerlink" title="source map"></a>source map</h1><blockquote><p>在用于<code>开发</code>的时候，可以生成源文件(在网页源文件)，可以调试源码</p><p>称作<code>配置源码的映射</code></p></blockquote><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230528164339593.png" alt="image-20230528164339593"></p><hr><h1 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h1><ul><li><p>也是前端的构建工具</p></li><li><p>相较于webpack，vite采取了不同的运行方式</p><ul><li>开发时，并不对代码打包，而是直接采用ESM的方式来运行项目</li><li>在项目部署时，在对项目进行打包(回归到模块太多，性能的问题)</li></ul></li></ul><h2 id="vite比webpack的优势有"><a href="#vite比webpack的优势有" class="headerlink" title="vite比webpack的优势有"></a>vite比webpack的优势有</h2><p>Vite 通过在一开始将应用中的模块区分为 <strong>依赖</strong> 和 <strong>源码</strong> 两类，改进了开发服务器启动时间。</p><ul><li><p><strong>依赖</strong> 大多为在开发时不会变动的纯 JavaScript。一些较大的依赖（例如有上百个模块的组件库）处理的代价也很高。依赖也通常会存在多种模块化格式（例如 ESM 或者 CommonJS）。</p><p>Vite 将会使用 <a href="https://esbuild.github.io/">esbuild</a> <a href="https://cn.vitejs.dev/guide/dep-pre-bundling.html">预构建依赖</a>。esbuild 使用 Go 编写，并且比以 JavaScript 编写的打包器预构建依赖快 10-100 倍。</p></li></ul><blockquote><p>主要是esbuild和的与构建依赖和Go语言</p><p>详情看官方</p><p><a href="https://cn.vitejs.dev/guide/why.html">为什么选 Vite | Vite 官方中文文档 (vitejs.dev)</a></p></blockquote><p><strong>基于本都ESM的开发服务器</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230528170236139.png" alt="image-20230528170236139"></p><blockquote><p>Vite 以 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">原生 ESM</a> 方式提供源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。</p></blockquote><p><strong>基于捆绑开发服务器</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230528170528814.png" alt="image-20230528170528814"></p><h2 id="设置开发命令"><a href="#设置开发命令" class="headerlink" title="设置开发命令"></a>设置开发命令</h2><blockquote><p>这里是开发依赖</p></blockquote><p>1.yarn init -y 创建项目</p><p>2.yarn add -D vite 安装vite</p><p>3.yarn vite 运行服务器端口</p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230528180057242.png" alt="image-20230528180057242"></p><p><strong>注意事项</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;moudle&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&lt;/<span class="attr">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在vite中，它是以模块的形式引用index.js的</p><p><code>所以要type=&quot;module&quot;，表示为ESM的规范</code>,不然模块就不好使了</p></blockquote><h2 id="使用命令快速搭建vite项目"><a href="#使用命令快速搭建vite项目" class="headerlink" title="使用命令快速搭建vite项目"></a>使用命令快速搭建vite项目</h2><p><strong>npm</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure><p><strong>yarn</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><p><strong>pnpm</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm create vite</span><br></pre></td></tr></table></figure><h2 id="添加插件扩展功能"><a href="#添加插件扩展功能" class="headerlink" title="添加插件扩展功能"></a>添加插件扩展功能</h2><p><strong>官方说明：</strong></p><p>​    Vite 可以使用插件进行扩展，这得益于 Rollup 优秀的插件接口设计和一部分 Vite 独有的额外选项。这意味着 Vite 用户可以利用 Rollup 插件的强大生态系统，同时根据需要也能够扩展开发服务器和 SSR 功能。</p><h3 id="兼容性问题"><a href="#兼容性问题" class="headerlink" title="兼容性问题"></a>兼容性问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm add -D @vitejs/plugin-legacy</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若要使用一个插件，需要将它添加到项目的 <code>devDependencies</code> 并在 <code>vite.config.js</code> 配置文件中的 <code>plugins</code> 数组中引入它。例如，要想为传统浏览器提供支持，可以按下面这样使用官方插件 <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy">@vitejs/plugin-legacy</a>：</p><blockquote><p>主要处理浏览器兼容问题。相当于webpack中的bable的功能</p></blockquote><h4 id="在配置文件中"><a href="#在配置文件中" class="headerlink" title="在配置文件中"></a>在配置文件中</h4><p>1.创建配置文件</p><p>2.安装插件<code>@vitejs/plugin-legacy</code></p><p>3.vite.config.js配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> legacy <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-legacy&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">legacy</span>(&#123;</span><br><span class="line">      <span class="attr">targets</span>: [<span class="string">&#x27;defaults&#x27;</span>, <span class="string">&#x27;not IE 11&#x27;</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;) </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>1.export default <code>defineConfig</code>({})，加上defineConfig会有一些帮助提示</p><p>2.targets: [‘defaults’, ‘not IE 11’]，表示要兼容的 [默认,IE 11]，数组里面可以放要兼容的浏览器</p><p>3.<code>值得注意的是，很多react，其他什么的插件都是在这里plugins配置的</code>，兼容的配置实际上也不用怎么配置</p></blockquote><p>4.打包文件yarn build</p><blockquote><p>这里注意，打包前需要安装压缩代码的插件<code>terser</code>，才能打包</p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="配置文件中"><a href="#配置文件中" class="headerlink" title="配置文件中"></a>配置文件中</h4><p><strong>vite中</strong></p><blockquote><p>配置文件的时候要用<code>ES6的语法(ESM模块化规范)</code>暴露配置文件export default{}</p><p>2.louder那些css的处理文件不用配置，</p></blockquote><p><strong>webpack用的是</strong></p><blockquote><p>const … = require(路径)</p><p>module.export{}</p><p>2.webpack的要配置才能引用</p></blockquote><p><strong>打包结果</strong></p><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230530154644850.png" alt="image-20230530154644850"></p><blockquote><p>会多出来一个legacy的index.js文件，就是作为兼容浏览器的打包文件，兼容程度要看你的配置。(图中箭头函数变成了普通的函数)</p></blockquote><p><img src="/2023/12/08/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/image-20230530155233651.png" alt="image-20230530155233651"></p><blockquote><p>当浏览器能够兼容’module’<code>(能使用模块化)</code>，也就是能够使用ESM语法的时候，就是用正常的js，否则就使用旧的legacy.js</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/2023/12/08/Vue3/"/>
      <url>/2023/12/08/Vue3/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3基础"><a href="#Vue3基础" class="headerlink" title="Vue3基础"></a>Vue3基础</h1><img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px"><h2 id="Vue3简介"><a href="#Vue3简介" class="headerlink" title="Vue3简介"></a>Vue3简介</h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a> </li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="Vue3带来了什么"><a href="#Vue3带来了什么" class="headerlink" title="Vue3带来了什么"></a>Vue3带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>……</p></li></ul><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.<code>源码的升级</code></h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p><p>……</p></li></ul><h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱TypeScript</h3><ul><li>Vue3可以更好的支持TypeScript</li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.<code>新的特性</code></h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment </li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><h3 id="面试常问"><a href="#面试常问" class="headerlink" title="面试常问"></a>面试常问</h3><p><img src="/2023/12/08/Vue3/image-20230703220351767.png" alt="image-20230703220351767"></p><hr><h1 id="Vite使用v3"><a href="#Vite使用v3" class="headerlink" title="Vite使用v3"></a>Vite使用v3</h1><blockquote><p>安装vite</p><p>运行yarn dev</p></blockquote><h2 id="使用-vite"><a href="#使用-vite" class="headerlink" title="使用 vite"></a>使用 vite</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li><p>什么是vite？—— 新一代前端构建工具。</p></li><li><p>优势如下：</p><ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li></ul><h2 id="传统构建-与-vite构建对比图"><a href="#传统构建-与-vite构建对比图" class="headerlink" title="传统构建 与 vite构建对比图"></a>传统构建 与 vite构建对比图</h2><p><img src="/2023/12/08/Vue3/image-20230704160641168.png" alt="image-20230704160641168"></p><p><img src="/2023/12/08/Vue3/image-20230704160651994.png" alt="image-20230704160651994"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><hr><h1 id="Vue-cli使用v3"><a href="#Vue-cli使用v3" class="headerlink" title="Vue-cli使用v3"></a>Vue-cli使用v3</h1><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><h3 id="检查vue-cli版本"><a href="#检查vue-cli版本" class="headerlink" title="检查vue-cli版本"></a>检查vue-cli版本</h3><blockquote><p>vue -V 或 vue -Version</p><p>脚手架版本不能低到不支持vue3(4版本以上)</p></blockquote><h3 id="安装Vue3"><a href="#安装Vue3" class="headerlink" title="安装Vue3"></a>安装Vue3</h3><blockquote><p>vue create 名字； 如：vue create vue3_test</p><p>然后选择Vue3</p></blockquote><p><strong>随后运行官方的预设项目</strong>(记得终端进入项目目录)</p><blockquote><p>yarn serve</p></blockquote><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/2023/12/08/Vue3/image-20230703222023469.png" alt="image-20230703222023469"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="对比V2"><a href="#对比V2" class="headerlink" title="对比V2"></a>对比V2</h2><p><strong>main文件</strong></p><p><img src="/2023/12/08/Vue3/image-20230703232032264.png" alt="image-20230703232032264"></p><blockquote><p>已经不兼容以前的写法(引入App)</p></blockquote><p><strong>组件文件</strong></p><p><img src="/2023/12/08/Vue3/image-20230703232516714.png" alt="image-20230703232516714"></p><blockquote><p>不需要在最外层加入div了</p></blockquote><hr><h1 id="常用-Composition-API"><a href="#常用-Composition-API" class="headerlink" title="常用 Composition API"></a>常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="拉开序幕的setup"><a href="#拉开序幕的setup" class="headerlink" title="拉开序幕的setup"></a>拉开序幕的setup</h2><p><img src="/2023/12/08/Vue3/image-20230704161555183.png" alt="image-20230704161555183"></p><ol><li><p>理解：Vue3.0中一个新的配置项，值为一个函数。</p></li><li><p>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</p></li><li><p>组件中所用到的：数据、方法等等，均要配置在setup中。</p></li><li><p>setup函数的两种返回值(return)：</p><ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol><p><img src="/2023/12/08/Vue3/image-20230704162149473.png" alt="image-20230704162149473"></p></li><li><p>注意点：</p><ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, <code>setup优先</code>。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><blockquote><p>async会被promise包裹</p></blockquote><hr><h2 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h2><p><img src="/2023/12/08/Vue3/image-20230705150935733.png" alt="image-20230705150935733"></p><blockquote><p>ref函数生成一个引用实现的实例对象</p></blockquote><p><img src="/2023/12/08/Vue3/image-20230705151625643.png" alt="image-20230705151625643"></p><ul><li><p>作用: 定义一个响应式的数据</p></li><li><p>语法: <code>const xxx = ref(initValue)</code> </p><ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li><p>备注：</p><ul><li><p>接收的数据可以是：基本类型、也可以是对象类型。</p></li><li><p>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</p></li><li><p>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</p><p><img src="/2023/12/08/Vue3/image-20230705153117815.png" alt="image-20230705153117815"></p><blockquote><p>用的是Proxy(封装在reactive函数当中)</p></blockquote></li></ul></li></ul><p><img src="/2023/12/08/Vue3/image-20230705151318067.png" alt="image-20230705151318067"></p><blockquote><p>响应式的实现同v2。(get set)</p><p>之前是放在对象属性那一栏(原型上一层)</p></blockquote><hr><h2 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（<code>基本类型不要用它</code>，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><p><img src="/2023/12/08/Vue3/image-20230705164724532.png" alt="image-20230705164724532"></p><p><img src="/2023/12/08/Vue3/image-20230705165335183.png" alt="image-20230705165335183"></p><blockquote><p>将数据变成一个对象交给reactive，实现响应式</p><p>ref需要.value</p></blockquote><p><strong>功能</strong></p><p><img src="/2023/12/08/Vue3/image-20230705165519026.png" alt="image-20230705165519026"></p><hr><h2 id="Vue3-0中的响应式原理"><a href="#Vue3-0中的响应式原理" class="headerlink" title="Vue3.0中的响应式原理"></a>Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><p><strong>解决方法</strong></p><p><img src="/2023/12/08/Vue3/image-20230705170155166.png" alt="image-20230705170155166"></p><p>还有数组vue自己封装的方法</p><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li><p>实现原理: </p><ul><li><p><code>通过Proxy（代理</code>）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过Reflect（反射）:  对源对象的属性进行操作。</p></li><li><p>MDN文档中描述的Proxy与Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line"><span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p><img src="/2023/12/08/Vue3/image-20230705171508028.png" alt="image-20230705171508028"></p><p><img src="/2023/12/08/Vue3/image-20230705172030739.png" alt="image-20230705172030739"></p><blockquote><p>最后的增删改查都用了reflect(成功与否返回布尔值)</p></blockquote><hr><h2 id="reactive对比ref"><a href="#reactive对比ref" class="headerlink" title="reactive对比ref"></a>reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li> ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li> reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li> 备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li> ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li> reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li> ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li> reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><p><strong>注意</strong></p><p>因为一般添加或者删除数组里面的数据都是用reactive(在ref里面后续也是要经过reactive，<code>本质上里面有proxy，然后通过get和set捕获（劫持）数据的修改</code>)，所以不会出现V2的添加更改的东西没有响应到页面上。</p><hr><h2 id="setup的两个注意点"><a href="#setup的两个注意点" class="headerlink" title="setup的两个注意点"></a>setup的两个注意点</h2><ul><li><p>setup执行的时机</p><ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li><p>setup的参数</p><ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。(用v-slots,简写为<code>#</code>)</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。<img src="/2023/12/08/Vue3/image-20230705205826125.png" alt="image-20230705205826125"></li></ul></li></ul></li></ul><h3 id="对比V2-1"><a href="#对比V2-1" class="headerlink" title="对比V2"></a>对比V2</h3><blockquote><p>父级组件传数据通过标签传递，用props接收</p></blockquote><p>当不写明接收props时，可以在attrs属性找到</p><p><img src="/2023/12/08/Vue3/image-20230705204436963.png" alt="image-20230705204436963"></p><blockquote><p>不用props接收的数据，没有类型的限制</p><p>props接收之后，attrs就没了数据；会有很多的加工，例如：响应式数据</p></blockquote><hr><h2 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">//计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>计算属性的输出巧妙</strong></p><p><img src="/2023/12/08/Vue3/image-20230705222847141.png" alt="image-20230705222847141"></p><blockquote><p>这里是简写（只读），只用了getter</p></blockquote><p><strong>完整写法（对象）</strong></p><p><img src="/2023/12/08/Vue3/image-20230705223153130.png" alt="image-20230705223153130"></p><blockquote><p>和V2是一样的</p></blockquote><h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h3><p><strong>V2的监视属性</strong></p><blockquote><p>和计算属性一样，简写也是函数，完整也是对象 </p></blockquote><p><img src="/2023/12/08/Vue3/image-20230705223741133.png" alt="image-20230705223741133"></p><p><strong>V3的监视属性</strong></p><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”<code>(可能和proxy(对象代理)有关)</code>：</p><ul><li>监视reactive定义的响应式数据时：<code>oldValue无法正确获取</code>、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">()=&gt;</span>person.<span class="property">name</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>点value的问题</strong></p><p><img src="/2023/12/08/Vue3/image-20230706154126742.png" alt="image-20230706154126742"></p><blockquote><p>如果直接person.value那么，监视的就是reactive,因为里面封装了proxy自带深度监视。</p></blockquote><hr><h3 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><div style="border:1px solid black;width:380px;float:left;margin-right:20px;"><strong>vue2.x的生命周期</strong><img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2" style="zoom:33%;width:1200px"></div><div style="border:1px solid black;width:510px;height:985px;float:left"><strong>vue3.0的生命周期</strong><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="lifecycle_2" style="zoom:33%;width:2500px"></div><p>1</p><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><p><img src="/2023/12/08/Vue3/image-20230706160007043.png" alt="image-20230706160007043"></p><blockquote><p>组合式api会比挂载的优先级高(同一个钩子)</p></blockquote><hr><h2 id="自定义hook函数"><a href="#自定义hook函数" class="headerlink" title="自定义hook函数"></a>自定义hook函数</h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的<code>Composition API</code>进行了封装(在setup写的API)。</p><p><img src="/2023/12/08/Vue3/image-20230706161608487.png" alt="image-20230706161608487"></p></li><li><p><code>类似于vue2.x中的mixin</code>。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li></ul><blockquote><p>将函数封装起来，在外边写好暴露供组件使用</p></blockquote><p><strong>挂载与卸载函数</strong></p><p><img src="/2023/12/08/Vue3/image-20230706160548637.png" alt="image-20230706160548637"></p><blockquote><p>移除功能，函数得放在外边，不然变成局部作用域，第二个函数不能引用</p></blockquote><h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h2><ul><li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li></ul><ul><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><p><img src="/2023/12/08/Vue3/image-20230706162935682.png" alt="image-20230706162935682"></p><blockquote><p>初步效果：模板上边直接<code>&#123;&#123;name&#125;&#125;</code>就可以了省去了一些person.name</p></blockquote><hr><h1 id="其它-Composition-API"><a href="#其它-Composition-API" class="headerlink" title="其它 Composition API"></a>其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li> 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li> 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><blockquote><p>可以提升性能(一些数据只需要浅响应)</p></blockquote><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><blockquote><p>1.数据一点都不让你改(非响应式改了，没响应)</p><p>2.数据是别人的(别人的是响应式的)，设置成不能改(不能乱动)</p></blockquote><hr><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw(还原)：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li><code>markRaw</code>：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的<code>第三方类库</code>等。</li><li>当渲染具有不可变数据源的大列表时，<code>跳过响应式转换可以提高性能</code>。</li></ol></li></ul></li></ul><hr><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Demo&#x27;,</span><br><span class="line">setup()&#123;</span><br><span class="line">// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span><br><span class="line">//自定义一个myRef</span><br><span class="line">function myRef(value,delay)&#123;</span><br><span class="line">let timer</span><br><span class="line">//通过customRef去实现自定义</span><br><span class="line">return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">return&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">track() //告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">return value</span><br><span class="line">&#125;,</span><br><span class="line">set(newValue)&#123;</span><br><span class="line">clearTimeout(timer)</span><br><span class="line">timer = setTimeout(()=&gt;&#123;</span><br><span class="line">value = newValue</span><br><span class="line">trigger() //告诉Vue去更新界面</span><br><span class="line">&#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref</span><br><span class="line">return &#123;</span><br><span class="line">keyword</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>手动挡的ref</p></blockquote><hr><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><p><img src="/2023/12/08/Vue3/image-20230707161422109.png" alt="image-20230707161422109"></p><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><hr><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><hr><h1 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改(数据不集中) 。</p><div style="width:600px;height:370px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left"></div><div style="width:300px;height:370px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left"> </div><hr><h2 id="2-Composition-API-的优势-离不开hooks"><a href="#2-Composition-API-的优势-离不开hooks" class="headerlink" title="2.Composition API 的优势(离不开hooks)"></a>2.Composition API 的优势(离不开hooks)</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><div style="width:500px;height:340px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image" style="height:360px"></div><div style="width:430px;height:340px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image" style="height:360px"></div><hr><h1 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a>新的组件</h1><h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><p><img src="/2023/12/08/Vue3/image-20230707171321878.png" alt="image-20230707171321878"></p><h2 id="Teleport-弹窗"><a href="#Teleport-弹窗" class="headerlink" title="Teleport(弹窗)"></a><code>Teleport(弹窗)</code></h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line">&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>弹窗定位</strong></p><p><img src="/2023/12/08/Vue3/image-20230707172241618.png" alt="image-20230707172241618"></p><blockquote><p>将组建隐藏，通过条件弹出，遮盖其它成，独立完成自己的功能</p></blockquote><h2 id="Suspense-组件加载中"><a href="#Suspense-组件加载中" class="headerlink" title="Suspense(组件加载中)"></a>Suspense(组件加载中)</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span><span class="comment">//静态引入</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))<span class="comment">//异步引入</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">&lt;Suspense&gt;</span><br><span class="line">&lt;template v-slot:default&gt;</span><br><span class="line">&lt;Child/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template v-slot:fallback&gt;</span><br><span class="line">&lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Suspense&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>静态引入：需要等待全部组件加载，如果中间有组件卡住了就不加载</p><p>异步引入：可以逐步加载，当比较慢时，采用应急展示，提升观感(作好的小预览)如：加载中</p></blockquote><p><img src="/2023/12/08/Vue3/image-20230707173220117.png" alt="image-20230707173220117"></p><p><strong>Suspense下的组件可以使用promise</strong></p><p><img src="/2023/12/08/Vue3/image-20230707173753995.png" alt="image-20230707173753995"></p><blockquote><p>这里使他延迟展示</p></blockquote><hr><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue2</title>
      <link href="/2023/12/08/Vue2/"/>
      <url>/2023/12/08/Vue2/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue2-test"><a href="#Vue2-test" class="headerlink" title="Vue2_test"></a>Vue2_test</h1><h2 id="Vue-CLI脚手架"><a href="#Vue-CLI脚手架" class="headerlink" title="Vue-CLI脚手架"></a>Vue-CLI脚手架</h2><h3 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h3><p><strong>前提</strong></p><blockquote><p>1.先安装好<code>node环境</code>(最好配置依赖镜像淘宝)</p><p>2.最起码有一个<code>包管理工具</code>(全局)</p></blockquote><h4 id="yarn示例"><a href="#yarn示例" class="headerlink" title="yarn示例"></a>yarn示例</h4><p>1.全局安装 yarn global add @vue/cli</p><p>2.查看vue命令，并生成项目 vue create 项目名</p><p>3.运行官方小项目 yarn serve</p><p><strong>注意</strong></p><blockquote><p>yarn config list 可以查看是否配置淘宝</p><p>yarn global bin 查看yarn文件目录，用于手动配置全局</p></blockquote><p><strong>结果</strong></p><p><img src="/2023/12/08/Vue2/image-20230613225235789.png" alt="image-20230613225235789"></p><h4 id="文件目录介绍"><a href="#文件目录介绍" class="headerlink" title="文件目录介绍"></a>文件目录介绍</h4><p><img src="/2023/12/08/Vue2/image-20230613225448195.png" alt="image-20230613225448195"></p><p>1.git忽略(不想被管理)</p><p>2.兼容性工具的一些配置</p><p>3.js配置？</p><p>4.当天依赖的一些版本和运行命令，</p><p>5.一些说明</p><p>6.vue配置？</p><p>7.版本锁定</p><hr><h3 id="浏览文件"><a href="#浏览文件" class="headerlink" title="浏览文件"></a>浏览文件</h3><h4 id="main-js-项目入口"><a href="#main-js-项目入口" class="headerlink" title="main.js(项目入口)"></a>main.js(项目入口)</h4><p><img src="/2023/12/08/Vue2/image-20230613235620613.png" alt="image-20230613235620613"></p><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><p><img src="/2023/12/08/Vue2/image-20230614002645163.png" alt="image-20230614002645163"></p><h3 id="生成自己的项目"><a href="#生成自己的项目" class="headerlink" title="生成自己的项目"></a>生成自己的项目</h3><blockquote><p>替换掉vue文件就好，注意路径和命名规范</p></blockquote><h4 id="语法错误提示-eslint"><a href="#语法错误提示-eslint" class="headerlink" title="语法错误提示(eslint)"></a>语法错误提示(eslint)</h4><p><img src="/2023/12/08/Vue2/image-20230614152540536.png" alt="image-20230614152540536"></p><blockquote><p>每次运行都会将不规范的语法报错</p></blockquote><p>也可以自定义配置</p><p><img src="/2023/12/08/Vue2/image-20230614152707330.png" alt="image-20230614152707330"></p><p>直接关掉</p><p><img src="/2023/12/08/Vue2/image-20230614155412932.png" alt="image-20230614155412932"></p><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><h3 id="为什么要用render"><a href="#为什么要用render" class="headerlink" title="为什么要用render?"></a>为什么要用render?</h3><p><img src="/2023/12/08/Vue2/image-20230614160211804.png" alt="image-20230614160211804"></p><blockquote><p>残缺了模板解析器</p></blockquote><h4 id="模板不能解析"><a href="#模板不能解析" class="headerlink" title="模板不能解析"></a>模板不能解析</h4><p>1.通过路径改成完整版的vue(默认(残缺)在vue配置文件里面)</p><p>2.使用render绑定容器</p><h3 id="理解简写过程"><a href="#理解简写过程" class="headerlink" title="理解简写过程"></a>理解简写过程</h3><p><img src="/2023/12/08/Vue2/image-20230614161112019.png" alt="image-20230614161112019"></p><blockquote><p>createElement通过打印，发现是一个函数</p><p>也就是说，render(函数){return 函数结果}</p><p>函数作为参数传入，返回函数结果(处理模板)</p></blockquote><p>1.没有this(方便使用箭头函数)</p><p>2.参数可以使用单个字母代替</p><p>3.只有一行return，可以缩成一行</p><h4 id="为什么需要精简的vue"><a href="#为什么需要精简的vue" class="headerlink" title="为什么需要精简的vue"></a>为什么需要精简的vue</h4><p><img src="/2023/12/08/Vue2/image-20230614162100423.png" alt="image-20230614162100423"></p><blockquote><p><code>避免</code>打包文件时打包解析器(解析器占太多了)</p><p>使用render可以帮忙指定内容</p></blockquote><p><strong>事例</strong></p><p><img src="/2023/12/08/Vue2/image-20230614162424772.png" alt="image-20230614162424772"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>关于不同版本的Vue：</strong></p><p><strong>1.vue.js与vue.runtime.xxx.js的区别：</strong></p><p>  (1).vue.js是完整版的Vue，包含：核心功能+模板解析器。</p><p>  (2).vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</p><p><strong>2.因为vue.runtime.xxx.js没有模板解析器</strong></p><p>所以不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容。</p><p><strong>注意</strong>:模块化有(node)common.js和esm.js两种规范</p><h1 id="基本的方法"><a href="#基本的方法" class="headerlink" title="基本的方法"></a>基本的方法</h1><h2 id="ref属性-获取子级组件的实例对象"><a href="#ref属性-获取子级组件的实例对象" class="headerlink" title="ref属性(获取子级组件的实例对象)"></a>ref属性(获取子级组件的实例对象)</h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><blockquote><p>给html标签，起到id的作用</p><p><code>给Vue组件标签，获取的是整个实例对象</code>(id获取的只是结构)</p></blockquote><p><strong>图示</strong></p><p><img src="/2023/12/08/Vue2/image-20230614232652420.png" alt="image-20230614232652420"></p><blockquote><p><code>父组件通过ref给子组件标签</code>，应该能操作很多东西(获取子组件实例对象)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;你好呀&lt;/h1&gt;</span><br><span class="line">    &lt;School/&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;school ref=&quot;sch&quot; &gt;&lt;/school&gt;</span><br><span class="line">    &lt;button @click=&quot;show&quot;&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import School from &quot;./components/School.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components:&#123;School&#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          show()&#123;</span><br><span class="line">            console.log(this.$refs.sch);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><ol><li><p>功能：让组件接收外部传过来的数据(<code>一般是父的template操作子的</code>)</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line"><span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><blockquote><p>第三种就是<code>数据库中的设置字段</code></p></blockquote><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote><p><img src="/2023/12/08/Vue2/image-20230615164812670.png" alt="image-20230615164812670"></p><blockquote><p>当需要修改数据，新增一个data中的属性，来间接修改</p></blockquote><hr><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p>第一步定义混合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data()&#123;....&#125;,</span><br><span class="line">    methods:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步使用混入：</p><p>​    全局(main)混入：<code>Vue.mixin(xxx)</code>(所有组件和一个vm都有)<br>​    局部混入：<code>mixins:[&#39;xxx&#39;]    </code></p><p><img src="/2023/12/08/Vue2/image-20230615173440267.png" alt="image-20230615173440267"></p></li></ol><blockquote><p>1.生命周期，不管外部内部，都执行(混合优先)</p><p>2.(数据相同)data中的数据优先</p></blockquote><hr><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><p><img src="/2023/12/08/Vue2/image-20230615181728003.png" alt="image-20230615181728003"></p><blockquote><p>和node使用模块的方法一样，还可以携带参数</p></blockquote><p><img src="/2023/12/08/Vue2/image-20230616212606871.png" alt="image-20230616212606871"></p><hr><h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ol><li><code>作用：让样式在局部生效，防止冲突</code>。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><blockquote><p>同类名样式，看引入顺序 </p></blockquote><p><img src="/2023/12/08/Vue2/image-20230616213108064.png" alt="image-20230616213108064"></p><hr><h1 id="TodoList案例"><a href="#TodoList案例" class="headerlink" title="TodoList案例"></a>TodoList案例</h1><h2 id="使用props"><a href="#使用props" class="headerlink" title="使用props"></a>使用props</h2><blockquote><p>利用传的是个<code>函数</code>来操作父级，<code>实现子级向父级传输数据</code></p></blockquote><p><img src="/2023/12/08/Vue2/image-20230617204354842.png" alt="image-20230617204354842"></p><p><img src="/2023/12/08/Vue2/image-20230617205348877.png" alt="image-20230617205348877"></p><blockquote><p>Vue不能监测<code>对象</code>里面的属性的值的变化，只能监测属性的变化，所以通过props改值没有报错，但是不好</p></blockquote><p><img src="/2023/12/08/Vue2/image-20230617210343933.png" alt="image-20230617210343933"></p><p>isAll是自己用计算属性得出的。不是props通过外部获取的，可以更改</p><p><img src="/2023/12/08/Vue2/image-20230617214406852.png" alt="image-20230617214406852"></p><hr><h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><ol><li><p>组件化编码流程：</p><p>​    (1).<code>拆分静态组件</code>：组件要<code>按照功能点拆分</code>，命名不要与html元素冲突。</p><p>​    (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p>​            1).一个组件在用：放在组件自身即可。</p><p>​            2). <code>一些组件在用：放在他们共同的父组件上</code>（<span style="color:red">状态提升</span>）。</p><p>​    (3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p>​    (1).父组件 ==&gt; 子组件 通信</p><p>​    (2).子组件 ==&gt; 父组件 通信<code>（要求父先给子一个函数）</code></p></li><li><p><code>使用v-model时要切记</code>：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是<code>对象类型的值</code>，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><p><strong>props通信</strong></p><p><img src="/2023/12/08/Vue2/image-20230617215330604.png" alt="image-20230617215330604"></p><h3 id="练习总结"><a href="#练习总结" class="headerlink" title="练习总结"></a>练习总结</h3><h4 id="APP文件"><a href="#APP文件" class="headerlink" title="APP文件"></a>APP文件</h4><p><img src="/2023/12/08/Vue2/image-20230619205919896.png" alt="image-20230619205919896"></p><h4 id="组件文件"><a href="#组件文件" class="headerlink" title="组件文件"></a>组件文件</h4><p><img src="/2023/12/08/Vue2/image-20230619205932880.png" alt="image-20230619205932880"></p><blockquote><p>对数据进行操作的都要在APP上通过props函数的形式传给子组件使用。<code>(不建议通过props来直接改变数据)</code></p><p>1.浅层改变data中的属性会直接报错</p><p>2.深层次改变data中的属性的值，不会被检查出来</p></blockquote><p>​       这是由于Vue遵循的<code>[单向数据流]</code>的概念。单向数据流意味着数据只能从父组件流向子组件，不能反过来。这样做的好处是，我们可以清楚地跟踪数据的来源和如何被使用，使得应用程序更加易于维护和理解。如果子组件可以修改props中的数据，那么将会打破单向数据流的规则，<code>导致数据变得难以追踪和维护</code>。</p><hr><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.<code>sessionStorage </code>和 Window.<code>localStorage </code>属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></p><pre><code>            该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</code></pre></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p>​        该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p>​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code></p><p>​        该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><blockquote><p>watch监视结合本地存储，可以实现数据的显示</p><p>1.初始化记得给定||[ ]，默认无数据为空数据，不然报错</p><p>2.数据一般要转型JSON.stringify</p><p>3.监视属性要采用深度监视，不然不知道变化</p></blockquote><hr><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<code>子组件 ===&gt; 父组件</code></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<code>事件的回调在A中</code>)。</p><p>简单理解：父给子绑事件，回调在父中</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code>        </p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><h4 id="绑定自定义事件"><a href="#绑定自定义事件" class="headerlink" title="绑定自定义事件"></a>绑定自定义事件</h4><p><img src="/2023/12/08/Vue2/image-20230619215850167.png" alt="image-20230619215850167"></p><blockquote><p>在APP,</p><p>methods(){回调函数}</p><p>mounted{<code>this.$refs.父函数.$on(&#39;组件事件&#39;,this.父函数)</code>}</p><p>ref(更灵活，可以在mounted中加延时等操作，让事件延迟触发)</p></blockquote><p><img src="/2023/12/08/Vue2/image-20230619215651348.png" alt="image-20230619215651348"></p><blockquote><p>在子组件中，this.$emit(‘atguigu’,数据),自定义不用通过props接受</p><p>在APP中给标签@或v-on</p></blockquote><p><img src="/2023/12/08/Vue2/image-20230619225214721.png" alt="image-20230619225214721"></p><blockquote><p>在父级在子组件绑定原生事件，需要加native</p></blockquote><h4 id="解绑自定义事件"><a href="#解绑自定义事件" class="headerlink" title="解绑自定义事件"></a>解绑自定义事件</h4><p><img src="/2023/12/08/Vue2/image-20230619221110867.png" alt="image-20230619221110867"></p><blockquote><p>当你不想要这个事件了</p></blockquote><h4 id="销毁vc-生命周期中"><a href="#销毁vc-生命周期中" class="headerlink" title="销毁vc(生命周期中)"></a>销毁vc(生命周期中)</h4><p><img src="/2023/12/08/Vue2/image-20230619221727519.png" alt="image-20230619221727519"></p><blockquote><p>会导致vc的所有自定义事件没了(vc都没了)，但是原生的方法还有例如点击事件，然后log输出。这些页面基本的</p></blockquote><blockquote><p>当你要删组件(换路由)</p></blockquote><h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><p><img src="/2023/12/08/Vue2/image-20230619223801043.png" alt="image-20230619223801043"></p><p>1.data(一般使用函数形式)</p><p>2.props外边传进来的</p><p>3.计算属性必须有原数据存在</p><p><img src="/2023/12/08/Vue2/image-20230619224316424.png" alt="image-20230619224316424"></p><blockquote><p>method承诺，里面的this指的就是当前的组件</p><p>如果没写在method就变成了触发事件的那个组件了<code>(变成箭头函数就行了)</code></p></blockquote><h2 id="根据自定义事件修改Todo案例"><a href="#根据自定义事件修改Todo案例" class="headerlink" title="根据自定义事件修改Todo案例"></a>根据自定义事件修改Todo案例</h2><p><strong>1.需要调用回调函数的，才需要自定义事件</strong></p><p><img src="/2023/12/08/Vue2/image-20230620161400481.png" alt="image-20230620161400481"></p><hr><h1 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h1><p><strong>作用图示</strong></p><p><img src="/2023/12/08/Vue2/image-20230620171825681.png" alt="image-20230620171825681"></p><h2 id="添加全局总线-main"><a href="#添加全局总线-main" class="headerlink" title="添加全局总线(main)"></a>添加全局总线(main)</h2><p><img src="/2023/12/08/Vue2/image-20230620174318564.png" alt="image-20230620174318564"></p><h3 id="需要解绑事件-组件"><a href="#需要解绑事件-组件" class="headerlink" title="需要解绑事件(组件)"></a>需要解绑事件(组件)</h3><p><img src="/2023/12/08/Vue2/image-20230620175936973.png" alt="image-20230620175936973"></p><blockquote><p>当你的组件已经不需要该事件，最好解绑，不然容易导致别人的组件命名重复</p></blockquote><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p><code>使用事件总线(一般是挂载完成后)：</code></p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;触发函数&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><hr><h2 id="Todolist全局总线"><a href="#Todolist全局总线" class="headerlink" title="Todolist全局总线"></a>Todolist全局总线</h2><h3 id="应用思路"><a href="#应用思路" class="headerlink" title="应用思路"></a>应用思路</h3><h4 id="父与子-不优先"><a href="#父与子-不优先" class="headerlink" title="父与子(不优先)"></a>父与子(不优先)</h4><p><img src="/2023/12/08/Vue2/image-20230620181013795.png" alt="image-20230620181013795"></p><blockquote><p>自定义或者props更简单，</p><p>父→子：直接传</p><p>子→父：配置回调函数就好了</p></blockquote><h4 id="兄弟-优先"><a href="#兄弟-优先" class="headerlink" title="兄弟(优先)"></a>兄弟(优先)</h4><h3 id="查看事件"><a href="#查看事件" class="headerlink" title="查看事件"></a>查看事件</h3><p><img src="/2023/12/08/Vue2/image-20230620181947622.png" alt="image-20230620181947622"></p><hr><h1 id="消息订阅与发布（pubsub-js）"><a href="#消息订阅与发布（pubsub-js）" class="headerlink" title="消息订阅与发布（pubsub-js）"></a>消息订阅与发布（pubsub-js）</h1><blockquote><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li></ol></blockquote><p><strong>图示</strong></p><p><img src="/2023/12/08/Vue2/image-20230620182414082.png" alt="image-20230620182414082"></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="订阅到发布"><a href="#订阅到发布" class="headerlink" title="订阅到发布"></a>订阅到发布</h3><p><img src="/2023/12/08/Vue2/image-20230620183552824.png" alt="image-20230620183552824"></p><h3 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h3><p><img src="/2023/12/08/Vue2/image-20230620183748583.png" alt="image-20230620183748583"></p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><hr><h2 id="Todolist消息订阅"><a href="#Todolist消息订阅" class="headerlink" title="Todolist消息订阅"></a>Todolist消息订阅</h2><h3 id="下划线占位"><a href="#下划线占位" class="headerlink" title="下划线占位"></a>下划线占位</h3><p><img src="/2023/12/08/Vue2/image-20230620184354941.png" alt="image-20230620184354941"></p><h1 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h1><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><blockquote><p>解析完后回去执行，生命周期钩子(updata)也可以，但是代码就会没那么清晰</p></blockquote><p><img src="/2023/12/08/Vue2/image-20230620223926023.png" alt="image-20230620223926023"></p><hr><h1 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h1><p><strong>图示</strong></p><p><img src="/2023/12/08/Vue2/image-20230621174631585.png" alt="image-20230621174631585"></p><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>注意：appear的使用</p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有<code>多个元素</code>需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><p><strong>通过transition带入</strong></p><p><img src="/2023/12/08/Vue2/image-20230621173405684.png" alt="image-20230621173405684"></p><p><strong>互斥显示</strong></p><p><img src="/2023/12/08/Vue2/image-20230621174000606.png" alt="image-20230621174000606"></p><blockquote><p>当两个元素要求同样效果遗一起显示的时候就可以包在同一个div里面，否则就要用<code>transition-group+key</code>的方法</p></blockquote><p>动画写法与过渡写法</p><blockquote><p>动画(有自己的from to)写法少了起点与终点<code>特指</code>配置的是，enter和leave</p></blockquote><hr><h1 id="服务器跨域的问题"><a href="#服务器跨域的问题" class="headerlink" title="服务器跨域的问题"></a>服务器跨域的问题</h1><blockquote><p>详情看ajax文档</p></blockquote><p><img src="/2023/12/08/Vue2/image-20230622214427506.png" alt="image-20230622214427506"></p><p>3.代理服务器</p><p><img src="/2023/12/08/Vue2/image-20230622215056595.png" alt="image-20230622215056595"></p><blockquote><p>ngnix</p><p>vue-cli</p></blockquote><p>vue-cli缺点</p><p>1.先检查public有没有该文件才走代理服务器</p><p><img src="/2023/12/08/Vue2/image-20230623161013014.png" alt="image-20230623161013014"></p><blockquote><p>如果这里有，就不会去代理服务器发送请求</p></blockquote><p>2.不能配置多个代理</p><p><strong>vue-cli配置代理</strong></p><p><img src="/2023/12/08/Vue2/image-20230623160908845.png" alt="image-20230623160908845"></p><hr><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>​    在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​    编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true(撒谎)时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><hr><h1 id="接口获取github用户"><a href="#接口获取github用户" class="headerlink" title="接口获取github用户"></a>接口获取github用户</h1><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="/2023/12/08/Vue2/image-20230625153414441.png" alt="image-20230625153414441"></p><h3 id="理清思路"><a href="#理清思路" class="headerlink" title="理清思路"></a>理清思路</h3><p>1.组件数量</p><p>​    需要两个组件：搜索+展示</p><p>2.完善组件关系以及功能</p><p>​    关系：兄弟<code>(全局事件总线或者消息订阅)</code>； </p><p>​    搜索：获取内容+发送请求+获取响应信息且保存</p><p>​    展示：将信息根据需求展示出来</p><h2 id="忘了的知识"><a href="#忘了的知识" class="headerlink" title="忘了的知识"></a>忘了的知识</h2><h3 id="展开运算符-展开对象合并"><a href="#展开运算符-展开对象合并" class="headerlink" title="展开运算符...展开对象合并"></a>展开运算符<code>...</code>展开对象合并</h3><p><img src="/2023/12/08/Vue2/image-20230625154530177.png" alt="image-20230625154530177"></p><blockquote><p>对象必须要在{}中展开</p></blockquote><p><strong>新对象拥有全部属性，<code>相同属性，后者覆盖前者</code></strong><br>1）空对象的展开<br>如果展开一个空对象，则没有任何效果</p><h3 id="通过总线传递携带的信息"><a href="#通过总线传递携带的信息" class="headerlink" title="通过总线传递携带的信息"></a>通过总线传递携带的信息</h3><p><img src="/2023/12/08/Vue2/image-20230625154744180.png" alt="image-20230625154744180"></p><p><strong>注意：</strong></p><blockquote><p>自己准备样式和结构</p><p>引入bootstrap样式可能有些字体没有直接在public目录下新建样式文件，在html中直接引入</p></blockquote><hr><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：挖槽然后在前面补槽</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><hr><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p><img src="/2023/12/08/Vue2/vuex.png" alt="vuex"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​        在Vue中实现集中式<code>状态（数据）</code>管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><blockquote><p>一对多；分布式（多对多/一）</p></blockquote><h3 id="何时使用？"><a href="#何时使用？" class="headerlink" title="何时使用？"></a>何时使用？</h3><p>​        多个组件需要共享数据时</p><p><strong>全局事件总线</strong></p><p><img src="/2023/12/08/Vue2/image-20230625164858952.png" alt="image-20230625164858952"></p><blockquote><p>可见，全局事件总线在共享一个数据的时候，要设置很多的回调路径，才能让各个组件调用数据，还要单独设置新的回调才能更改数据。(不方便共享,有点像自己写Vuex插件？)</p></blockquote><p><strong>Vuex</strong></p><p><img src="/2023/12/08/Vue2/image-20230625165236529.png" alt="image-20230625165236529"></p><blockquote><p>Vuex，实现数据双箭头，在组建外部设置一个数据库，通过模块的方式(store)引入Vue实例对象。然后用于数据的共享，并且Vuex插件里面封装了许多的方法。</p></blockquote><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="/2023/12/08/Vue2/image-20230625171404048.png" alt="image-20230625171404048"></p><p><strong>store管理三个对象</strong></p><p><img src="/2023/12/08/Vue2/image-20230625172552212.png" alt="image-20230625172552212"></p><h2 id="搭建vuex环境"><a href="#搭建vuex环境" class="headerlink" title="搭建vuex环境"></a>搭建vuex环境</h2><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><p>处理复杂的逻辑或者一些需要很多加工的东西，放在store(vuex)里面，不仅可以分层处理这些数据，还可以提高代码复用率，而不是写死在当前组件上。</p><h3 id="getters的使用"><a href="#getters的使用" class="headerlink" title="getters的使用"></a>getters的使用</h3><ol><li><p>概念：<code>当state中的数据需要经过加工后再使用时</code>，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><blockquote><p>主要用于解决，某个处理后的数据再加工，而且该加工还可以被其他组件复用</p></blockquote><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>当前页面使用计算属性可以省去很多经常使用的名字(缩写名字)</p><p><img src="/2023/12/08/Vue2/image-20230625190317623.png" alt="image-20230625190317623"></p><p>这样就不用写成$….之类的了，直接写成sum，并且要用到的地方都可以写成sum</p><hr><h3 id="四个map方法的使用-懒人"><a href="#四个map方法的使用-懒人" class="headerlink" title="四个map方法的使用(懒人)"></a>四个map方法的使用(懒人)</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：<code>在模板中绑定事件时传递好参数，否则参数是事件对象</code>。</p></blockquote><p><img src="/2023/12/08/Vue2/image-20230625224858909.png" alt="image-20230625224858909"></p><h2 id="多个组件共享"><a href="#多个组件共享" class="headerlink" title="多个组件共享"></a>多个组件共享</h2><p><img src="/2023/12/08/Vue2/image-20230625231639819.png" alt="image-20230625231639819"></p><blockquote><p>获取的是personObj，通过它来展现的是personList.length，也就是人数</p></blockquote><h2 id="概括使用"><a href="#概括使用" class="headerlink" title="概括使用"></a>概括使用</h2><p>1.都是对象或者数组的方式(注意展开符)</p><p>2.<code>数组写法要求函数与变量所有一致</code></p><p>3.注意是否需要传参</p><hr><h2 id="模块化-命名空间"><a href="#模块化-命名空间" class="headerlink" title="模块化+命名空间"></a>模块化+命名空间</h2><ol><li><p>目的：<code>让代码更好维护</code>，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><p><img src="/2023/12/08/Vue2/image-20230625233525680.png" alt="image-20230625233525680"></p><p>不知道利用数组reduce方法合成新数组行不行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h3 id="直接写法注意"><a href="#直接写法注意" class="headerlink" title="直接写法注意"></a>直接写法注意</h3><p>记得设置namespace:true；否则不能识别分类的名(命名空间)</p><p>如果是直接写(不用map方法)，直接加上分类名。</p><p>这个是直接调用mutation，需要(分类名/方法)</p><p><img src="/2023/12/08/Vue2/image-20230626000015568.png" alt="image-20230626000015568"></p><p><img src="/2023/12/08/Vue2/image-20230626000931333.png" alt="image-20230626000931333"></p><p><code>用[&#39; &#39;]代替一个.</code></p><p><img src="/2023/12/08/Vue2/image-20230626001325984.png" alt="image-20230626001325984"></p><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p>1.有什么用(解决/实现了什么)数据关系复杂</p><p>2.基本使用方法和map使用方法</p><p>3.各个部位的作用，连接数据库的特色；Devtools的作用</p><p>4.模块化和普通设置有什么区别(分成小模块)</p><p><img src="/2023/12/08/Vue2/image-20230625171404048.png" alt="image-20230625171404048"></p><hr><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p><strong>生活中的路由器</strong></p><p><img src="/2023/12/08/Vue2/image-20230628164827670.png" alt="image-20230628164827670"></p><p><strong>前端网页路由一般是不同组件</strong></p><p><img src="/2023/12/08/Vue2/image-20230628164755833.png" alt="image-20230628164755833"></p><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><p><strong>后端路由</strong></p><p>一般是在服务器设置的路由</p><p>用来处理用户的请求或者需求</p><p>一般是函数。</p><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p><img src="/2023/12/08/Vue2/image-20230628170052556.png" alt="image-20230628170052556"></p><blockquote><p>一组对应关系(映射)</p></blockquote><p><strong>分类</strong></p><p><img src="/2023/12/08/Vue2/image-20230628170104423.png" alt="image-20230628170104423"></p><p><img src="/2023/12/08/Vue2/image-20230628170113107.png" alt="image-20230628170113107"></p><blockquote><p>前端路由的使用又分为</p><p>声明式路由:router-link</p><p>编程式路由:this.$router.push(对象)</p></blockquote><hr><h2 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h2><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>最后在main里面引入路由并注册</p></blockquote><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router(都相同)，可以通过组件的<code>$router</code>属性获取到。</li></ol><p><strong>router-link 和router-view</strong></p><p><strong>路由组件的切换</strong></p><p><img src="/2023/12/08/Vue2/image-20230628190933052.png" alt="image-20230628190933052"></p><p>切换是不断挂载和销毁，在Vue身上。</p><p><strong>路由组件生成<code>当前</code>的路由规则</strong></p><p><img src="/2023/12/08/Vue2/image-20230629001052274.png" alt="image-20230629001052274"></p><p>还生成路由器的方法(同)</p><blockquote><p>前端的路由走前端的逻辑，并没有发送网络请求。(不经服务器)</p></blockquote><hr><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注意：</strong></p><p>children的router标签要放在它的父级组件(目前是一个组件有一个对应的router-view)</p><hr><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>复杂的时候，用对象的形式，根据query展示不同的detail(三级路由)的内容</p></blockquote><hr><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;hello&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><blockquote><p>路径较长时(很多级路由)，可以通过命名，然后通过该路由的名字直接指定路径</p></blockquote><hr><h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><p><img src="/2023/12/08/Vue2/image-20230629181852703.png" alt="image-20230629181852703"></p><p><strong>占位符</strong></p><p><img src="/2023/12/08/Vue2/image-20230629182554842.png" alt="image-20230629182554842"></p><blockquote><p>用于接收过来的id,title之类的预设定；与之前的插槽slot占位符作用差不多吧</p></blockquote><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;xiangqing&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><p>​    <strong>作用</strong>：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接收</strong></p><p><img src="/2023/12/08/Vue2/image-20230630153259591.png" alt="image-20230630153259591"></p><p><img src="/2023/12/08/Vue2/image-20230630153427453.png" alt="image-20230630153427453"></p><blockquote><p>解构赋值的写法</p></blockquote><p><strong>query与params</strong></p><blockquote><p>params不用加问好，但是要设置占位符</p><p>query不能用props写法</p></blockquote><hr><h2 id="进阶使用属性或者方法"><a href="#进阶使用属性或者方法" class="headerlink" title="进阶使用属性或者方法"></a>进阶使用属性或者方法</h2><h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><p><img src="/2023/12/08/Vue2/image-20230630153806216.png" alt="image-20230630153806216"></p><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li><code>浏览器的历史记录</code>有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><hr><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式<code>路由导航</code></h3><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>在哪展示在哪包keep-alive</p></blockquote><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：<code>路由组件所独有</code>的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li><li>一般可以用于这两个函数的触发条件，设置激活或者失活时需要进行的操作</li></ol></li></ol><blockquote><p>解决keep-live的不销毁时留下的定时器问题。</p></blockquote><hr><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:(前、后)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>独享守卫:(只有前置，作用于某一个路由)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>写组件路由独有的一些东西，可以放在这里面</p></blockquote><blockquote><p>一般是根据位置分类，</p><p>设置了守卫需要放行</p><p>next(),next(path),next(false)</p><p>常见的三种放行方式</p></blockquote><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><h4 id="hash值"><a href="#hash值" class="headerlink" title="hash值"></a>hash值</h4><ol><li><p>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。<img src="/2023/12/08/Vue2/image-20230701223033791.png" alt="image-20230701223033791"></p></li><li><p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器(<code>不会随着请求路径带给服务器</code>)。</p><p><img src="/2023/12/08/Vue2/image-20230703154809802.png" alt="image-20230703154809802"></p></li><li><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li></ol><blockquote><p>用于前端自己使用，</p><p>例如路由中的params,query用于传递参数</p></blockquote><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><ol><li>history模式：<ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol><p><img src="/2023/12/08/Vue2/image-20230703172223421.png" alt="image-20230703172223421"></p><p>区分哪些是路由地址，哪些是参数</p><p><img src="/2023/12/08/Vue2/image-20230703172400443.png" alt="image-20230703172400443"></p><p>前端路由通过点击页面，来改变显示的组件信息，从而地址栏会发生变化。</p><p>网页刷新时，一般会对服务器发送请求，因为地址栏上的路径改变，那么就需要服务器识别区分哪些是前端路由添加的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础</title>
      <link href="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/12/08/Vue%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230530164037938.png" alt="image-20230530164037938"></p><h2 id="Vue-是什么"><a href="#Vue-是什么" class="headerlink" title="Vue 是什么?"></a>Vue 是什么?</h2><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230530164344670.png" alt="image-20230530164344670"></p><h3 id="渐进式"><a href="#渐进式" class="headerlink" title="渐进式"></a>渐进式</h3><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230530164516698.png" alt="image-20230530164516698"></p><blockquote><p>渐进式：根据应用，有简单又复杂的使用方式</p></blockquote><h2 id="开发者"><a href="#开发者" class="headerlink" title="开发者"></a>开发者</h2><p><strong>尤雨溪</strong></p><h3 id="Vue的心路历程"><a href="#Vue的心路历程" class="headerlink" title="Vue的心路历程"></a>Vue的心路历程</h3><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230530164754983.png" alt="image-20230530164754983"></p><blockquote><p>总结:后起之秀，生态完善，已然成为国内前端工程师首选框架</p></blockquote><p>前面有react和Angular</p><h2 id="Vue-的特点"><a href="#Vue-的特点" class="headerlink" title="Vue 的特点"></a>Vue 的特点</h2><h3 id="特点1"><a href="#特点1" class="headerlink" title="特点1"></a>特点1</h3><blockquote><p>采用<code>组件化</code>模式，提高代码复用率，且让代码更好维护</p></blockquote><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230530165523244.png" alt="image-20230530165523244"></p><p><strong>组件化与复用率：</strong></p><p>一个.vue文件(里面包含了样式，骨架等等)，可以被其他项目使用，例如：我喜欢第一个风格的，那么activity.vue可以被引用于其他项目里面，实现组件化和复用率的提高。</p><blockquote><p><code>简单说就是像模块，被到处引用</code></p></blockquote><p><strong>好维护：</strong></p><p>只需要改对应vue文件里面的子文件就好了(.html .js .css)，不同vue之间不会相互影响</p><h3 id="特点2"><a href="#特点2" class="headerlink" title="特点2"></a>特点2</h3><blockquote><p><code>声明式编码</code>，让编码人员<code>无需直接操作DOM</code>,提高开发效率</p></blockquote><p><strong>示例</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230530171026970.png" alt="image-20230530171026970"></p><p><strong>原生老方法</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230530171214227.png" alt="image-20230530171214227"></p><p><strong>vue方法</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230530171337723.png" alt="image-20230530171337723"></p><blockquote><p>v-for = “p in persons”遍历</p><p>然后在li中生成<code>离谱快开门</code>,得玩的溜</p></blockquote><h3 id="特点3"><a href="#特点3" class="headerlink" title="特点3"></a>特点3</h3><blockquote><p>使用<code>虚拟DOM</code>+优秀的<code>Diff算法</code>，尽量复用DOM节点</p></blockquote><p><strong>原生方法:</strong></p><blockquote><p>人为检查对比或者全部删除更新</p></blockquote><p><strong>Vue方法:</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230530191332058.png" alt="image-20230530191332058"></p><blockquote><p>中间多了个虚拟DOM，利用Diff算法进行比较处理</p></blockquote><hr><h1 id="官网使用指南"><a href="#官网使用指南" class="headerlink" title="官网使用指南"></a>官网使用指南</h1><p><strong>查看官网</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230530205041781.png" alt="image-20230530205041781"></p><ul><li>看教程</li><li>不会就看API</li><li>风格要靠拢官方(足够了解Vue之后)</li><li>示例(官方给的一些示例供你参考)</li><li>Cookbook(学习一些JS、Vue的小技巧)</li></ul><p><strong>重要工具</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230530205738495.png" alt="image-20230530205738495"></p><blockquote><p>Vue CLI类似于webpack CLI，帮助搭建webpack的<code>(脚手架)</code></p></blockquote><p><strong>资源列表</strong></p><blockquote><p>用于查看别人作好的一些模板来学习</p><p>awesome(技术生态)</p></blockquote><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230530210221752.png" alt="image-20230530210221752"></p><h2 id="官方教程"><a href="#官方教程" class="headerlink" title="官方教程"></a>官方教程</h2><p><strong>CDN形式</strong></p><blockquote><p>script标签引用下载的文件vue.js&amp;vue-mini.js</p><p>下载开发工具devtools</p><p>Vue.config查看配置修改属性</p></blockquote><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230531150549200.png" alt="image-20230531150549200"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>; <span class="comment">// 阻止默认提示的生产提示</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>到这里，环境就搭建好了</p></blockquote><hr><h2 id="Hello-Vue"><a href="#Hello-Vue" class="headerlink" title="Hello Vue"></a>Hello Vue</h2><h3 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h3><blockquote>与data,<p>,’const x = ‘可以省略</p></blockquote><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>; <span class="comment">// 阻止默认提示的生产提示</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//创建Vue实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,<span class="comment">//连接容器，建立关系(一般通过选择器，还可以通过doc笨方法)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;<span class="comment">//储存数据</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>:<span class="string">&#x27;Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果如图</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230531164633454.png" alt="image-20230531164633454"></p><p><strong>注意</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230531165159440.png" alt="image-20230531165159440"></p><blockquote><p><code>容器</code>只能是一一对应关系，且先到先得</p><p>两个大括号<code>&#123;&#123;&#125;&#125;`，里面要js表达式一个容器里面可以同时使用同一个属性![image-20230531182809406](image-20230531182809406.png)### 指令语法**代码**<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>点我进入笔记<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,<span class="comment">//连接容器，建立关系(一般通过选择器，还可以通过doc笨方法)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;<span class="comment">//储存数据</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>:<span class="string">&#x27;Vue!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">url</span>:<span class="string">&#x27;https://demo.jiajiahuat.com&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>> v-bind`(可以简写成':')`,将url变成了一个变量而不是字符串`(变成了js表达式)`**效果如图**![image-20230531175919108](image-20230531175919108.png)---## 总结**流程**![image-20230531164937890](image-20230531164937890.png)4.Vue 实例与容器是`一一对应的`5.真实开发中只有一个Vue实例，并且会`配合着组件`一起使用6.&#123;&#123;xxx&#125;&#125;中的 xxx 要</code>写 js 表达式`，且 xxx 可以自动读取到data中的所有属性<br>7.一旦data中的数据发生变化，那么模板中用到该数据的地方也会自动更新</p></blockquote><p><strong>js表达式与语句区别</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230531170155520.png" alt="image-20230531170155520"></p><p><strong>Vue模板语法两大类</strong></p><p>1.插值语法</p><ul><li>解析<code>标签</code>里面的内容</li><li>，且可以读取data中的`属性`</li></ul><p>2.指令语法</p><ul><li><p>解析标签的(包括：属性、内容、绑定事件…)</p></li><li><p>例如：v-bind<code>(可以简写成&#39;:&#39;)</code>,将url变成js表达式，能读取到data的所有属性</p></li><li><p>灵活使用模板语法<code>(其实就是用对象属性)</code></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插入&#123;&#123;name&#125;&#125;语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;school.url&quot;</span>&gt;</span>点我进入&#123;&#123;school.name&#125;&#125;笔记<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//创建Vue实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,<span class="comment">//连接容器，建立关系(一般通过选择器，还可以通过doc笨方法)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;<span class="comment">//储存数据</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>:<span class="string">&#x27;Vue!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">school</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;笔记&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&#x27;https://demo.jiajiahuat.com&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="Vue初使用-方法"><a href="#Vue初使用-方法" class="headerlink" title="Vue初使用(方法)"></a>Vue初使用(方法)</h1><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p><strong>Vue中有2种数据绑定的方式：</strong></p><p>​        1.单向绑定(v-bind)：数据只能从data流向页面。</p><p>​        2.双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。</p><h3 id="单向绑定"><a href="#单向绑定" class="headerlink" title="单向绑定"></a>单向绑定</h3><p>示例：</p><blockquote><p>v-bind</p></blockquote><h3 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3><p>示例：</p><blockquote><p>v-model</p></blockquote><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p>当所用属性相同的时候，单向绑定可以被双向绑定影响</p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230531211937038.png" alt="image-20230531211937038"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>1.双向绑定一般都应用在表单类元素上（如：input、select等）</p><p>2.v-model:value <code>可以简写为 v-model</code>，因为v-model<code>默认收集的就是value值</code>。</p></blockquote><p><strong>例如</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-model:x</span>=<span class="string">&quot;name&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如上代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上</p></blockquote><p><strong>绑定缩写</strong></p><p>v-bind:value ===&gt;:value</p><p>v-model:value ===&gt;v-model:</p><p><strong>补充</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230602224609322.png" alt="image-20230602224609322"></p><p>在这里查看绑定关系</p><hr><h2 id="组件插曲-el与data"><a href="#组件插曲-el与data" class="headerlink" title="组件插曲(el与data)"></a>组件插曲(el与data)</h2><p><strong>data与el的2种写法</strong></p><h3 id="el有2种写法"><a href="#el有2种写法" class="headerlink" title="el有2种写法"></a>el有2种写法</h3><p>​            (1).new Vue时候配置el属性。</p><p>​            (2).先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// el:&#x27;#root&#x27;,//第一种写法</span></span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;Vue!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">v.$mount(<span class="string">&#x27;#root&#x27;</span>)<span class="comment">//第二种写法</span></span><br></pre></td></tr></table></figure><h3 id="data有2种写法"><a href="#data有2种写法" class="headerlink" title="data有2种写法"></a>data有2种写法</h3><p>​            (1).对象式</p><p>​            (2).函数式</p><p>​            如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">     <span class="comment">// el:&#x27;#root&#x27;,//第一种写法</span></span><br><span class="line">     <span class="comment">// data:&#123;//对象式</span></span><br><span class="line">     <span class="comment">//   name:&#x27;Vue!&#x27;</span></span><br><span class="line">     <span class="comment">// &#125;</span></span><br><span class="line">     <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> &#123;<span class="comment">//函数式(必须return)</span></span><br><span class="line">             <span class="attr">name</span>:<span class="string">&#x27;Vue!&#x27;</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> v.$mount(<span class="string">&#x27;#root&#x27;</span>)<span class="comment">//第二种写法</span></span><br></pre></td></tr></table></figure><h3 id="一个重要的原则："><a href="#一个重要的原则：" class="headerlink" title="一个重要的原则："></a>一个重要的原则：</h3><p>​            由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。</p><hr><h2 id="了解MNNM模型"><a href="#了解MNNM模型" class="headerlink" title="了解MNNM模型"></a>了解MNNM模型</h2><blockquote><p>Vue作者受启发</p></blockquote><ol><li><p>M：模型(Model) ：对应 data 中的数据</p></li><li><p>V：视图(View) ：模板</p></li><li><p>VM：视图模型(ViewModel) ： Vue 实例对象</p></li></ol><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230601171525360.png" alt="image-20230601171525360"></p><blockquote><p>data上所有属性，最后都出现在了vm身上</p><p>vm身上所有的属性，及Vue原型上所有属性，在Vue模板中都可以直接使用</p></blockquote><hr><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230601175035212.png" alt="image-20230601175035212"></p><blockquote><p>需要一些配置，才能遍历、修改、删除</p></blockquote><p><strong>基本配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">     <span class="attr">value</span>:<span class="number">18</span>,</span><br><span class="line">     <span class="attr">enumerable</span>:<span class="literal">true</span>, <span class="comment">//控制属性是否可以枚举，默认值是false</span></span><br><span class="line">     <span class="attr">writable</span>:<span class="literal">true</span>, <span class="comment">//控制属性是否可以被修改，默认值是false</span></span><br><span class="line">     <span class="attr">configurable</span>:<span class="literal">true</span>, <span class="comment">//控制属性是否可以被删除，默认值是false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>更高级的配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line"> <span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人读取age属性了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改了age属性，且值是&#x27;</span>,value)</span><br><span class="line">        number = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>让number与person有了关联</p></blockquote><p>两种的配置要根据不同的场景使用</p><p>高级配置甚至可以让两个对象同时关联同一个属性(代理)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">y</span>:<span class="number">200</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="property">x</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        obj.<span class="property">x</span> = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>通过一个<code>对象代理</code>对<code>另一个对象中属性</code>的操作（读/写）</p></blockquote><h3 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h3><p>在<code>绑定数据</code>的时候发现，Vue对象的<code>name和address属性(不是data·)</code>是通过数据代理添加到Vue身上的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line"><span class="attr">address</span>:<span class="string">&#x27;宏福科技园&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230601210450786.png" alt="image-20230601210450786"></p><p>也就是说，这里用了数据代理(对data吗？)</p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230601210857611.png" alt="image-20230601210857611"></p><p>其实是对_data进行了数据代理,</p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230601212132317.png" alt="image-20230601212132317"></p><blockquote><p>1.先通过_data复制data</p><p>2.对_data进行代理，data与 _data相等</p></blockquote><p><strong>总结</strong></p><p>数据代理经常出现，一般数据绑定的时候就会有，因为data{},数据经常要通过_data进行复制，再通过数据代理，生成新属性如(name = ‘张三’),来改变页面的值或者反过来</p><hr><h2 id="事件处理-methods"><a href="#事件处理-methods" class="headerlink" title="事件处理(methods)"></a>事件处理(methods)</h2><h3 id="点击事件及其回调函数"><a href="#点击事件及其回调函数" class="headerlink" title="点击事件及其回调函数"></a>点击事件及其回调函数</h3><p><strong>事件的基本使用：</strong><br>            1.使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；<br>            2.<code>事件的回调需要配置在methods对象中</code>，最终会在vm上；<br>            3.<code>methods中配置的函数，不要用箭头函数</code>！否则this就不是vm了；<br>            4.methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；<br>            5.@click=”demo” 和 @click=”demo($event)” 效果一致，但后者可以传参；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1（不传参）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2($event,66)&quot;</span>&gt;</span>点我提示信息2（传参）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过括号()进行传参</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">showInfo1</span>(<span class="params">event</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">innerText</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">showInfo2</span>(<span class="params">event,number</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(event,number)</span><br><span class="line">            <span class="comment">// console.log(this) //this是vm</span></span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;同学你好！！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>函数应放在methods中，放在data中的应该是数据，(因为要经常变动)</p></blockquote><h3 id="事件的一些修饰符"><a href="#事件的一些修饰符" class="headerlink" title="事件的一些修饰符"></a>事件的一些修饰符</h3><p><strong>Vue中的事件修饰符：</strong></p><p>​    1.prevent：阻止默认事件（常用）；</p><p>​    2.stop：阻止事件冒泡（常用）；</p><p>​    3.once：事件只触发一次（常用）；</p><p>​    4.capture：使用事件的捕获模式；</p><p>​    5.self：只有event.target是当前操作的元素时才触发事件；</p><p>​    6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</p><ol><li>@click.prevent</li></ol><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230602155636326.png" alt="image-20230602155636326"></p><blockquote><p>以前一般是写在事件回调函数里面的<code>preventDefault()</code>，阻止页面跳转</p></blockquote><ol start="2"><li>@click.stop</li></ol><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230602160415510.png" alt="image-20230602160415510"></p><blockquote><p>不阻止冒泡，父级又会触发一次</p></blockquote><ol start="3"><li>@click.once</li></ol><blockquote><p><code>事件</code>只会<code>触发一次</code>,v-once是动态渲染一次变静态</p></blockquote><ol start="4"><li>@click.capture</li></ol><blockquote><p>使用事件捕获，与冒泡相反</p></blockquote><ol start="5"><li>@click.self</li></ol><blockquote><p>锁定为触发的目标为当前元素才触发该函数</p></blockquote><ol start="6"><li>@click.passive</li></ol><blockquote><p>无需等待事件的处理完成，优先执行(如滚动条先滚动，再有回调)</p></blockquote><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><blockquote></blockquote><p><strong>1.Vue中常用的按键别名：</strong></p><p>​      回车 =&gt; enter</p><p>​      删除 =&gt; delete (捕获“删除”和“退格”键)</p><p>​      退出 =&gt; esc</p><p>​      空格 =&gt; space</p><p>​      换行 =&gt; tab (特殊，必须配合keydown去使用)</p><p>​      上 =&gt; up</p><p>​      下 =&gt; down</p><p>​      左 =&gt; left</p><p>​      右 =&gt; right</p><p>2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</p><p><strong>3.系统修饰键（用法特殊）：ctrl、alt、shift、meta</strong></p><p>​      (1).<code>配合keyup使用</code>：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。(ctrl.y)</p><p>​      (2).<code>配合keydown使用</code>：正常触发事件。</p><p>4.也可以使用keyCode去指定具体的按键（不推荐）</p><p>5.Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名(<code>Vue3不用了</code>)</p><blockquote><p>键盘事件一般配合keyup或者keydown使用</p><p>一般来说，注意前三个就够了。用Vue定义的就够了</p></blockquote><hr><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><h3 id="计算属性总结："><a href="#计算属性总结：" class="headerlink" title="计算属性总结："></a>计算属性总结：</h3><p>​    1.定义：要用的属性不存在，要通过已有属性计算得来。</p><p>​    2.原理：底层借助了Objcet.defineproperty方法提供的getter和setter。</p><p>​    <code>3.get函数什么时候执行？</code></p><p>​          (1).<code>初次读取</code>时会执行一次。</p><p>​          (2).当<code>依赖的数据发生改变时</code>会被再次调用<code>(且数据归Vue管)</code>。</p><p>​    4.优势：与methods实现相比，<code>内部有缓存机制</code>（getter复用），效率更高，调试方便。</p><p>​    5.备注：</p><p>​        1.计算属性最终会出现在vm上，直接读取使用即可。</p><p>​        2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</p><blockquote><p>我发现，指令语法、计算属性、数据代理、插值语法经常有关联，特别是<code>插值语法和指令语法</code></p></blockquote><h3 id="示例拼接显示姓名"><a href="#示例拼接显示姓名" class="headerlink" title="示例拼接显示姓名"></a>示例拼接显示姓名</h3><h4 id="几种方法对比"><a href="#几种方法对比" class="headerlink" title="几种方法对比"></a>几种方法对比</h4><p><strong>插值方法</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230603144518230.png" alt="image-20230603144518230"></p><p><strong>methods</strong></p><p>1.fullName要用的是函数</p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230602220402200.png" alt="image-20230602220402200"></p><p>2.当有多个对象时，会多次调用函数，没有缓存机制</p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230602220950069.png" alt="image-20230602220950069"></p><p><strong>计算属性：</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230603150100148.png" alt="image-20230603150100148"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line"><span class="attr">fullName</span>:&#123;</span><br><span class="line"><span class="comment">//get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span><br><span class="line"><span class="comment">//get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。</span></span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line"><span class="comment">// console.log(this) //此处的this是vm</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//set什么时候调用? 当fullName被修改时。</span></span><br><span class="line"><span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>,value)</span><br><span class="line"><span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>]</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意this的使用，与箭头函数的关系</p><p>看图更好看</p></blockquote><p><strong>计算属性的简写</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line"><span class="comment">//完整写法</span></span><br><span class="line"><span class="comment">/* fullName:&#123;</span></span><br><span class="line"><span class="comment">get()&#123;</span></span><br><span class="line"><span class="comment">console.log(&#x27;get被调用了&#x27;)</span></span><br><span class="line"><span class="comment">return this.firstName + &#x27;-&#x27; + this.lastName</span></span><br><span class="line"><span class="comment">&#125;,</span></span><br><span class="line"><span class="comment">set(value)&#123;</span></span><br><span class="line"><span class="comment">console.log(&#x27;set&#x27;,value)</span></span><br><span class="line"><span class="comment">const arr = value.split(&#x27;-&#x27;)</span></span><br><span class="line"><span class="comment">this.firstName = arr[0]</span></span><br><span class="line"><span class="comment">this.lastName = arr[1]</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里需要注意，是一个对象而不是函数</p></blockquote><hr><h2 id="监视属性-watch"><a href="#监视属性-watch" class="headerlink" title="监视属性 -watch"></a>监视属性 -watch</h2><h3 id="天气案例"><a href="#天气案例" class="headerlink" title="天气案例"></a>天气案例</h3><p><strong>理解数据变化的流程</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230603155419885.png" alt="image-20230603155419885"></p><blockquote><p>绑定事件时简单的表达式可以直接写在属性那边</p></blockquote><h4 id="监视属性watch："><a href="#监视属性watch：" class="headerlink" title="监视属性watch："></a>监视属性watch：</h4><p>  1.当被监视的属性变化时, 回调函数自动调用, 进行相关操作</p><p>  2.监视的属性必须存在，才能进行监视！！</p><p>  3.监视的两种写法：</p><p>​      (1).new Vue时传入watch配置</p><p>​      (2).通过vm.$watch监视</p><p><strong>自定义监视属性</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230603174426749.png" alt="image-20230603174426749"></p><p><strong>内置的监视属性vm.$watch</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230603174141384.png" alt="image-20230603174141384"></p><h3 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h3><p>​    (1).Vue中的<code>watch默认不监测对象内部值</code>的改变（一层）。</p><p>​    (2).配置<code>deep:true可以监测对象内部值</code>改变（多层）。</p><p>备注：</p><p>​    (1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！</p><p>​    (2).使用watch时根据数据的具体结构，决定是否采用深度监视。</p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230603175810205.png" alt="image-20230603175810205"></p><blockquote><p>这样的默认是为了效率的提高</p></blockquote><p><strong>简写</strong></p><blockquote><p>就不能配置其他参数了，deep,immediate</p><p>省略和计算属性一样</p></blockquote><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230603180330573.png" alt="image-20230603180330573"></p><h3 id="watch监听属性实现名字拼接"><a href="#watch监听属性实现名字拼接" class="headerlink" title="watch监听属性实现名字拼接"></a>watch监听属性实现名字拼接</h3><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230603181659084.png" alt="image-20230603181659084"></p><blockquote><p>一眼就是通过监听回调，来实现名字的拼接</p></blockquote><h4 id="注意细节"><a href="#注意细节" class="headerlink" title="注意细节"></a><strong>注意细节</strong></h4><p>1.计算属性</p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230603181843667.png" alt="image-20230603181843667"></p><blockquote><p>1.不能加入异步延迟函数(如要求1s后才拼接)</p></blockquote><p>2.监听属性</p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230603181957621.png" alt="image-20230603181957621"></p><blockquote><p>1.回调函数可以加入异步延迟<code>必须是箭头函数</code></p><p>2.因为箭头函数的this指向是上一层的指向，而上一层指的是vm</p></blockquote><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><strong>computed和watch之间的区别：</strong></p><p>​    1.computed能完成的功能，watch都可以完成。</p><p>​    2.watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。</p><p><strong>两个重要的小原则：</strong></p><p>​      1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</p><p>​      2.所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，</p><p>​        这样this的指向才是vm 或 组件实例对象。</p><blockquote><p>定时器函数一般this的指向一般是,window</p><p>但是在箭头函数里面，没有自己的this所以可以通过上一层来改变定时器函数的this的指向</p></blockquote><hr><h1 id="Vue样式的使用"><a href="#Vue样式的使用" class="headerlink" title="Vue样式的使用"></a>Vue样式的使用</h1><h2 id="绑定样式："><a href="#绑定样式：" class="headerlink" title="绑定样式："></a>绑定样式：</h2><h3 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h3><p>​    <strong>1. class样式</strong></p><p>​          写法:class=”xxx” xxx可以是字符串、对象、数组。</p><p>​              字符串写法适用于：类名不确定，要动态获取。</p><p>​              对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</p><p>​              数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</p><p>​    <strong>2. style样式</strong></p><p>​          :style=”{fontSize: xxx}”其中xxx是动态值。</p><p>​          :style=”[a,b]”其中a、b是样式对象。</p><h3 id="绑定class样式-常用"><a href="#绑定class样式-常用" class="headerlink" title="绑定class样式(常用)"></a>绑定class样式(常用)</h3><p><strong>1.字符串写法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230604211611661.png" alt="image-20230604211611661"></p><p><strong>2.数组写法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230604211632513.png" alt="image-20230604211632513"></p><p><strong>3.对象写法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230604211647656.png" alt="image-20230604211647656"></p><h3 id="style样式-少见"><a href="#style样式-少见" class="headerlink" title="style样式(少见)"></a>style样式(少见)</h3><p><strong>对象写法和数组写法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230604211711450.png" alt="image-20230604211711450"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li>style(行内样式)，感觉用数组[对象，对象]的方法比较好</li><li>然后数组或者对象的class用法比较多，特别是对象class，因为可以灵活改变样式的ture or false来显示。</li></ul><hr><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="概括-1"><a href="#概括-1" class="headerlink" title="概括"></a>概括</h3><p><strong>1.v-if</strong><br>    写法：<br>            (1).v-if=”表达式”<br>            (2).v-else-if=”表达式”<br>            (3).v-else=”表达式”<br>    适用于：切换频率较低的场景。<br>    特点：<code>不展示的DOM元素直接被移除</code>。<br>    注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</p><p><strong>2.v-show</strong><br>    写法：v-show=”表达式”<br>    适用于：切换频率较高的场景。<br>    特点：<code>不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</code></p><p>3.备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</p><h3 id="v-show-直接显示"><a href="#v-show-直接显示" class="headerlink" title="v-show(直接显示)"></a>v-show(直接显示)</h3><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230605163854288.png" alt="image-20230605163854288"></p><h3 id="v-if-删除后显示"><a href="#v-if-删除后显示" class="headerlink" title="v-if(删除后显示)"></a>v-if(删除后显示)</h3><p><strong>特点使用</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230605163724122.png" alt="image-20230605163724122"></p><blockquote><p>template不占格，div占格</p></blockquote><h3 id="v-else-配合v-if使用"><a href="#v-else-配合v-if使用" class="headerlink" title="v-else(配合v-if使用)"></a>v-else(配合v-if使用)</h3><blockquote><p>如果每次都用if那么每个if都要判断一次，与if -else if用法一样</p></blockquote><p><strong>打断之后后面的就不成立了</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230605162839808.png" alt="image-20230605162839808"></p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ul><li>表达式里面一般放布尔值<code>(常用应该是一些判断表达式)</code></li><li>一般用template与if展示多个元素</li><li>v-if被移除的元素不能获取，v-show只是隐藏</li></ul><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><h4 id="v-for指令-遍历"><a href="#v-for指令-遍历" class="headerlink" title="v-for指令(遍历):"></a>v-for指令(遍历):</h4><p>  1.用于展示列表数据</p><p>  2.语法：v-for=”(item, index) in xxx” :key=”yyy”</p><p>  3.可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</p><p><strong>v-for示例</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230605210328305.png" alt="image-20230605210328305"></p><h4 id="为何配置key为id"><a href="#为何配置key为id" class="headerlink" title="为何配置key为id"></a>为何配置key为id</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230605173812641.png" alt="image-20230605173812641"></p><blockquote><p>无配置时，默认index(索引号)为新id</p><ul><li><p>:key = index;</p><p>当插入顺序为乱序，diff(对比算法)，由于id重新打乱，那么新虚拟DOM比较时，将更新id内容</p><p>乱序： arr.splice(1,1)//(起始位置，删除数量)</p></li></ul></blockquote><h4 id="总结-面试题"><a href="#总结-面试题" class="headerlink" title="总结(面试题)"></a>总结(面试题)</h4><h5 id="react、vue中的key有什么作用？（key的内部原理）"><a href="#react、vue中的key有什么作用？（key的内部原理）" class="headerlink" title="react、vue中的key有什么作用？（key的内部原理）"></a><strong>react、vue中的key有什么作用？（key的内部原理）</strong></h5><p>​    </p><p>​    <strong>1.虚拟DOM中key的作用：</strong></p><p>​            key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p><p>​    <strong>2.对比规则：</strong></p><p>​          (1).旧虚拟DOM中找到了与新虚拟DOM相同的key：</p><p>​                ①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</p><p>​                ②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</p><p>​          (2).旧虚拟DOM中未找到与新虚拟DOM相同的key</p><p>​                创建新的真实DOM，随后渲染到到页面。</p><p>​                </p><p>​    <strong>3.用index作为key可能会引发的问题：</strong></p><p>​              1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</p><p>​                      会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</p><p>​              2.如果结构中还包含<code>输入类的DOM(input)</code>：</p><p>​                      会<code>产生错误DOM更新</code> ==&gt; 界面有问题。</p><p>​    <strong>4.开发中如何选择key?:</strong></p><p>​              1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</p><p>​              2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，</p><p>​                使用index作为key是没有问题的。</p><h3 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h3><blockquote><p>空字符串的indexOf，索引号为0</p></blockquote><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230605215427302.png" alt="image-20230605215427302"></p><h4 id="实现过滤"><a href="#实现过滤" class="headerlink" title="实现过滤"></a>实现过滤</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230605223702733.png" alt="image-20230605223702733"></p><h4 id="监听方法watch"><a href="#监听方法watch" class="headerlink" title="监听方法watch"></a>监听方法watch</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230605223948101.png" alt="image-20230605223948101"></p><blockquote><p>初始化immediate:true实现空字符全部显示预览</p></blockquote><h4 id="计算属性实现computed"><a href="#计算属性实现computed" class="headerlink" title="计算属性实现computed"></a>计算属性实现computed</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230605223808451.png" alt="image-20230605223808451"></p><blockquote><p>第一个keywords是空字符，所以全部显示</p><p>剩下的就和监听方法一样了</p></blockquote><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><ul><li>对比之下，计算属性更简单一点</li><li>计算属性是生成一个新的vm.属性，所以和watch要定义一个空属性不同</li><li><code>监听能实现的，计算属性肯定可以实现</code></li></ul><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><h4 id="设计骨架"><a href="#设计骨架" class="headerlink" title="设计骨架"></a>设计骨架</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230606164034885.png" alt="image-20230606164034885"></p><blockquote><p>给定点击事件，设定升序降序</p></blockquote><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><h5 id="计算属性实现"><a href="#计算属性实现" class="headerlink" title="计算属性实现"></a>计算属性实现</h5><p><strong>arr.sort((a,b) =&gt; {return 条件})</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230606164511824.png" alt="image-20230606164511824"></p><blockquote><p>奇妙的地方是，当你写好原来的函数算法时，新增的要求一般直接在原来的基础下，继续写上新的条件就好了。如果不触发条件，那么就会将信息复原</p></blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>这里会改变列表的排序(虽然原先的数据还是没变)，所以最好：key = p.id。这样改变顺序显示就不会有显示问题(包括插入)。</p><h1 id="中间插播一个问题"><a href="#中间插播一个问题" class="headerlink" title="中间插播一个问题"></a>中间插播一个问题</h1><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230606211427207.png" alt="image-20230606211427207"></p><blockquote><p>发现整个对象更新时，在浏览器上并没有更新</p></blockquote><p><strong>效果显示</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230606211922246.png" alt="image-20230606211922246"></p><h1 id="Vue数据监测原理"><a href="#Vue数据监测原理" class="headerlink" title="Vue数据监测原理"></a>Vue数据监测原理</h1><h2 id="Vue监测数据-1-对象"><a href="#Vue监测数据-1-对象" class="headerlink" title="Vue监测数据(1.对象)"></a>Vue监测数据(1.对象)</h2><h3 id="重要步骤"><a href="#重要步骤" class="headerlink" title="重要步骤"></a>重要步骤</h3><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230606170235290.png" alt="image-20230606170235290"></p><blockquote><p>在第二步之前，有一个实现对象Observer</p></blockquote><h3 id="模拟流程"><a href="#模拟流程" class="headerlink" title="模拟流程"></a>模拟流程</h3><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230606174829578.png" alt="image-20230606174829578"></p><blockquote><p>当修改数据data时，Observer就会被修改，所以就会调用set(),并修改obj[k] = val(修改属性K的值为val)</p><p>obj就是data</p><p><code>实际上Vue嵌套很多层也能找到，并创造get() set()</code></p></blockquote><h2 id="vm-set-amp-Vue-set"><a href="#vm-set-amp-Vue-set" class="headerlink" title="vm.$set()&amp;Vue.set()"></a>vm.$set()&amp;Vue.set()</h2><blockquote><p>添加新属性</p></blockquote><p><strong>set()添加</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230606214302210.png" alt="image-20230606214302210"></p><blockquote><p>vm._data.student === vm.student <code>(数据代理，同时更新)</code></p></blockquote><p><strong>直接往vm添加</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230607165728242.png" alt="image-20230607165728242"></p><blockquote><p>没有get(),set()函数进行数据代理，<code>只是单纯的数据</code></p></blockquote><p><strong>技巧</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230606214554226.png" alt="image-20230606214554226"></p><blockquote><p>利用v-if展示有的元素，删除没有的元素</p></blockquote><h3 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h3><blockquote><p>不能直接给data添加属性(响应式)，也不能直接给vm添加。若要添加，必须给data添加一个对象</p></blockquote><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230606220517362.png" alt="image-20230606220517362"></p><blockquote><p>得放到data的下一级才行，这时插值==&gt;</p></blockquote><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意：</strong></h3><ul><li>如果先直接插入新的属性值，没有用Vue.set(target,属性,值)，那么后面再用这个方法<code>也不会数据代理，只会更改值</code>。</li></ul><h2 id="Vue监测数据改变的原理-2-数组"><a href="#Vue监测数据改变的原理-2-数组" class="headerlink" title="Vue监测数据改变的原理(2.数组)"></a>Vue监测数据改变的原理(2.数组)</h2><p><strong>1.不能直接根据索引号插入整个(数组没有，对象和它的属性有数据代理)</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230607174632635.png" alt="image-20230607174632635"></p><blockquote><p>不用这些方法，就检测不到数据更新，从而不更新页面</p></blockquote><p><strong>2.目前包装的方法</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230607174848644.png" alt="image-20230607174848644"></p><blockquote><p>Vue自己包装了包含原型数组的七种办法，在包装里面还加工了，检测数据变化更新页面的功能<code>(具体实现方法)</code></p></blockquote><p><strong>3.工作原理</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230607175259283.png" alt="image-20230607175259283"></p><p><strong>4.想法</strong></p><ol><li>感觉可以根据原型判断数组的方法，然后先用Vue.set()的方法更改，再变换位置</li></ol><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230607181451938.png" alt="image-20230607181451938"></p><blockquote><p>实际上，并不是利用Vue.set(),因为不能作用在data的第一级</p></blockquote><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><h3 id="Vue监视数据的原理："><a href="#Vue监视数据的原理：" class="headerlink" title="Vue监视数据的原理："></a>Vue监视数据的原理：</h3><h4 id="1-vue会监视data中所有层次的数据。"><a href="#1-vue会监视data中所有层次的数据。" class="headerlink" title="1.vue会监视data中所有层次的数据。"></a><strong>1.vue会监视data中所有层次的数据。</strong></h4><p>​    中间有数组结构，会用自定义数组方法，对象和它的属性才会有get()/set()</p><h4 id="2-如何监测对象中的数据？"><a href="#2-如何监测对象中的数据？" class="headerlink" title="2.如何监测对象中的数据？"></a><strong>2.如何<code>监测对象</code>中的数据？</strong></h4><p>​          通过setter实现监视，且要在new Vue时就传入要监测的数据。</p><p>​            (1).对象中后追加的属性，Vue默认不做响应式处理</p><p>​            (2).如需给<code>后添加的属性做响应式</code>，请使用如下API：</p><p>​                    Vue.set(target，propertyName/index，value) 或 </p><p>​                    vm.$set(target，propertyName/index，value)</p><h4 id="3-如何监测数组中的数据？"><a href="#3-如何监测数组中的数据？" class="headerlink" title="3.如何监测数组中的数据？"></a><strong>3.如何<code>监测数组</code>中的数据？</strong></h4><p>​            通过包裹数组更新元素的方法实现，本质就是做了两件事：</p><p>​              (1).调用原生对应的方法对数组进行更新。</p><p>​              (2).<code>重新解析模板，进而更新页面</code>。</p><h4 id="4-在Vue修改数组中的某个元素一定要用如下方法："><a href="#4-在Vue修改数组中的某个元素一定要用如下方法：" class="headerlink" title="4.在Vue修改数组中的某个元素一定要用如下方法："></a><strong>4.在Vue修改数组中的某个元素一定要用如下方法：</strong></h4><p>​        1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</p><p>​        2.Vue.set() 或 vm.$set()</p><pre><code>    3.用数组的其他方法，如filter。则可以通过</code></pre><blockquote><p>this.school.hobby = this.school.hobby.filter(() =&gt;{return 条件})</p><p>整个更改数组<code>(相当于更改了)</code></p></blockquote><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230607224137697.png" alt="image-20230607224137697"></p><h4 id="特别注意：Vue-set-和-vm-set-不能给vm-或-vm的根数据对象-添加属性！！！"><a href="#特别注意：Vue-set-和-vm-set-不能给vm-或-vm的根数据对象-添加属性！！！" class="headerlink" title=" 特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！"></a><code> 特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</code></h4><hr><h1 id="一些简单的应用"><a href="#一些简单的应用" class="headerlink" title="一些简单的应用"></a>一些简单的应用</h1><h2 id="收集表单数据："><a href="#收集表单数据：" class="headerlink" title="收集表单数据："></a>收集表单数据：</h2><p>​    **1.若：input type=”text”**，则v-model收集的是value值，用户输入的就是value值。</p><p>​    **2.若：input type=”radio”**，则v-model收集的是value值，且要给标签配置value值。</p><p>​    <strong>3.若：input type=”checkbox”</strong></p><p>​        1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p><p>​        2.配置input的value属性:</p><p>​            (1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p><p>​            (2)v-model的初始值是数组，那么收集的的就是value组成的数组</p><p>​    <strong>备注：v-model的三个修饰符：</strong></p><p>​            lazy：失去焦点再收集数据</p><p>​            number：输入字符串转为有效的数字</p><p>​            trim：输入首尾空格过滤</p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230608164157578.png" alt="image-20230608164157578"></p><blockquote><p>第一个限制输入为数字，其它输入不了</p><p>第二个让内容变成数字类型而不是字符型</p></blockquote><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a>注意:</h3><p>ajax一般将数据变成json形式给后端，但是对象一般不用_data</p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230608164839445.png" alt="image-20230608164839445"></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230608164951693.png" alt="image-20230608164951693"></p><blockquote><p>定义一个data里面的一个用户数据对象</p></blockquote><h2 id="过滤器-了解"><a href="#过滤器-了解" class="headerlink" title="过滤器(了解)"></a>过滤器(了解)</h2><ul><li>较多用于插值语法，较少用于直接v-bind(不能用于v-model)</li><li>顾名思义，一般是对数据进行中间处理(中间过滤API)</li></ul><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230608183556780.png" alt="image-20230608183556780"></p><blockquote><p>因为有两个Vue,之间的过滤器是不能互相调用的，只能配置一个全局的</p></blockquote><p><strong>定义：</strong>对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。</p><p><strong>语法：</strong></p><p>​    1.注册过滤器：Vue.filter(name,callback)(全局) 或 (局部)new Vue{filters:{}}</p><p>​    2.使用过滤器：已经不怎么用了</p><p><strong>备注：</strong></p><p>​    1.过滤器也可以接收额外参数、多个过滤器也可以串联</p><p>​    2.并没有改变原本的数据, 是产生新的对应的数据</p><hr><h1 id="Vue内置指令到自定义"><a href="#Vue内置指令到自定义" class="headerlink" title="Vue内置指令到自定义"></a>Vue内置指令到自定义</h1><p><strong>我们学过的指令：</strong></p><p>​    v-bind  : 单向绑定解析表达式, 可简写为 :xxx</p><p>​    v-model : 双向数据绑定</p><p>​    v-for  : 遍历数组/对象/字符串</p><p>​    v-on   : 绑定事件监听, 可简写为@</p><p>​    v-if     : 条件渲染（动态控制节点是否存存在）</p><p>​    v-else  : 条件渲染（动态控制节点是否存存在）</p><p>​    v-show  : 条件渲染 (动态控制节点是否展示)</p><h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><blockquote><p>将信息变成文本(html语法没用)</p></blockquote><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230608185220783.png" alt="image-20230608185220783"></p><blockquote><p>插值语法比较灵活，但也只是文本</p></blockquote><h4 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h4><p>​        v-text指令：</p><p>​            1.作用：向其所在的节点中渲染文本内容。</p><p>​            2.与插值语法的区别：v-text会替换掉节点中的内容，则不会。</p><hr><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><blockquote><p>支持结构的解析</p></blockquote><h4 id="数据泄露"><a href="#数据泄露" class="headerlink" title="数据泄露"></a>数据泄露</h4><p><strong>通过一些跳转，泄露cookie</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230608231000186.png" alt="image-20230608231000186"></p><p><strong>学过的防止方法</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230608230703097.png" alt="image-20230608230703097"></p><blockquote><p>前端无法通过js代码获取一些信息(会话控制讲过)</p><p>还有就是退出用post(不带参数到地址栏)</p></blockquote><h4 id="v-html指令总结："><a href="#v-html指令总结：" class="headerlink" title="v-html指令总结："></a>v-html指令总结：</h4><p>​    <strong>1.作用：</strong>向指定节点中渲染包含html结构的内容。</p><p>​    <strong>2.与插值语法的区别：</strong></p><p>​          (1).v-html会替换掉节点中所有的内容，则不会。</p><p>​          (2).v-html可以识别html结构。</p><p>​    <strong>3.严重注意：v-html有安全性问题！！！！</strong></p><p>​          (1).<strong>在网站上动态渲染任意HTML是非常危险的</strong>，容易导致<strong>XSS攻击</strong>。</p><p>​          (2).一定要在可信的内容上使用v-html，<strong>永不要用在用户提交的内容上</strong>！</p><hr><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><blockquote><p>解决网速过慢导致未经解析的html出现在网页上显示</p></blockquote><h4 id="了解js阻塞"><a href="#了解js阻塞" class="headerlink" title="了解js阻塞"></a>了解js阻塞</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230608222710060.png" alt="image-20230608222710060"></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230608223322155.png" alt="image-20230608223322155"></p><h4 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h4><p><strong>v-cloak指令（没有值）：</strong></p><p>  1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。</p><p>  2.使用css配合v-cloak可以解决网速慢时页面展示出的问题。</p><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p><strong>v-once指令：</strong></p><p>  1.v-once所在节点在初次动态渲染后，就视为静态内容了。</p><p>  2.以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</p><p><strong>效果</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230609162319234.png" alt="image-20230609162319234"></p><p><strong>只动态渲染一次</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230609162333505.png" alt="image-20230609162333505"></p><p><strong>注意：</strong></p><p>​    @click.once指的是事件</p><hr><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><p><strong>v-pre指令：</strong></p><p>  1.跳过其所在节点的编译过程。</p><p>  2.<code>可利用它跳过</code>：没有使用指令语法、没有使用插值语法的<code>节点</code>，会加快编译。</p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230609162854494.png" alt="image-20230609162854494"></p><blockquote><p>跳过不需要Vue编译的节点(默认都要编译)</p></blockquote><hr><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><ul><li><p>函数形式</p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230609170814679.png" alt="image-20230609170814679"></p></li><li><p>对象形式</p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230609170922553.png" alt="image-20230609170922553"></p></li></ul><p><strong>示例</strong></p><p>​    需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。</p><p>​    需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</p><h3 id="理解遇到的问题"><a href="#理解遇到的问题" class="headerlink" title="理解遇到的问题"></a>理解遇到的问题</h3><p><strong>big函数何时会被调用？</strong></p><p>1.指令与元素成功绑定时（一上来）。</p><p>2.指令所在的模板被重新解析时。</p><h4 id="指令没效果"><a href="#指令没效果" class="headerlink" title="指令没效果"></a><strong>指令没效果</strong></h4><blockquote><p>了解页面呈现关系</p></blockquote><h4 id="element-focus-获取焦点"><a href="#element-focus-获取焦点" class="headerlink" title="element.focus() 获取焦点"></a><strong>element.focus() 获取焦点</strong></h4><p><strong>1.函数的形式</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230609165236193.png" alt="image-20230609165236193"></p><blockquote><p>获取的容器一般先与Vue的指令绑定，然后被编译，最后将结果显示在页面上(所以focus找不到input，容器还没放上去)</p></blockquote><p><strong>2.对象形式</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230609170016588.png" alt="image-20230609170016588"></p><blockquote><p>一般对象里面包这几个函数：绑定，插入(有input)，更新(有新数据，重新解析)</p></blockquote><h3 id="自定义指令总结："><a href="#自定义指令总结：" class="headerlink" title="自定义指令总结："></a>自定义指令总结：</h3><p><strong>一、定义语法：</strong></p><p>  (1).<code>局部指令</code>：</p><p>​    directives:{指令名:配置对象}  或 directives{指令名:回调函数}</p><p>  (2).<code>全局指令</code>：</p><p>  Vue.directive(指令名,配置对象) 或  Vue.directive(指令名,回调函数)</p><p><strong>二、配置对象中常用的<code>3个回调</code>：</strong></p><p>  (1).bind：指令与元素成功绑定时调用。</p><p>  (2).inserted：指令所在元素被插入页面时调用。</p><p>  (3).update：指令所在模板结构被重新解析时调用。</p><p><strong>三、备注</strong>(使用细节)：</p><p>  1.指令定义时不加v-，但使用时要加v-；</p><p>  2.指令名如果是多个单词，要使用<code>kebab-case命名方式(中间加-的形式)</code>，不要用camelCase命名。</p><hr><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h2><p>  1.又名：生命周期回调函数、生命周期函数、<code>生命周期钩子(特殊的时候勾出来)</code>。</p><p>  2.是什么：Vue在<code>关键时刻</code>帮我们<code>调用</code>的一些<code>特殊名称的函数</code>。</p><p>  3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的<code>(自己所需)</code>。</p><p>  4.生命周期函数中的this指向是vm 或 组件实例对象。</p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230609185332927.png" alt="image-20230609185332927"></p><h2 id="理解挂载"><a href="#理解挂载" class="headerlink" title="理解挂载"></a>理解挂载</h2><h3 id="定时器的调用"><a href="#定时器的调用" class="headerlink" title="定时器的调用"></a>定时器的调用</h3><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230609183839455.png" alt="image-20230609183839455"></p><blockquote><p>1.挂载<code>必须是初始的真实元素</code>，后续的变动都叫更新</p><p>2.<code>(所以只会调用一次)</code></p></blockquote><h4 id="为什么要利用挂载？"><a href="#为什么要利用挂载？" class="headerlink" title="为什么要利用挂载？"></a>为什么要利用挂载？</h4><p>1.放在method时，正常数据更新页面<code>(可能与定时器本身就有关)</code>。</p><p>2.会引起Vue实例对象对页面的重新解析，从而又开了一个定时器。</p><h2 id="详细了解生命周期"><a href="#详细了解生命周期" class="headerlink" title="详细了解生命周期"></a>详细了解生命周期</h2><p><strong>1.初始化阶段到数据检测</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230609231209778.png" alt="image-20230609231209778"></p><blockquote><p>初始化=&gt;beforeCreate=&gt;数据代理数据检测=&gt;Created=&gt;解析内容生成虚拟DOM</p></blockquote><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230610150258594.png" alt="image-20230610150258594"></p><blockquote><p>通过打断点，这里_data都没有(证明没有数据代理)</p></blockquote><p><strong>2.虚拟DOM生成</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230609231242241.png" alt="image-20230609231242241"></p><blockquote><p>还没转真实DOM,所以页面不会显示解析好的内容</p></blockquote><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230610154310479.png" alt="image-20230610154310479"></p><p><strong>3.虚拟DOM转为真实DOM,挂载前，到挂载</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230609231320151.png" alt="image-20230609231320151"></p><blockquote><p>转之前，生成了一个vm.$el存着真实DOM</p></blockquote><p>beforeMount=&gt;Mount(挂载)=&gt;Mounted</p><p><strong>template</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230610160624041.png" alt="image-20230610160624041"></p><blockquote><p>完全替换调页面的el</p></blockquote><p><strong>查看vm.$el</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230610163238727.png" alt="image-20230610163238727"></p><blockquote><p>检测是否为真实DOM</p></blockquote><p><strong>4.数据更新</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230610213740613.png" alt="image-20230610213740613"></p><p><strong>beforeUpdata</strong></p><p>此时页面和数据未保持同步</p><blockquote><p>更新完成在挂载的时候就已经完成了一次</p></blockquote><p><strong>updataed</strong></p><p>页面与数据已经保持同步</p><p><strong>5.vm销毁阶段</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230610215438883.png" alt="image-20230610215438883"></p><p>beforeDestroy=&gt;destryed</p><h2 id="声明周期总结"><a href="#声明周期总结" class="headerlink" title="声明周期总结"></a>声明周期总结</h2><p>八个，四对</p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230610215800673.png" alt="image-20230610215800673"></p><p><strong>vm.$destory</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230610220626617.png" alt="image-20230610220626617"></p><p><strong>常用的生命周期钩子：</strong></p><p>  1.mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</p><p>  2.beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</p><p><strong>关于销毁Vue实例</strong></p><p>  1.销毁后借助Vue开发者工具看不到任何信息。</p><p>  2.销毁后自定义事件会失效，但原生DOM事件依然有效。</p><p>  3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</p><hr><h1 id="Vue组件化编程"><a href="#Vue组件化编程" class="headerlink" title="Vue组件化编程"></a>Vue组件化编程</h1><blockquote><p>实现应用中<code>局部</code>动能<code>代码和资源</code>的<code>集合</code></p></blockquote><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612172640049.png" alt="image-20230612172640049"></p><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><h4 id="1-传统方式编写图样"><a href="#1-传统方式编写图样" class="headerlink" title="1.传统方式编写图样"></a>1.传统方式编写图样</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612170954850.png" alt="image-20230612170954850"></p><p><code>存在的问题：</code></p><ul><li>依赖关系混乱，不好维护(相互依赖，引入顺序文件多时会很乱)</li><li>代码复用率较低</li></ul><h4 id="2-使用组件"><a href="#2-使用组件" class="headerlink" title="2.使用组件"></a>2.使用组件</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612172420223.png" alt="image-20230612172420223"></p><hr><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p><strong>为什么要模块(以前)</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612173044395.png" alt="image-20230612173044395"></p><h4 id="为什么要用组件"><a href="#为什么要用组件" class="headerlink" title="为什么要用组件"></a>为什么要用组件</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612173128564.png" alt="image-20230612173128564"></p><h4 id="组件化与模块化"><a href="#组件化与模块化" class="headerlink" title="组件化与模块化"></a>组件化与模块化</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612173313597.png" alt="image-20230612173313597"></p><h5 id="图示-1"><a href="#图示-1" class="headerlink" title="图示"></a>图示</h5><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612173458540.png" alt="image-20230612173458540"></p><blockquote><p>js分块为模块化，整个负责顶部为一个组件</p></blockquote><hr><h2 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h2><blockquote><p>一个文件里面(html)，包含(n)个组件</p></blockquote><p><strong>注意：</strong></p><blockquote><p>组件不用写自己的容器，因为要复用(到处用，vm决定)</p><p><code>先定义，后嵌套</code></p></blockquote><h3 id="关于数据连带"><a href="#关于数据连带" class="headerlink" title="关于数据连带"></a>关于数据连带</h3><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612174915213.png" alt="image-20230612174915213"></p><blockquote><p>字面量</p></blockquote><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="Vue中使用组件的三大步骤："><a href="#Vue中使用组件的三大步骤：" class="headerlink" title="Vue中使用组件的三大步骤："></a>Vue中使用组件的三大步骤：</h4><p>  一、定义组件(创建组件)</p><p>  二、注册组件</p><p>  三、使用组件(写组件标签)</p><p><strong>第一步：创建school组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步：创建school组件</span></span><br><span class="line"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;demo&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br></pre></td></tr></table></figure><p><strong>第二步：注册组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二步：全局注册组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;hello&#x27;</span>,hello)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;你好啊！&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//第二步：注册组件（局部注册）</span></span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        school,</span><br><span class="line">        student</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>第三步：编写组件标签</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第三步：编写组件标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第三步：编写组件标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>示例样式</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612181155466.png" alt="image-20230612181155466"></p><h3 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h3><p><strong>Vue中使用组件的三大步骤：</strong></p><p>  一、定义组件(创建组件)</p><p>  二、注册组件</p><p>  三、使用组件(写组件标签)</p><p><strong>一、如何定义一个组件？</strong></p><p>  使用<code>Vue.extend(options)创建</code>，其中options和<code>new Vue(options)</code>时传入的那个options几乎一样，但也有点区别；</p><p>  <code>区别如下</code>：</p><p>​      1.el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，<code>由vm中的el决定服务哪个容器</code>。</p><p>​      2.data必须写成<code>函数</code>，为什么？ ———— 避免组件被<code>复用</code>时，数据存在引用关系。</p><p>  备注：使用<code>template可以配置组件结构</code>。</p><p><strong>二、如何注册组件？</strong></p><p>  1.局部注册：靠new Vue的时候传入components选项</p><p>  2.全局注册：靠Vue.component(‘组件名’,组件)</p><p><strong>三、编写组件标签：</strong></p><p>  &lt; school&gt;&lt;/ school&gt;</p><hr><h2 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h2><p><strong>在option里面设置name</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612215148811.png" alt="image-20230612215148811"></p><blockquote><p>第三方使用这个库的时候可以在这里改名</p></blockquote><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612183036941.png" alt="image-20230612183036941"></p><blockquote><p>大写：只能在有脚手架的时候用</p></blockquote><h4 id="1-关于组件名"><a href="#1-关于组件名" class="headerlink" title="1.关于组件名:"></a><strong>1.关于组件名:</strong></h4><p>  <strong>一个单词组成：</strong></p><p>​        第一种写法(首字母小写)：school</p><p>​        第二种写法(首字母大写)：School</p><p>  多个单词组成：</p><p>​        第一种写法(kebab-case命名)：my-school</p><p>​        第二种写法(CamelCase命名)：MySchool <code>(需要Vue脚手架支持)</code></p><p>  <strong>备注：</strong></p><p>​      (1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</p><p>​      (2).可以使用name配置项指定组件在开发者工具中呈现的名字。</p><h4 id="2-关于组件标签"><a href="#2-关于组件标签" class="headerlink" title="2.关于组件标签:"></a>2.关于组件标签:</h4><p>  第一种写法：&lt; school&gt;&lt;/ school&gt;</p><p>  自闭合写法：&lt; school/&gt;</p><p>  备注：不使用脚手架时，&lt; school/&gt;会导致后续组件不能渲染(分析不了)。</p><h4 id="3-一个简写方式："><a href="#3-一个简写方式：" class="headerlink" title="3.一个简写方式："></a>3.一个简写方式：</h4><p>  const school = Vue.extend(options) 可简写为：const school = options<code>(直接等于配置对象)</code></p><hr><h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><p><strong>嵌套图示</strong></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612223240784.png" alt="image-20230612223240784"></p><blockquote><p>父与子的关系，<code>且只能是一层的嵌套</code></p></blockquote><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612224234089.png" alt="image-20230612224234089"></p><h4 id="总结-精髓"><a href="#总结-精髓" class="headerlink" title="总结(精髓)"></a>总结(精髓)</h4><blockquote><p>用法和正常的一样，</p><p>注意嵌套时的component要套谁</p><p>根据套的子级，正确使用template</p></blockquote><hr><h3 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h3><blockquote><p>构建的组件本质上是一个构造函数，功能与new Vue基本一样</p><p>vm与vc</p></blockquote><h4 id="组件本质"><a href="#组件本质" class="headerlink" title="组件本质"></a>组件本质</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612230442914.png" alt="image-20230612230442914"></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612231351738.png" alt="image-20230612231351738"></p><blockquote><p>就像是函数帮你生成一个实例对象，每次调用生成一个。</p><p><code>是构造函数</code></p></blockquote><h4 id="实际上结构"><a href="#实际上结构" class="headerlink" title="实际上结构"></a>实际上结构</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612231801594.png" alt="image-20230612231801594"></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612232101798.png" alt="image-20230612232101798"></p><blockquote><p>组件的结构</p></blockquote><h4 id="vm与vc的区别"><a href="#vm与vc的区别" class="headerlink" title="vm与vc的区别"></a>vm与vc的区别</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230612232822664.png" alt="image-20230612232822664"></p><ul><li>生成时，一个是new Vue生成,一个是new component</li><li>组件里面没有el(只能跟着大哥混)</li></ul><h3 id="内置关系"><a href="#内置关系" class="headerlink" title="内置关系"></a>内置关系</h3><h4 id="温顾原型对象"><a href="#温顾原型对象" class="headerlink" title="温顾原型对象"></a>温顾原型对象</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230613155751969.png" alt="image-20230613155751969"></p><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230613160025188.png" alt="image-20230613160025188"></p><blockquote><p>原型对象属性查找</p></blockquote><h4 id="Vue与VueComponent的关系"><a href="#Vue与VueComponent的关系" class="headerlink" title="Vue与VueComponent的关系"></a>Vue与VueComponent的关系</h4><p><img src="/2023/12/08/Vue%E5%9F%BA%E7%A1%80/image-20230613161537113.png" alt="image-20230613161537113"></p><h4 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h4><p>1.一个重要的内置关系：VueComponent.prototype.<strong>proto</strong> === Vue.prototype</p><p>2.为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</p><blockquote><p><code>配置Vue(vm)的原型属性时，组件实例对象(vc)也可以访问到(使用)</code></p></blockquote><hr><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><blockquote><p>一个.Vue文件，一个app.Vue,一个main.js,一个.html(注意引入顺序)</p></blockquote><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><p>1.引入组件</p><p>2.映射成标签</p><p>3.使用组件标签</p><blockquote><p>简简单单，但是使用模块时需要引入脚手架</p></blockquote><hr><h1 id="Vue-CLI-脚手架"><a href="#Vue-CLI-脚手架" class="headerlink" title="Vue-CLI 脚手架"></a>Vue-CLI 脚手架</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>判断推理</title>
      <link href="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/"/>
      <url>/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="行测复习重点"><a href="#行测复习重点" class="headerlink" title="行测复习重点"></a>行测复习重点</h1><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122160543768.png" alt="image-20231122160543768"></p><blockquote><p>其他的提升不明显，判断推理与资料分析立竿见影</p></blockquote><hr><h1 id="判断推理1"><a href="#判断推理1" class="headerlink" title="判断推理1"></a>判断推理1</h1><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122165226276.png" alt="image-20231122165226276"></p><blockquote><p>定义判断相对比较难</p><p>下一个定义：如太阳从西边升起，相当于</p><p>逻辑推理难</p></blockquote><p>1.题目数量都差不多，8-9.逻辑推理10个左右</p><hr><h2 id="1-图形推理"><a href="#1-图形推理" class="headerlink" title="1.图形推理"></a>1.图形推理</h2><h3 id="第一类"><a href="#第一类" class="headerlink" title="第一类"></a>第一类</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122165604649.png" alt="image-20231122165604649"></p><h4 id="一组图"><a href="#一组图" class="headerlink" title="一组图"></a>一组图</h4><p>一般按顺序，（少数跳着找）</p><h4 id="两组图"><a href="#两组图" class="headerlink" title="两组图"></a>两组图</h4><p>就是相互比较(对称、)</p><p>一组对应一组</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122170212224.png" alt="image-20231122170212224"></p><h4 id="三组图"><a href="#三组图" class="headerlink" title="三组图"></a>三组图</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122170008549.png" alt="image-20231122170008549"></p><p>剩下10%</p><p>竖着看、S型看、米字型看</p><h3 id="第二类"><a href="#第二类" class="headerlink" title="第二类"></a>第二类</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122170622771.png" alt="image-20231122170622771"></p><hr><h2 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h2><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231123152944351.png" alt="image-20231123152944351"></p><h3 id="1-位置关系"><a href="#1-位置关系" class="headerlink" title="1.位置关系"></a>1.位置关系</h3><h4 id="考点"><a href="#考点" class="headerlink" title="考点"></a><code>考点</code></h4><p>1.平移</p><p>2.旋转、反转</p><p>3.找不同，找规律（旋转而成）</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a><code>特点</code></h4><p>元素相同，看位置。</p><h4 id="1-平移"><a href="#1-平移" class="headerlink" title="1.平移"></a>1.平移</h4><p>1.最简单（旋转移动，对称，单个或多个元素固定的移动）</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122174709522.png" alt="image-20231122174709522"></p><p>两组的规律相似，但变化不同，这里从头跑</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122175809409.png" alt="image-20231122175809409"></p><p>超多个的移动，一般都是一个规律，这里折返跑</p><p>两组相同黑白元素，方向相反，一般都是旋转（因为对称第三个就返回原样了）</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122180327426.png" alt="image-20231122180327426"></p><p>两个旋转，但一个递增</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122181153125.png" alt="image-20231122181153125"></p><p>2.也有可能只是两个元素间的关系</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122173245240.png" alt="image-20231122173245240"></p><p>3.单个元素移动的数量递增</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122173757980.png" alt="image-20231122173757980"></p><h4 id="2-旋转、翻转"><a href="#2-旋转、翻转" class="headerlink" title="2.旋转、翻转"></a>2.旋转、翻转</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122181545803.png" alt="image-20231122181545803"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122181931800.png" alt="image-20231122181931800"></p><p>先旋转，后对称</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122183314606.png" alt="image-20231122183314606"></p><p>先左右翻，后上下翻</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231122185118250.png" alt="image-20231122185118250"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231123163836725.png" alt="image-20231123163836725"></p><hr><h3 id="2-样式规律"><a href="#2-样式规律" class="headerlink" title="2.样式规律"></a>2.样式规律</h3><p>大部分都是横着看，有时候会竖着看</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231123164658158.png" alt="image-20231123164658158"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231123165305362.png" alt="image-20231123165305362"></p><blockquote><p>考求异居多</p></blockquote><h4 id="考点-1"><a href="#考点-1" class="headerlink" title="考点"></a><code>考点</code></h4><p>1.重叠消融</p><p>2.黑白运算</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a><code>特点</code></h4><blockquote><p>元素相似，且部分会重复出现（线条，或者一些形状递增/减）</p></blockquote><h4 id="1-线条的相消"><a href="#1-线条的相消" class="headerlink" title="1.线条的相消"></a>1.线条的相消</h4><p>1.线条重复出现</p><blockquote><p>可能会出现旋转之后再相消的（位置规律和样式规律叠加）</p><p>或者出现先消再旋转</p></blockquote><p>如果要填两个的，那么很可能要满足横竖规则</p><p>2.只有内部的去同求异</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231123174312525.png" alt="image-20231123174312525"></p><hr><h4 id="2-黑白运算"><a href="#2-黑白运算" class="headerlink" title="2.黑白运算"></a>2.黑白运算</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231123174533446.png" alt="image-20231123174533446"></p><p><code>特点</code></p><p>黑块相同(移动)</p><p>黑块不同（黑白叠加运算）</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231123220938159.png" alt="image-20231123220938159"></p><hr><h3 id="3-属性规律"><a href="#3-属性规律" class="headerlink" title="3.属性规律"></a>3.属性规律</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231123222435214.png" alt="image-20231123222435214"></p><h4 id="1-对称性"><a href="#1-对称性" class="headerlink" title="1.对称性"></a>1.对称性</h4><p> 对称类型</p><p>对称方向</p><p>对称轴数量</p><blockquote><p>在对称的情况下，是否有对称抽</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231123231246805.png" alt="image-20231123231246805"></p><p>轴的数量累加</p><h4 id="2-曲直性"><a href="#2-曲直性" class="headerlink" title="2.曲直性"></a>2.曲直性</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124155208792.png" alt="image-20231124155208792"></p><p><code>特点</code></p><p>不相同也不相似，也不全对称</p><p>1.找同类、分类</p><p>全直，全曲</p><p>有曲有直</p><p>2.曲直变化</p><p>内曲外直或外曲内直</p><p>3.与旋转样式规律结合</p><hr><h4 id="3-开闭性"><a href="#3-开闭性" class="headerlink" title="3.开闭性"></a>3.开闭性</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124160518517.png" alt="image-20231124160518517"></p><p>可能会有面与面的连接关系（直接相连还是由线来连接）</p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124161532511.png" alt="image-20231124161532511"></p><hr><h3 id="4-数量规律"><a href="#4-数量规律" class="headerlink" title="4.数量规律"></a>4.数量规律</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124161835153.png" alt="image-20231124161835153"></p><blockquote><p>出现分类的题会比较多</p></blockquote><h4 id="1-点数量"><a href="#1-点数量" class="headerlink" title="1.点数量"></a>1.点数量</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124162049154.png" alt="image-20231124162049154"></p><p>具体到与圆的交点数量（每个图形上都有的图案）</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124162806735.png" alt="image-20231124162806735"></p><p>园内点的数量</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124164426587.png" alt="image-20231124164426587"></p><hr><h4 id="2-线数量"><a href="#2-线数量" class="headerlink" title="2.线数量"></a>2.线数量</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124164938971.png" alt="image-20231124164938971"></p><blockquote><p>区分与属性关系的对称、曲直、开闭</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124171621278.png" alt="image-20231124171621278"></p><p><code>更细考法</code>：曲线与直线存在固定差值 </p><p>第一条线与最后一条线是否垂直</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124172819097.png" alt="image-20231124172819097"></p><p>升级版（考虑线的方向）<img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124180124674.png" alt="image-20231124180124674"></p><p>汉子多考的是丿<img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124173846985.png" alt="image-20231124173846985"></p><p>点与边的求和分类</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124174616816.png" alt="image-20231124174616816"></p><p>线的移动</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124175446274.png" alt="image-20231124175446274"></p><blockquote><p>其实一组多个的图形一般都是规律变化的题</p></blockquote><hr><h4 id="2-2线的特殊考点（笔画）"><a href="#2-2线的特殊考点（笔画）" class="headerlink" title="2.2线的特殊考点（笔画）"></a>2.2线的特殊考点（笔画）</h4><blockquote><p>可以一笔完成</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124201736934.png" alt="image-20231124201736934"></p><p>笔画数</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124202951990.png" alt="image-20231124202951990"></p><p>常见笔画数</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231124203241199.png" alt="image-20231124203241199"></p><h4 id="2-3线总结"><a href="#2-3线总结" class="headerlink" title="2.3线总结"></a>2.3线总结</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231127204948483.png" alt="image-20231127204948483"></p><blockquote><p>不相同，也不相似</p></blockquote><h4 id="3-面数量"><a href="#3-面数量" class="headerlink" title="3.面数量"></a>3.面数量</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231127205156696.png" alt="image-20231127205156696"></p><p>一般来说，白色才是面</p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231127205343706.png" alt="image-20231127205343706"></p><p>面数量结合角的数量</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231127205730627.png" alt="image-20231127205730627"></p><p>面数量结合对称轴</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231127211155168.png" alt="image-20231127211155168"></p><p>最大面与最小面的关系</p><p> <img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231127212327110.png" alt="image-20231127212327110"></p><p>面与曲直关系</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231127212902144.png" alt="image-20231127212902144"></p><p>黑白面积</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231127213703719.png" alt="image-20231127213703719"></p><p>数字里面面的数量<img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231127214629587.png" alt="image-20231127214629587"></p><h4 id="4-素数量"><a href="#4-素数量" class="headerlink" title="4.素数量"></a>4.素数量</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231127215826337.png" alt="image-20231127215826337"></p><blockquote><p>元素数量</p></blockquote><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><p>元素种类</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128172421769.png" alt="image-20231128172421769"></p><blockquote><p>字母种类</p></blockquote><hr><h5 id="一组"><a href="#一组" class="headerlink" title="一组"></a>一组</h5><p>元素替换</p><blockquote><p>指的是一个圆等于多少个三角形，一般元素种类只有两种</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128170457607.png" alt="image-20231128170457607"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128181006965.png" alt="image-20231128181006965"></p><p>普通变化规律</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128170736320.png" alt="image-20231128170736320"></p><p>元素保留</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128175317985.png" alt="image-20231128175317985"></p><blockquote><p>元素保留一个</p></blockquote><p>元素比规律变化</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128180019974.png" alt="image-20231128180019974"></p><hr><h5 id="两组"><a href="#两组" class="headerlink" title="两组"></a>两组</h5><p>元素规律</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128180733383.png" alt="image-20231128180733383"></p><blockquote><p>满足乘除法</p></blockquote><hr><h4 id="4-2部分素数量"><a href="#4-2部分素数量" class="headerlink" title="4.2部分素数量"></a>4.2部分素数量</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128181331615.png" alt="image-20231128181331615"></p><blockquote><p>可能会出现和位置关系&amp;样式规律黑白运算相似(因为整体性，在整体时元素不同)</p></blockquote><hr><h5 id="一组-1"><a href="#一组-1" class="headerlink" title="一组"></a>一组</h5><p>规律</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128181853020.png" alt="image-20231128181853020"></p><blockquote><p>黑色为一个整体数量</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128183333615.png" alt="image-20231128183333615"></p><hr><h5 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h5><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128182118262.png" alt="image-20231128182118262"></p><p>黑色数量</p><hr><h5 id="两组-1"><a href="#两组-1" class="headerlink" title="两组"></a>两组</h5><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128182715530.png" alt="image-20231128182715530"></p><p>黑色为整体，当明显不适合平移和黑白运算时，考虑</p><hr><h4 id="4-3角数量"><a href="#4-3角数量" class="headerlink" title="4.3角数量"></a>4.3角数量</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128183652759.png" alt="image-20231128183652759"></p><p> <img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128184031045.png" alt="image-20231128184031045"></p><p>全部角、锐角、直角</p><hr><h3 id="4-2总结生活化图形"><a href="#4-2总结生活化图形" class="headerlink" title="4.2总结生活化图形"></a>4.2总结生活化图形</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128183114313.png" alt="image-20231128183114313"></p><h4 id="整体块"><a href="#整体块" class="headerlink" title="整体块"></a>整体块</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128183529825.png" alt="image-20231128183529825"></p><hr><h3 id="4-3总结数量规律"><a href="#4-3总结数量规律" class="headerlink" title="4.3总结数量规律"></a>4.3总结数量规律</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231128185347638.png" alt="image-20231128185347638"></p><hr><h3 id="5-特殊规律"><a href="#5-特殊规律" class="headerlink" title="5.特殊规律"></a>5.特殊规律</h3><blockquote><p>大多数是分组</p></blockquote><h4 id="1-点"><a href="#1-点" class="headerlink" title="1.点"></a>1.点</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129001435028.png" alt="image-20231129001435028"></p><h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129001615836.png" alt="image-20231129001615836"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129001918199.png" alt="image-20231129001918199"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129002127232.png" alt="image-20231129002127232"></p><blockquote><p>常见，点与面，点与线之间的关系。</p><p>对应关系，或者连成线垂直平行关系</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129002603986.png" alt="image-20231129002603986"></p><blockquote><p>又是一组对应关系</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129002935531.png" alt="image-20231129002935531"></p><blockquote><p>点的位置</p></blockquote><hr><h4 id="2-箭头"><a href="#2-箭头" class="headerlink" title="2.箭头"></a>2.箭头</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129001501266.png" alt="image-20231129001501266"></p><h5 id="分组-1"><a href="#分组-1" class="headerlink" title="分组"></a>分组</h5><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129002329931.png" alt="image-20231129002329931"></p><hr><h4 id="3-图形间关系"><a href="#3-图形间关系" class="headerlink" title="3.图形间关系"></a>3.图形间关系</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129003540471.png" alt="image-20231129003540471"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129003631646.png" alt="image-20231129003631646"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129003730866.png" alt="image-20231129003730866"></p><p>相交于边</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129003911955.png" alt="image-20231129003911955"></p><p>边的包含关系</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129004549257.png" alt="image-20231129004549257"></p><p>切点数量</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129004745572.png" alt="image-20231129004745572"></p><p>相连方式</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129004958410.png" alt="image-20231129004958410"></p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129005022921.png" alt="image-20231129005022921"></p><h4 id="4-其它规律"><a href="#4-其它规律" class="headerlink" title="4.其它规律"></a>4.其它规律</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129005142097.png" alt="image-20231129005142097"></p><p>汉字字母优先笔画</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129010016025.png" alt="image-20231129010016025"></p><p>行列相等</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129010334641.png" alt="image-20231129010334641"></p><hr><h2 id="2-图形推理2"><a href="#2-图形推理2" class="headerlink" title="2.图形推理2"></a>2.图形推理2</h2><h3 id="考点分析-1"><a href="#考点分析-1" class="headerlink" title="考点分析"></a>考点分析</h3><h4 id="六面体"><a href="#六面体" class="headerlink" title="六面体"></a>六面体</h4><p>相对面</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129161130380.png" alt="image-20231129161130380"></p><blockquote><p>隔一个</p></blockquote><p>相邻面</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129161537862.png" alt="image-20231129161537862"></p><p>方向明显的图形</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129161741332.png" alt="image-20231129161741332"></p><p>相邻面再相邻只有两个面，且这两个面是对面</p><p>对面的相邻面有四个</p><p><code>直线为相邻线</code></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129165501048.png" alt="image-20231129165501048"></p><p>顺时针方向不变</p><blockquote><p>找到一个标记点，顺时针用来确定图像的方向</p></blockquote><h5 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h5><blockquote><p>无方向时还是顺时针好用</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129211220203.png" alt="image-20231129211220203"></p><p>使用顺时针法也可以确定某些面的方向问题</p><hr><h4 id="四面体"><a href="#四面体" class="headerlink" title="四面体"></a>四面体</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129211726537.png" alt="image-20231129211726537"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129212304558.png" alt="image-20231129212304558"></p><blockquote><p>左右即为相邻面，两边同一直线也是共边</p></blockquote><hr><h4 id="八面体"><a href="#八面体" class="headerlink" title="八面体"></a>八面体</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129213053110.png" alt="image-20231129213053110"></p><p>一点带四面，每个面只相邻一次</p><hr><h3 id="透视图"><a href="#透视图" class="headerlink" title="透视图"></a>透视图</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129215332572.png" alt="image-20231129215332572"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129215542769.png" alt="image-20231129215542769"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129215759141.png" alt="image-20231129215759141"></p><p>考试图一图三，一般只出图三</p><p>组成格子</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129221114402.png" alt="image-20231129221114402"></p><blockquote><p>还是有限考虑格子数</p></blockquote><hr><h3 id="截面图"><a href="#截面图" class="headerlink" title="截面图"></a>截面图</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129223204043.png" alt="image-20231129223204043"></p><blockquote><p>是否为截面</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129223508703.png" alt="image-20231129223508703"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129223629613.png" alt="image-20231129223629613"></p><p>梯形得斜着切</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129225450191.png" alt="image-20231129225450191"></p><blockquote><p>截面图，空的一般没有线</p></blockquote><hr><h3 id="立体拼合"><a href="#立体拼合" class="headerlink" title="立体拼合"></a>立体拼合</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129225725272.png" alt="image-20231129225725272"></p><hr><h1 id="判断推理2"><a href="#判断推理2" class="headerlink" title="判断推理2"></a>判断推理2</h1><h2 id="1-类比推理"><a href="#1-类比推理" class="headerlink" title="1.类比推理"></a>1.类比推理</h2><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129231228727.png" alt="image-20231129231228727"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129231243509.png" alt="image-20231129231243509"></p><h3 id="考法"><a href="#考法" class="headerlink" title="考法"></a>考法</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129231403266.png" alt="image-20231129231403266"></p><h3 id="1-语义关系"><a href="#1-语义关系" class="headerlink" title="1.语义关系"></a>1.语义关系</h3><h4 id="1-正反同义词"><a href="#1-正反同义词" class="headerlink" title="1.正反同义词"></a>1.正反同义词</h4><h5 id="一步考虑"><a href="#一步考虑" class="headerlink" title="一步考虑"></a>一步考虑</h5><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129231538445.png" alt="image-20231129231538445"></p><h5 id="进阶考虑"><a href="#进阶考虑" class="headerlink" title="进阶考虑"></a>进阶考虑</h5><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129231633607.png" alt="image-20231129231633607"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129231904524.png" alt="image-20231129231904524"></p><blockquote><p>景色不称为反义词</p></blockquote><p>词间关系</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129232115399.png" alt="image-20231129232115399"></p><blockquote><p>安分守己与好高骛远不是反义</p><p>褒贬位置</p></blockquote><p>词内关系</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129232436130.png" alt="image-20231129232436130"></p><hr><h4 id="2-比喻、象征"><a href="#2-比喻、象征" class="headerlink" title="2.比喻、象征"></a>2.比喻、象征</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129232648918.png" alt="image-20231129232648918"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129232830768.png" alt="image-20231129232830768"></p><p>相当于</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129232913803.png" alt="image-20231129232913803"></p><blockquote><p>有眉目，有头绪</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129233418671.png" alt="image-20231129233418671"></p><p>二级辨析</p><p>褒贬</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129233635583.png" alt="image-20231129233635583"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129233834071.png" alt="image-20231129233834071"></p><p>词性</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129234040079.png" alt="image-20231129234040079"></p><blockquote><p>布衣=百姓；心腹=信任的人；桎=刑拘</p></blockquote><hr><h3 id="2-逻辑关系"><a href="#2-逻辑关系" class="headerlink" title="2.逻辑关系"></a>2.逻辑关系</h3><h4 id="1-全同"><a href="#1-全同" class="headerlink" title="1.全同"></a>1.全同</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129234622717.png" alt="image-20231129234622717"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129234745156.png" alt="image-20231129234745156"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129234954839.png" alt="image-20231129234954839"></p><blockquote><p>春秋；大学、中庸、论语、孟子</p><p>宫商角徵羽</p><p>黑</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231129235632811.png" alt="image-20231129235632811"></p><hr><h4 id="2-并列"><a href="#2-并列" class="headerlink" title="2.并列"></a>2.并列</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130165753276.png" alt="image-20231130165753276"></p><h5 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h5><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130170014927.png" alt="image-20231130170014927"></p><h5 id="并列"><a href="#并列" class="headerlink" title="并列"></a>并列</h5><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130170308070.png" alt="image-20231130170308070"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130170449885.png" alt="image-20231130170449885"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130170736972.png" alt="image-20231130170736972"></p><blockquote><p>并矛盾包含全部，并反只是两个不同(并不指一定相反)</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130171037158.png" alt="image-20231130171037158"></p><blockquote><p>蹴鞠是一种球类运动</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130171446538.png" alt="image-20231130171446538"></p><hr><h4 id="3-包容"><a href="#3-包容" class="headerlink" title="3.包容"></a>3.包容</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130171600708.png" alt="image-20231130171600708"></p><h5 id="种属"><a href="#种属" class="headerlink" title="种属"></a>种属</h5><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130171810238.png" alt="image-20231130171810238"></p><blockquote><p>人员是组成的</p></blockquote><h5 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h5><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130172004445.png" alt="image-20231130172004445"></p><h5 id="组成加种属"><a href="#组成加种属" class="headerlink" title="组成加种属"></a>组成加种属</h5><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130172415182.png" alt="image-20231130172415182"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130173106577.png" alt="image-20231130173106577"></p><blockquote><p>稻穗包含稻谷</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130173431982.png" alt="image-20231130173431982"></p><h4 id="4-交叉关系"><a href="#4-交叉关系" class="headerlink" title="4.交叉关系"></a>4.交叉关系</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130175437347.png" alt="image-20231130175437347"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130175733920.png" alt="image-20231130175733920"></p><blockquote><p>楼房不适合故宫</p></blockquote><hr><h4 id="5-对应关系"><a href="#5-对应关系" class="headerlink" title="5.对应关系"></a>5.对应关系</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130180006956.png" alt="image-20231130180006956"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130183805186.png" alt="image-20231130183805186"></p><blockquote><p>淬铁、雕琢玉</p></blockquote><h5 id="二级辨析"><a href="#二级辨析" class="headerlink" title="二级辨析"></a>二级辨析</h5><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130184148257.png" alt="image-20231130184148257"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130184655944.png" alt="image-20231130184655944"></p><blockquote><p>毛线原材料是羊毛，毛衣保暖</p><p>剪刀裁剪更合适</p></blockquote><h5 id="特殊辨析"><a href="#特殊辨析" class="headerlink" title="特殊辨析"></a>特殊辨析</h5><p>次要功能</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130185050477.png" alt="image-20231130185050477"></p><p>必然属性</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130185354958.png" alt="image-20231130185354958"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130185708819.png" alt="image-20231130185708819"></p><h5 id="特殊"><a href="#特殊" class="headerlink" title="特殊"></a>特殊</h5><p>时间/流程顺序</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130190045589.png" alt="image-20231130190045589"></p><p>主体不同</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130210527867.png" alt="image-20231130210527867"></p><p>依据</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130210931811.png" alt="image-20231130210931811"></p><h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130211456905.png" alt="image-20231130211456905"></p><hr><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130212100325.png" alt="image-20231130212100325"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130212225971.png" alt="image-20231130212225971"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130212550351.png" alt="image-20231130212550351"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130212801567.png" alt="image-20231130212801567"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130213718174.png" alt="image-20231130213718174"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130214001764.png" alt="image-20231130214001764"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130214236326.png" alt="image-20231130214236326"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130214428616.png" alt="image-20231130214428616"></p><hr><h2 id="2-类比推理2"><a href="#2-类比推理2" class="headerlink" title="2.类比推理2"></a>2.类比推理2</h2><h3 id="1-语法关系"><a href="#1-语法关系" class="headerlink" title="1.语法关系"></a>1.语法关系</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130214621184.png" alt="image-20231130214621184"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130223608685.png" alt="image-20231130223608685"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130223936199.png" alt="image-20231130223936199"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130225845932.png" alt="image-20231130225845932"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130230037070.png" alt="image-20231130230037070"></p><hr><h1 id="判断推理3"><a href="#判断推理3" class="headerlink" title="判断推理3"></a>判断推理3</h1><h2 id="定义判断"><a href="#定义判断" class="headerlink" title="定义判断"></a>定义判断</h2><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130230237557.png" alt="image-20231130230237557"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231130230753906.png" alt="image-20231130230753906"></p><h4 id="主客体"><a href="#主客体" class="headerlink" title="主客体"></a>主客体</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201170157241.png" alt="image-20231201170157241"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201170853389.png" alt="image-20231201170853389"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201171305133.png" alt="image-20231201171305133"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201171648158.png" alt="image-20231201171648158"></p><hr><h4 id="关键句"><a href="#关键句" class="headerlink" title="关键句"></a>关键句</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201171823652.png" alt="image-20231201171823652"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201173121979.png" alt="image-20231201173121979"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201174923011.png" alt="image-20231201174923011"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201175252182.png" alt="image-20231201175252182"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201175721527.png" alt="image-20231201175721527"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201182916477.png" alt="image-20231201182916477"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201185132880.png" alt="image-20231201185132880"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201211413300.png" alt="image-20231201211413300"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201211915324.png" alt="image-20231201211915324"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201212454541.png" alt="image-20231201212454541"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201212931876.png" alt="image-20231201212931876"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201213417836.png" alt="image-20231201213417836"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201214442465.png" alt="image-20231201214442465"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201215257935.png" alt="image-20231201215257935"></p><hr><h4 id="多定义"><a href="#多定义" class="headerlink" title="多定义"></a>多定义</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201215559713.png" alt="image-20231201215559713"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201220503180.png" alt="image-20231201220503180"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201221111545.png" alt="image-20231201221111545"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201221422775.png" alt="image-20231201221422775"></p><hr><h4 id="同构选项"><a href="#同构选项" class="headerlink" title="同构选项"></a>同构选项</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231201221648346.png" alt="image-20231201221648346"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231202201817989.png" alt="image-20231202201817989"></p><blockquote><p>沉锚效应，先给对面下了一个锚</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231202202219908.png" alt="image-20231202202219908"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231202202821625.png" alt="image-20231202202821625"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231202203029726.png" alt="image-20231202203029726"></p><h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231202203127836.png" alt="image-20231202203127836"></p><hr><h1 id="判断推理4"><a href="#判断推理4" class="headerlink" title="判断推理4"></a>判断推理4</h1><h2 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h2><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231202203754796.png" alt="image-20231202203754796"></p><hr><h3 id="翻译推理"><a href="#翻译推理" class="headerlink" title="翻译推理"></a>翻译推理</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231202204131588.png" alt="image-20231202204131588"></p><p>思路</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231202204225965.png" alt="image-20231202204225965"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231202204312773.png" alt="image-20231202204312773"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231202204450274.png" alt="image-20231202204450274"></p><p>不能随便推</p><h4 id="前推后"><a href="#前推后" class="headerlink" title="前推后"></a>前推后</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231202204613869.png" alt="image-20231202204613869"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231202205501110.png" alt="image-20231202205501110"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231202205745139.png" alt="image-20231202205745139"></p><p>只有逆否等价</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231202211751732.png" alt="image-20231202211751732"></p><p>a→b相当于否b推否a</p><hr><h4 id="后推前"><a href="#后推前" class="headerlink" title="后推前"></a>后推前</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231204173525880.png" alt="image-20231204173525880"></p><blockquote><p>如果我来上课，那一定是刘老师讲课</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231204173535084.png" alt="image-20231204173535084"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231204181406524.png" alt="image-20231204181406524"></p><p>必不可少的放在后面，<code>同样满足否后推否前</code></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231204212820539.png" alt="image-20231204212820539"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231204214130755.png" alt="image-20231204214130755"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231204220123137.png" alt="image-20231204220123137"></p><blockquote><p>明白关系词，明白推理关系</p></blockquote><hr><h4 id="且和或"><a href="#且和或" class="headerlink" title="且和或"></a>且和或</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231204221110333.png" alt="image-20231204221110333"></p><p>关联词</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231204221334725.png" alt="image-20231204221334725"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205144001710.png" alt="image-20231205144001710"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205144252352.png" alt="image-20231205144252352"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205145320881.png" alt="image-20231205145320881"></p><blockquote><p>随便否定一个</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205145850679.png" alt="image-20231205145850679"></p><blockquote><p>且，两个都是成立的，可以只说一个</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205150059229.png" alt="image-20231205150059229"></p></blockquote><h3 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205150830085.png" alt="image-20231205150830085"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205150853742.png" alt="image-20231205150853742"></p><hr><h2 id="逻辑判断2"><a href="#逻辑判断2" class="headerlink" title="逻辑判断2"></a>逻辑判断2</h2><h3 id="组合排序"><a href="#组合排序" class="headerlink" title="组合排序"></a>组合排序</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205151038548.png" alt="image-20231205151038548"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205152004026.png" alt="image-20231205152004026"></p><blockquote><p>不确定：只对了一半</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205152537455.png" alt="image-20231205152537455"></p><p>不确定，可以使用代入法更快。排除法还要多排除一点</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205153234467.png" alt="image-20231205153234467"></p><blockquote><p>明显的选项多的时候，代入法更快</p></blockquote><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205160257970.png" alt="image-20231205160257970"></p><blockquote><p>出现最多，限制更多</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205161223220.png" alt="image-20231205161223220"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205161336620.png" alt="image-20231205161336620"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205161727747.png" alt="image-20231205161727747"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205170214546.png" alt="image-20231205170214546"></p><blockquote><p>找切入点 </p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205171234243.png" alt="image-20231205171234243"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205172817198.png" alt="image-20231205172817198"></p><hr><h3 id="组合排序2"><a href="#组合排序2" class="headerlink" title="组合排序2"></a>组合排序2</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205180849457.png" alt="image-20231205180849457"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205182304213.png" alt="image-20231205182304213"></p><blockquote><p>挑条件多的选项入手</p></blockquote><hr><h3 id="日常结论"><a href="#日常结论" class="headerlink" title="日常结论"></a>日常结论</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205183349225.png" alt="image-20231205183349225"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205183433122.png" alt="image-20231205183433122"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205183928765.png" alt="image-20231205183928765"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205184610129.png" alt="image-20231205184610129"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205223938712.png" alt="image-20231205223938712"></p><hr><h2 id="逻辑论证"><a href="#逻辑论证" class="headerlink" title="逻辑论证"></a>逻辑论证</h2><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205231413842.png" alt="image-20231205231413842"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205231621361.png" alt="image-20231205231621361"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205232048890.png" alt="image-20231205232048890"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205232219760.png" alt="image-20231205232219760"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205232746922.png" alt="image-20231205232746922"></p><blockquote><p>论据不能支撑(论证)论点</p></blockquote><h3 id="1-找论点"><a href="#1-找论点" class="headerlink" title="1.找论点"></a>1.找论点</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205232954654.png" alt="image-20231205232954654"></p><hr><h3 id="加强类"><a href="#加强类" class="headerlink" title="加强类"></a>加强类</h3><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231205233227360.png" alt="image-20231205233227360"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206171856851.png" alt="image-20231206171856851"></p><blockquote><p>通过论据补充，论证手段来加强论点</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206171947583.png" alt="image-20231206171947583"></p><p>论证等于搭桥</p><h4 id="搭桥"><a href="#搭桥" class="headerlink" title="搭桥"></a>搭桥</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206172423838.png" alt="image-20231206172423838"></p><blockquote><p>虽然不确定，但是搭桥成功了</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206172844133.png" alt="image-20231206172844133"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206173606692.png" alt="image-20231206173606692"></p><blockquote><p>一般有两个的目标，答案中也有两个目标</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206175617722.png" alt="image-20231206175617722"></p><blockquote><p>凡是，必定：前推后</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206175915608.png" alt="image-20231206175915608"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206181206956.png" alt="image-20231206181206956"></p><blockquote><p>不确定基本成为不了论据或者论证(苍白无力)</p></blockquote><hr><p>没有搭桥项</p><h4 id="补充论据"><a href="#补充论据" class="headerlink" title="补充论据"></a>补充论据</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206181439659.png" alt="image-20231206181439659"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206182534977.png" alt="image-20231206182534977"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206182704720.png" alt="image-20231206182704720"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206183956405.png" alt="image-20231206183956405"></p><blockquote><p>一般选项比较容易比较出来</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206215159944.png" alt="image-20231206215159944"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206215751650.png" alt="image-20231206215751650"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231206220421519.png" alt="image-20231206220421519"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207001155875.png" alt="image-20231207001155875"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207001549857.png" alt="image-20231207001549857"></p><blockquote><p>d为类比，非常之弱</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207002116288.png" alt="image-20231207002116288"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207002358098.png" alt="image-20231207002358098"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207004531634.png" alt="image-20231207004531634"></p><hr><h3 id="削弱类"><a href="#削弱类" class="headerlink" title="削弱类"></a>削弱类</h3><h4 id="1-否定论点"><a href="#1-否定论点" class="headerlink" title="1.否定论点"></a>1.否定论点</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207163257505.png" alt="image-20231207163257505"></p><blockquote><p>结论一般是：什么是什么</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207163704592.png" alt="image-20231207163704592"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207163936876.png" alt="image-20231207163936876"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207164243725.png" alt="image-20231207164243725"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207165523893.png" alt="image-20231207165523893"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207165642199.png" alt="image-20231207165642199"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207170036781.png" alt="image-20231207170036781"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207172236092.png" alt="image-20231207172236092"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207172716428.png" alt="image-20231207172716428"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207173510118.png" alt="image-20231207173510118"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207173928596.png" alt="image-20231207173928596"></p><hr><h4 id="2-拆桥"><a href="#2-拆桥" class="headerlink" title="2.拆桥"></a>2.拆桥</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207174152582.png" alt="image-20231207174152582"></p><blockquote><p>结论一般是：因为什么，所以什么</p></blockquote><p>如闻不到，所以甲醛不超标</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207174636103.png" alt="image-20231207174636103"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207174902471.png" alt="image-20231207174902471"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207175110492.png" alt="image-20231207175110492"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207175651684.png" alt="image-20231207175651684"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207180101463.png" alt="image-20231207180101463"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207182246365.png" alt="image-20231207182246365"></p><hr><h4 id="3-否定论据"><a href="#3-否定论据" class="headerlink" title="3.否定论据"></a>3.否定论据</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207200603464.png" alt="image-20231207200603464"></p><blockquote><p>否定了依据</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207201111457.png" alt="image-20231207201111457"></p><p>另有他因</p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207202450105.png" alt="image-20231207202450105"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207203700863.png" alt="image-20231207203700863"></p><hr><h2 id="总结论证"><a href="#总结论证" class="headerlink" title="总结论证"></a>总结论证</h2><blockquote><p>一般题目里面不会出现两个非常强烈的选项</p></blockquote><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207203957754.png" alt="image-20231207203957754"></p><hr><h2 id="真假推理"><a href="#真假推理" class="headerlink" title="真假推理"></a>真假推理</h2><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207220004009.png" alt="image-20231207220004009"></p><h4 id="找矛盾"><a href="#找矛盾" class="headerlink" title="找矛盾"></a>找矛盾</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207221017583.png" alt="image-20231207221017583"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207221318845.png" alt="image-20231207221318845"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207221503604.png" alt="image-20231207221503604"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207221902462.png" alt="image-20231207221902462"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207222316288.png" alt="image-20231207222316288"></p><h4 id="矛盾关系"><a href="#矛盾关系" class="headerlink" title="矛盾关系"></a>矛盾关系</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207222439627.png" alt="image-20231207222439627"></p><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207224132608.png" alt="image-20231207224132608"></p><blockquote><p>最后证实，在箭头下的关系，对真假没有判定，<code>因为有如果这个前提</code></p></blockquote><hr><h4 id="反对关系"><a href="#反对关系" class="headerlink" title="反对关系"></a>反对关系</h4><p><img src="/2023/12/08/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/image-20231207231817974.png" alt="image-20231207231817974"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库第二篇</title>
      <link href="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/"/>
      <url>/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="概念与作用"><a href="#概念与作用" class="headerlink" title="概念与作用"></a>概念与作用</h2><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328153731919.png" alt="image-20230328153731919"></p><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328153756627.png" alt="image-20230328153756627"></p><blockquote><p>作用是一个路由，一般用于返回json文件，</p></blockquote><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328153915238.png" alt="image-20230328153915238"></p><blockquote><p>后端开发，前端调用</p></blockquote><hr><h1 id="restful-API"><a href="#restful-API" class="headerlink" title="restful API"></a>restful API</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><blockquote><p>设计<code>准则</code>，用不同动词表达不同的请求<code>(特殊风格的接口)</code></p></blockquote><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328154103523.png" alt="image-20230328154103523"></p><blockquote><p>路径当中不能有动词</p></blockquote><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328154255707.png" alt="image-20230328154255707"></p><blockquote><p>严格统一方法与操作，还要注意id标识</p><p>状态码也要正确统一</p></blockquote><h2 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h2><blockquote><p><code>快速搭建一个restful</code></p></blockquote><h3 id="简述-1"><a href="#简述-1" class="headerlink" title="简述"></a>简述</h3><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328213024906.png" alt="image-20230328213024906"></p><blockquote><p><code>要在json文件的文件夹下运行</code>,监视</p></blockquote><hr><h1 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h1><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><blockquote><p>测试创建的接口效果，返回一个接口(url)给前端使用该功能</p></blockquote><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328163328694.png" alt="image-20230328163328694"></p><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328163554724.png" alt="image-20230328163554724"></p><h2 id="apipost-常用"><a href="#apipost-常用" class="headerlink" title="apipost(常用)"></a>apipost(常用)</h2><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><p><strong>1.请求体设置</strong></p><blockquote><p>可以将请求体信息响应给服务端修改json文件内容</p></blockquote><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328214520328.png" alt="image-20230328214520328"></p><blockquote><p>API接口，就是一个路由规则</p></blockquote><blockquote><p>响应信息可以通过接口响应一个json文件，不用再通过ejs到html页面上响应了</p></blockquote><p><strong>2.通过命令得到想要的结果</strong></p><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328235639434.png" alt="image-20230328235639434"></p><blockquote><p>因为用了json-server创建了restgulAPI风格，所以命令要正确</p></blockquote><h3 id="通过文件夹设置通用参数"><a href="#通过文件夹设置通用参数" class="headerlink" title="通过文件夹设置通用参数"></a>通过文件夹设置通用参数</h3><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328232436713.png" alt="image-20230328232436713"></p><p><strong><code>发送请求后</code>，效果如下</strong></p><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328232356776.png" alt="image-20230328232356776"></p><blockquote><p>用于添加请求头等等</p></blockquote><h3 id="文档设置"><a href="#文档设置" class="headerlink" title="文档设置"></a>文档设置</h3><h4 id="设置关键字-amp-查询字符串"><a href="#设置关键字-amp-查询字符串" class="headerlink" title="设置关键字&amp;查询字符串"></a>设置关键字&amp;查询字符串</h4><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328234023208.png" alt="image-20230328234023208"></p><h4 id="设置响应示例"><a href="#设置响应示例" class="headerlink" title="设置响应示例"></a>设置响应示例</h4><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328234051594.png" alt="image-20230328234051594"></p><h3 id="最后分享接口给前端使用"><a href="#最后分享接口给前端使用" class="headerlink" title="最后分享接口给前端使用"></a>最后分享接口给前端使用</h3><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328234625398.png" alt="image-20230328234625398"></p><blockquote><p>根据端口实现想要的功能</p></blockquote><h2 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h2><blockquote><p>使用起来差不多</p></blockquote><h1 id="记账本结合API"><a href="#记账本结合API" class="headerlink" title="记账本结合API"></a>记账本结合API</h1><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230329151815586.png" alt="image-20230329151815586"></p><h2 id="读取账本"><a href="#读取账本" class="headerlink" title="读取账本"></a>读取账本</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取集合信息</span></span><br><span class="line"> <span class="title class_">AccountModel</span>.<span class="title function_">find</span>().<span class="title function_">sort</span>(&#123;<span class="attr">time</span>:-<span class="number">1</span>&#125;).<span class="title function_">exec</span>(<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (err) &#123;</span><br><span class="line">     res.<span class="title function_">json</span>(&#123;</span><br><span class="line">       <span class="attr">code</span>:<span class="string">&#x27;1001&#x27;</span>,</span><br><span class="line">       <span class="attr">msg</span>: <span class="string">&#x27;读取失败~~&#x27;</span>,</span><br><span class="line">       <span class="attr">data</span>:<span class="literal">null</span></span><br><span class="line">   &#125;)</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   res.<span class="title function_">json</span>(&#123;</span><br><span class="line">       <span class="comment">//响应编号</span></span><br><span class="line">       <span class="attr">code</span>: <span class="string">&#x27;0000&#x27;</span>,</span><br><span class="line">       <span class="comment">//响应信息</span></span><br><span class="line">       <span class="attr">msg</span>: <span class="string">&#x27;读取成功&#x27;</span>,</span><br><span class="line">       <span class="comment">//响应数据</span></span><br><span class="line">       <span class="attr">data</span>: data</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>返回json文件，给前端使用(处理)</p></blockquote><h2 id="新增账单"><a href="#新增账单" class="headerlink" title="新增账单"></a>新增账单</h2><blockquote><p>方法相同，可以通过apipost,返回一个json类型的信息</p></blockquote><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230329211415940.png" alt="image-20230329211415940"></p><blockquote><p><code>required</code>，之前漏了ed,注意</p></blockquote><p>在此过程中，可以通过表单验证实现错误问题精准反馈</p><h2 id="删除账单"><a href="#删除账单" class="headerlink" title="删除账单"></a>删除账单</h2><blockquote><p>用删除替换掉</p></blockquote><h2 id="查询单个账单"><a href="#查询单个账单" class="headerlink" title="查询单个账单"></a>查询单个账单</h2><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230329222731945.png" alt="image-20230329222731945"></p><blockquote><p>均是通过id获取对应的信息</p></blockquote><h2 id="更新单个账单"><a href="#更新单个账单" class="headerlink" title="更新单个账单"></a>更新单个账单</h2><blockquote><p>目前回调地狱，(回调套回调)</p></blockquote><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230329230008874.png" alt="image-20230329230008874"></p><blockquote><p>在执行updataOne之前已经将信息送到req.body上面了</p></blockquote><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230329230413749.png" alt="image-20230329230413749"></p><blockquote><p>这里是新的内容的意思</p></blockquote><h1 id="会话控制"><a href="#会话控制" class="headerlink" title="会话控制"></a>会话控制</h1><blockquote><p>用于限制访问、操作权限的吧</p></blockquote><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328164000472.png" alt="image-20230328164000472"></p><blockquote><p>http无法区分用户</p></blockquote><h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328164412532.png" alt="image-20230328164412532"></p><blockquote><p>就是一小块数据</p></blockquote><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328164422312.png" alt="image-20230328164422312"></p><blockquote><p>键名(id信息)||键值…(用户信息)</p></blockquote><p>放在cookie请求头当中</p><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328164648444.png" alt="image-20230328164648444"></p><blockquote><p>通过识别id，知道什么要用的数据(账号信息),</p></blockquote><h3 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h3><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328165309094.png" alt="image-20230328165309094"></p><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230330153514833.png" alt="image-20230330153514833"></p><h3 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h3><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328165623941.png" alt="image-20230328165623941"></p><h3 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h3><blockquote><p>npm i cookie-parser</p><p>const cookieParser = require(‘cookie-parser’)</p></blockquote><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328165807462.png" alt="image-20230328165807462"></p><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230330145859428.png" alt="image-20230330145859428"></p><hr><h1 id="session"><a href="#session" class="headerlink" title="session"></a>session</h1><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328165909075.png" alt="image-20230328165909075"></p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328170157038.png" alt="image-20230328170157038"></p><p>下次识别id，知道用户的访问</p><blockquote><p>储存信息，返回id</p></blockquote><h4 id="session信息"><a href="#session信息" class="headerlink" title="session信息"></a>session信息</h4><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230328170616348.png" alt="image-20230328170616348"></p><blockquote><p>通过id，扣钱</p></blockquote><h3 id="session中间件"><a href="#session中间件" class="headerlink" title="session中间件"></a>session中间件</h3><blockquote><p>npm i express-session  connect-mongo</p></blockquote><p>第一个是session在express中使用，第二个是帮助连接mongod数据库，帮助将第一个包的信息存进数据库里面,<code>第一个包默认存在内存里</code></p><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230330180232068.png" alt="image-20230330180232068"></p><h4 id="cookie的设置"><a href="#cookie的设置" class="headerlink" title="cookie的设置"></a>cookie的设置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cookie</span>: &#123;</span><br><span class="line">        <span class="attr">httpOnly</span>: <span class="literal">true</span>, <span class="comment">// 开启后前端无法通过 JS 操作，设置为只能传输使用</span></span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">60</span> <span class="comment">// 这一条 是控制 sessionID 的过期时间的！！！</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230330161405034.png" alt="image-20230330161405034"></p><blockquote><p>开启后前端无法通过 JS 操作(document.cookie)，设置为只能传输使用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 session</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">query</span>.<span class="property">username</span> === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; req.<span class="property">query</span>.<span class="property">password</span> === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">//设置session</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="property">username</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">uid</span> = <span class="string">&#x27;258aefccc&#x27;</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;登录成功&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230330162314669.png" alt="image-20230330162314669"></p><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230330162537216.png" alt="image-20230330162537216"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取 session</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/cart&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;session的信息&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">session</span>.<span class="property">username</span>);</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">`你好 <span class="subst">$&#123;req.session.username&#125;</span>`</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;登录 注册&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>//中间件已经完成了将数据库的usernamd送给session</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//销毁 session</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//销毁session</span></span><br><span class="line">    <span class="comment">// res.send(&#x27;设置session&#x27;);</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="title function_">destroy</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;成功退出&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230330163356368.png" alt="image-20230330163356368"></p><blockquote><p>安全性只能讲相对较好</p></blockquote><hr><h1 id="session结合项目"><a href="#session结合项目" class="headerlink" title="session结合项目"></a>session结合项目</h1><h2 id="项目的准备工作"><a href="#项目的准备工作" class="headerlink" title="项目的准备工作"></a>项目的准备工作</h2><h3 id="作好注册页面、登录界面等的功能"><a href="#作好注册页面、登录界面等的功能" class="headerlink" title="作好注册页面、登录界面等的功能"></a>作好注册页面、登录界面等的功能</h3><p><strong>1.登录界面、注册界面设计</strong></p><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230331165629190.png" alt="image-20230331165629190"></p><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230331170054335.png" alt="image-20230331170054335"></p><blockquote><p>包括页面的跳转方法</p><p>数据库<code>(express框架需要name对应模型的属性)</code>所需要的，req.body信息的设置</p></blockquote><p><strong>2.确保正常连接数据库</strong></p><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230331171122717.png" alt="image-20230331171122717"></p><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230331170522151.png" alt="image-20230331170522151"></p><blockquote><p>在数据库连接的基础上，有http服务</p><p>设计好数据库信息的模型</p><p>正确获取信息</p></blockquote><h2 id="session功能设计"><a href="#session功能设计" class="headerlink" title="session功能设计"></a>session功能设计</h2><p><strong>1.设计session中间件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;sid&#x27;</span>, <span class="comment">//设置cookie的name</span></span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;atguigu&#x27;</span>, <span class="comment">//参与加密的字符串（又称签名）</span></span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">false</span>, <span class="comment">//是否为每次请求都设置一个cookie用来存储session的id</span></span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">true</span>, <span class="comment">//是否在每次请求时重新保存session</span></span><br><span class="line">  <span class="attr">store</span>: <span class="title class_">MongoStore</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">mongoUrl</span>: <span class="string">`mongodb://<span class="subst">$&#123;DBHOST&#125;</span>:<span class="subst">$&#123;DBPORT&#125;</span>/<span class="subst">$&#123;DBNAME&#125;</span>`</span><span class="comment">//数据库的连接配置</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">cookie</span>: &#123;</span><br><span class="line">      <span class="attr">httpOnly</span>: <span class="literal">true</span>, <span class="comment">// 开启后只能传输使用</span></span><br><span class="line">      <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>  <span class="comment">// 这一条 是控制 sessionID 的过期时间的！！！</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><blockquote><p>连接数据库，创建一个session模型，储存session(账号)信息</p><p>这里使用了一个<code>&#39;connect-mongo&#39;</code>的依赖包</p></blockquote><p><strong>2.插入session信息</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录操作</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//验证登录</span></span><br><span class="line">    <span class="keyword">let</span> &#123;username,password&#125; = req.<span class="property">body</span></span><br><span class="line">    <span class="comment">//查询数据库是否有信息</span></span><br><span class="line">    <span class="title class_">UserModel</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">username</span>: username, <span class="attr">password</span>: <span class="title function_">md5</span>(password)&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//if (err) &#123;&#125;</span></span><br><span class="line">        <span class="comment">//判断f(!data)&#123;&#125;</span></span><br><span class="line">        <span class="comment">//写入session,验证客户身份</span></span><br><span class="line">        req.<span class="property">session</span>.<span class="property">username</span> = data.<span class="property">username</span></span><br><span class="line">        req.<span class="property">session</span>.<span class="property">id</span> = data.<span class="property">id</span></span><br><span class="line">        <span class="comment">//响应内容</span></span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;account/success&#x27;</span>,&#123;<span class="attr">msg</span>:<span class="string">&#x27;登录成功~&#x27;</span>,<span class="attr">url</span>:<span class="string">&#x27;/account&#x27;</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>此时，数据库已经有了session集合，并且有了用户的信息</p></blockquote><p><strong>3.检测用户信息是否被记录</strong></p><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230331191329334.png" alt="image-20230331191329334"></p><blockquote><p>相关需要身份校验的页面都需要</p></blockquote><p><strong>4.退出登录</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出登录</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/logout&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//销毁 session</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="title function_">destroy</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;account/success&#x27;</span>,&#123;<span class="attr">msg</span>:<span class="string">&#x27;退出成功&#x27;</span>, <span class="attr">url</span>:<span class="string">&#x27;/login&#x27;</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>删除session数据库信息</p></li><li><p>让用户重新登录重新写上才能访问</p></li></ul></blockquote><blockquote><p><strong>注意事项：</strong></p><ul><li>许多网站的跳转都是get请求如link,所以那些涉及到信息发送的退出的最好用post方法</li></ul></blockquote><p><img src="/2023/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E7%AF%87/image-20230331191802005.png" alt="image-20230331191802005"></p><blockquote><p><code>会携带上该网站的cookie</code>，方法一般都是get,如果退出登录的方法时get的话，很容易被攻击导致用户疯狂退出登录</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mongod数据库</title>
      <link href="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>1.1 Mongodb</strong> <strong>是什么</strong></p><p>MongoDB 是一个基于<code>分布式文件存储的数据库</code>，官方地址 <strong><a href="https://www.mongodb.com/">https://www.mongodb.com/</a></strong></p><p><strong>1.2</strong> <strong>数据库是什么</strong></p><p>数据库（DataBase）是按照数据结构来组织、存储和管理数据的 应用程序</p><p><strong>1.3</strong> <strong>数据库的作用</strong></p><p>数据库的主要作用就是 管理数据 ，对数据进行 增（c）、删（d）、改（u）、查（r）</p><p><strong>1.4</strong> <strong>数据库管理数据的特点</strong></p><p>相比于纯文件管理数据，数据库管理数据有如下特点：</p><ol><li><p>速度更快</p></li><li><p>扩展性更强(多个数据库)</p></li><li><p>安全性更强(设置权限、加密等)</p></li></ol><p><strong>1.5</strong> <strong>为什么选择</strong> <strong>Mongodb</strong></p><p>操作<code>语法与 JavaScript 类似</code>，容易上手，学习成本低</p><hr><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230326221044660.png" alt="image-20230326221044660"></p><p><strong>Mongodb 中有三个重要概念需要掌握</strong></p><ul><li><p><code>数据库（database）</code> 数据库是一个数据仓库，数据库服务下可以创建很多数据库，数据库中可以存放很多集合</p></li><li><p><code>集合（collection）</code> 集合类似于 JS 中的数组，在集合中可以存放很多文档</p></li><li><p><code>文档（document）</code> 文档是数据库中的最小单位，类似于 JS 中的对象</p></li></ul><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230326183117786.png" alt="image-20230326183117786"></p><p><strong>JSON 文件示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;accounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3-YLju5f3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;remarks&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为了上网课&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3-YLju5f4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请女朋友吃饭&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>大家可以通过 JSON 文件来理解 Mongodb 中的概念</strong></p><blockquote><ul><li><p>一个 <code>JSON 文件</code> 好比是一个 <code>数据库</code> ，一个 Mongodb 服务下可以有 N 个数据库(JSON文件)</p></li><li><p>JSON 文件中的 一级属性的<code>数组</code>值 好比是 <code>集合</code></p></li><li><p>数组中的<code>对象</code>好比是 <code>文档</code></p></li><li><p>对象中的<code>属性</code>有时也称之为 <code>字段</code></p></li></ul></blockquote><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="下载安装与启动"><a href="#下载安装与启动" class="headerlink" title="下载安装与启动"></a>下载安装与启动</h3><p><strong>下载地址：</strong> </p><p><strong><a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></strong></p><p>建议选择 zip 类型， 通用性更强</p><p><strong>配置步骤如下:</strong></p><ul><li><p>1&gt; 将压缩包移动到 C:\Program Files 下，然后解压</p></li><li><p>2&gt; 创建 C:\data\db 目录，mongodb 会将数据默认保存在这个文件夹</p></li><li><p>3&gt; 以 mongodb 中 bin 目录作为工作目录，启动命令行</p></li><li><p>4&gt; <code>运行命令 mongod</code></p></li></ul><blockquote><p>看到最后的 <code>waiting for connections </code>则表明服务 已经 动成功</p><p>然后可以使用 <code>mongo 命令</code>连接本机的 mongodb 服务</p></blockquote><p><strong>注意：</strong></p><blockquote><ul><li><p>为了方便后续方便使用 mongod 命令，可以将 bin 目录<code>配置到环境变量 Path 中</code></p></li><li><p>千万不要选中服务端窗口的内容 ，选中会停止服务，可以 <code>敲回车 取消选中</code></p></li></ul></blockquote><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p> <strong>数据库命令</strong></p><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230326184404679.png" alt="image-20230326184404679"></p><blockquote><p><code>没有集合不会显示库</code></p></blockquote><p> <strong>集合命令</strong></p><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230326184507338.png" alt="image-20230326184507338"></p><p> <strong>文档命令</strong></p><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230326184626338.png" alt="image-20230326184626338"></p><blockquote><p><code>没有$号</code>会直接<code>覆盖</code>掉<code>整个文档数据</code></p></blockquote><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230326185047913.png" alt="image-20230326185047913"></p><p><strong>伪删除</strong></p><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230326220627866.png" alt="image-20230326220627866"></p><blockquote><p>添加is_deleted属性作为伪删除，用于数据的恢复，可能git也是这样</p></blockquote><hr><h1 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h1><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230326221208238.png" alt="image-20230326221208238"></p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>Mongoose 是一个<code>对象文档模型库</code>，方便使用代码<code>操作 mongodb 数据库</code></li></ul><blockquote><p>其实就是一个封装的包</p></blockquote><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 安装 mongoose</span></span><br><span class="line"><span class="comment">//2. 导入 mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">//3. 连接数据库(协议名称://ip:端口/库名)</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://127.0.0.1:27017/bilibili&#x27;</span>);</span><br><span class="line"><span class="comment">//4. 设置连接回调</span></span><br><span class="line"><span class="comment">//连接成功</span></span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功&#x27;</span>);</span><br><span class="line"><span class="comment">//5. 创建文档结构对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">BookSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line"><span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line"><span class="attr">author</span>: <span class="title class_">String</span>,</span><br><span class="line"><span class="attr">price</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//6. 创建文档模型对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">BookModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;book&#x27;</span>, <span class="title class_">BookSchema</span>);</span><br><span class="line"><span class="comment">//7. 插入文档</span></span><br><span class="line"><span class="title class_">BookModel</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;西游记&#x27;</span>,</span><br><span class="line"><span class="attr">author</span>: <span class="string">&#x27;吴承恩&#x27;</span>,</span><br><span class="line"><span class="attr">price</span>: <span class="number">19.9</span></span><br><span class="line">&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="comment">//输出 data 对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"><span class="comment">//8. 断开连接</span></span><br><span class="line">mongoose.<span class="title function_">disconnect</span>();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//连接出错</span></span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接出错~~&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//连接关闭</span></span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接关闭&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="设置字段类型"><a href="#设置字段类型" class="headerlink" title="设置字段类型"></a>设置字段类型</h3><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230326191540383.png" alt="image-20230326191540383"></p><blockquote><p><code>pbjectId外键</code></p></blockquote><h3 id="字段的设置"><a href="#字段的设置" class="headerlink" title="字段的设置"></a>字段的设置</h3><blockquote><p>Mongoose 有一些内建验证器，可以对字段值进行验证</p></blockquote><p><strong>5.5.1</strong> <strong>必填项</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">type<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line">required<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 设置必填项</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p><strong>5.5.2</strong> <strong>默认值</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">author<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    type<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line">    default<span class="punctuation">:</span> &#x27;匿名&#x27; <span class="comment">//默认值</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p><strong>5.5.3</strong> <strong>枚举值</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gender<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    type<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line">    enum<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;男&#x27;<span class="punctuation">,</span>&#x27;女&#x27;<span class="punctuation">]</span> <span class="comment">//设置的值必须是数组中的</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><blockquote><p>给出了限定范围</p></blockquote><p><strong>5.5.4</strong> <strong>唯一值</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    type<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line">    unique<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><blockquote><p>unique 需要 <code>重建集合 </code>才能有效果</p><p>永远不要相信用户的输入</p></blockquote><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><blockquote><p>数据库的基本操作包括四个，增加（create），删除（delete），修改（update），查（read）</p></blockquote><p><strong>删除文档</strong></p><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230327162937289.png" alt="image-20230327162937289"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.导入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="comment">//3.连接mongodb服务</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://127.0.0.1:27017/bilibili&#x27;</span>);</span><br><span class="line"> <span class="comment">//5.new实例化创建文档结构对象</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">BookSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>:<span class="title class_">String</span>,</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//6.利用模型，创建对象</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">Book1</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;novel&#x27;</span>,<span class="title class_">BookSchema</span>)</span><br><span class="line">    <span class="comment">//7.删除一条文档</span></span><br><span class="line">    <span class="title class_">Book1</span>.<span class="title function_">deleteOne</span>(&#123;<span class="attr">_id</span>: <span class="string">&#x27;64214f6394d5517f0cacf3d1&#x27;</span>&#125;,<span class="function">(<span class="params">err,data</span>) =&gt;</span>&#123;</span><br><span class="line">         <span class="comment">//判断       </span></span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除失败~&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>删除多条，<code>将deleteOne改成deleteMany</code></p></blockquote><h3 id="更新修改文档"><a href="#更新修改文档" class="headerlink" title="更新修改文档"></a><strong>更新修改文档</strong></h3><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230327163554257.png" alt="image-20230327163554257"></p><blockquote><p>updataOne&amp;updataMany<code>(&#123;条件&#125;,&#123;更新内容&#125;,(回调参数)=&gt;&#123;回调响应函数&#125;)</code></p></blockquote><p><strong>读取文档</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Book1.findOne(&#123;name: &#x27;狂飙&#x27;&#125;, (err, data) =&gt; &#123;</span><br><span class="line">         //判断       </span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.log(&#x27;读取失败~&#x27;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(data);</span><br></pre></td></tr></table></figure><blockquote><p>条件：Book1.find({name: ‘红楼梦’},…</p><p>所有：Book1.find(）</p><ul><li><code>当属性有错或者不存在默认输出第一条数据</code></li></ul></blockquote><h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><p><strong>1.运算符</strong></p><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230327173334889.png" alt="image-20230327173334889"></p><blockquote><p>一般用于id</p></blockquote><p><strong>2.逻辑与或</strong></p><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230327173547150.png" alt="image-20230327173547150"></p><p><strong>3.正则匹配</strong></p><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230327174731714.png" alt="image-20230327174731714"></p><blockquote><p>条件中可以直接使用 JS 的正则语法，通过正则可以进行模糊查询</p><p>db.students.find({name:<code>/imissyou/</code>});</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">BookModel</span>.<span class="title function_">find</span>(&#123;<span class="attr">name</span>: <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;三&#x27;</span>)&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败~~&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p><code>当信息是一个变量用&#123;name: new RegExp(&#39;三&#39;)&#125;</code></p></blockquote><p><strong>4.其他方法</strong></p><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230327173840656.png" alt="image-20230327173840656"></p><hr><h2 id="数据库模块封装"><a href="#数据库模块封装" class="headerlink" title="数据库模块封装"></a>数据库模块封装</h2><h3 id="结构组成"><a href="#结构组成" class="headerlink" title="结构组成"></a>结构组成</h3><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230327211412133.png" alt="image-20230327211412133"></p><blockquote><p>一般按照功能划分:</p><ul><li>各个模块要<code>搞清楚引用什么模块</code></li><li></li></ul></blockquote><p><strong>1.配置文件</strong></p><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230327211650741.png" alt="image-20230327211650741"></p><p>**2.**模型对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入...</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="comment">//5.new实例化创建文档结构对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">GameSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="title class_">String</span>,</span><br><span class="line">   <span class="attr">author</span>:<span class="title class_">String</span>,</span><br><span class="line">   <span class="attr">price</span>:<span class="title class_">Number</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//6.利用模型，创建对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">GameModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;gBoxs&#x27;</span>,<span class="title class_">GameSchema</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露模块</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">GameModel</span></span><br></pre></td></tr></table></figure><p><strong>3.数据库连接文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; success 数据库连接成功回调</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; error 失败回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//暴露函数</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">success,error</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> error !==<span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        error = <span class="function">() =&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接失败&#x27;</span>);</span><br><span class="line">    &#125;&#125;</span><br><span class="line"><span class="comment">//1.安装mongoose</span></span><br><span class="line"><span class="comment">//2.导入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="comment">//设置 strictQuery 为 true</span></span><br><span class="line">mongoose.<span class="title function_">set</span>(<span class="string">&#x27;strictQuery&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//地址模块</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">DBHOST</span>,<span class="variable constant_">DBPORT</span>,<span class="variable constant_">DBNAME</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../confige/confige.js&#x27;</span>)</span><br><span class="line"><span class="comment">//3.连接mongodb服务</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">`mongodb://<span class="subst">$&#123;DBHOST&#125;</span>:<span class="subst">$&#123;DBPORT&#125;</span>/<span class="subst">$&#123;DBNAME&#125;</span>`</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">回调函数成功&amp;&amp;失败</span></span><br><span class="line"><span class="comment">关闭回调</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>打包成函数给主文件使用</p></blockquote><p><strong>4.主文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&#x27;./db/db&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">GameModel</span> = <span class="built_in">require</span>(<span class="string">&#x27;./models/GameModel&#x27;</span>)</span><br><span class="line"><span class="comment">// 引入数据库初始化模块、集合模块、mongoose模块</span></span><br><span class="line"><span class="title function_">db</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="title class_">GameModel</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;pokemon&#x27;</span>,</span><br><span class="line">        <span class="attr">author</span>:<span class="string">&#x27;jiajiahuat&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>:<span class="number">10.0</span></span><br><span class="line">    &#125;,<span class="function">(<span class="params">err,data</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入失败&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        mongoose.<span class="title function_">disconnect</span>()    </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>引入各个模块，实现文档插入功能</p></blockquote><h2 id="综合记账本"><a href="#综合记账本" class="headerlink" title="综合记账本"></a>综合记账本</h2><h3 id="保证先连接数据库后开启http服务"><a href="#保证先连接数据库后开启http服务" class="headerlink" title="保证先连接数据库后开启http服务"></a>保证先连接数据库后开启http服务</h3><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230328142826779.png" alt="image-20230328142826779"></p><h3 id="建立models文件"><a href="#建立models文件" class="headerlink" title="建立models文件"></a>建立models文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入mongoose模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="comment">//5.new实例化创建文档结构对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">AccountSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">    &#125; ,</span><br><span class="line">      <span class="attr">time</span>:<span class="title class_">Date</span>,</span><br><span class="line">      <span class="attr">type</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">default</span>:-<span class="number">1</span></span><br><span class="line">    &#125; ,</span><br><span class="line">      <span class="attr">account</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">require</span>:<span class="literal">true</span></span><br><span class="line">    &#125; </span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//6.利用模型，创建对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">AccountModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;account&#x27;</span>,<span class="title class_">AccountSchema</span>)</span><br><span class="line"><span class="comment">//暴露模块</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">AccountModel</span></span><br></pre></td></tr></table></figure><blockquote><p>npm i moment </p><p><code>time:moment(req.body.time).toDate()</code></p><p>将时间字符串转成日期对象</p></blockquote><h3 id="路由文件routes"><a href="#路由文件routes" class="headerlink" title="路由文件routes"></a>路由文件routes</h3><p><strong>1.post文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//post方法下</span></span><br><span class="line"><span class="title class_">AccountModel</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">   ...req.<span class="property">body</span>,</span><br><span class="line">   <span class="comment">//修改属性值</span></span><br><span class="line">   <span class="attr">time</span>:<span class="title function_">moment</span>(req.<span class="property">body</span>.<span class="property">time</span>).<span class="title function_">toDate</span>()</span><br><span class="line"> &#125;,<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (err) &#123;</span><br><span class="line">     res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;插入失败&#x27;</span>)</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   res.<span class="title function_">render</span>(<span class="string">&#x27;success&#x27;</span>,&#123;<span class="attr">msg</span>:<span class="string">&#x27;添加成功~&#x27;</span>,<span class="attr">url</span>:<span class="string">&#x27;/account&#x27;</span>&#125;)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>app.use(express.urlencoded({ extended: false }));//中间件解析url-encoded，使得req.body有数据，相当于以前的</p></blockquote><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230328144802974.png" alt="image-20230328144802974"></p><p><strong>2.get文件</strong></p><p><strong>读取文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 账本列表 */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/account&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line"><span class="title class_">AccountModel</span>.<span class="title function_">find</span>().<span class="title function_">sort</span>(&#123;<span class="attr">time</span>:-<span class="number">1</span>&#125;).<span class="title function_">exec</span>(<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;读取失败&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;list&#x27;</span>,&#123;<span class="attr">account</span>: data, <span class="attr">moment</span>: moment&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>结合mongoose的条件控制，可以筛选读取文件</p></blockquote><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230328150936513.png" alt="image-20230328150936513"></p><p><strong>删除记录</strong></p><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230328151220306.png" alt="image-20230328151220306"></p><blockquote><p>一般都是获取id来精准删除的</p></blockquote><ul><li>get后面的只是触发条件(地址)</li><li>删除是后面的对数据库进行删除</li></ul><h3 id="veiw文件"><a href="#veiw文件" class="headerlink" title="veiw文件"></a>veiw文件</h3><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230328153013965.png" alt="image-20230328153013965"></p><blockquote><ul><li><code>通过ejs的分离方法，灵活地生成排版</code></li><li>信息的插入，修改等等</li><li>地址信息的修改</li></ul></blockquote><p>对数据库信息的使用十分有用<code>因为信息是活的</code></p><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><h2 id="设置模型时去掉空格"><a href="#设置模型时去掉空格" class="headerlink" title="设置模型时去掉空格"></a>设置模型时去掉空格</h2><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230329164919718.png" alt="image-20230329164919718"></p><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230329165059354.png" alt="image-20230329165059354"></p><blockquote><p>exec，可以让函数在外添加链式调用</p><p>如limit(数量)\sort(排序)</p></blockquote><h2 id="理解增加文档的过程"><a href="#理解增加文档的过程" class="headerlink" title="理解增加文档的过程"></a>理解增加文档的过程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/account&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="title class_">AccountModel</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    ...req.<span class="property">body</span>,</span><br><span class="line">    <span class="attr">time</span>:<span class="title function_">moment</span>(req.<span class="property">body</span>.<span class="property">time</span>).<span class="title function_">toDate</span>()</span><br><span class="line">  &#125;,<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;插入失败&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;success&#x27;</span>,&#123;<span class="attr">msg</span>:<span class="string">&#x27;添加成功~&#x27;</span>,<span class="attr">url</span>:<span class="string">&#x27;/account&#x27;</span>&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>1.请求路由中间件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/account&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>)&#123;<span class="comment">//处理&#125;)</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>包含方法，路径，以及回调函数;</li><li>处理请求req并作出相应res</li></ul></blockquote><p><strong>2.新增文档</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">AccountModel</span>.<span class="title function_">create</span>(&#123;<span class="attr">title</span>:<span class="string">&#x27;包含要新增的内容，甚至可以在这里添加es6的暂开，然后重新赋值&#x27;</span>&#125;,<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;插入失败&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;success&#x27;</span>,&#123;<span class="attr">msg</span>:<span class="string">&#x27;添加成功~&#x27;</span>,<span class="attr">url</span>:<span class="string">&#x27;/account&#x27;</span>&#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><ul><li>包括引用的模型文件和方法</li><li>因为<code>express.urlencoded对req.body进行了处理</code></li><li>最后通过html中的name，来获取对应的信息填到模型上面<code>可能是通过mongoose相关依赖实现的</code></li></ul></blockquote><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230329172616337.png" alt="image-20230329172616337"></p><p><strong>处理过程大致如下</strong></p><p><img src="/2023/04/01/mongod%E6%95%B0%E6%8D%AE%E5%BA%93/image-20230329172713307.png" alt="image-20230329172713307"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js</title>
      <link href="/2023/03/21/Node-js/"/>
      <url>/2023/03/21/Node-js/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><p><img src="/2023/03/21/Node-js/image-20230316180421251.png" alt="image-20230316180421251"></p><h2 id="什么是node-js"><a href="#什么是node-js" class="headerlink" title="什么是node.js?"></a>什么是node.js?</h2><p><img src="/2023/03/21/Node-js/image-20230316181054504.png" alt="image-20230316181054504"></p><blockquote><p>开源跨平台的，javascript的运行环境</p></blockquote><h2 id="为什么要学？"><a href="#为什么要学？" class="headerlink" title="为什么要学？"></a>为什么要学？</h2><p><img src="/2023/03/21/Node-js/image-20230316181139369.png" alt="image-20230316181139369"></p><blockquote><p>框架的使用离不开node.js</p></blockquote><h2 id="工作内容-作用-是什么"><a href="#工作内容-作用-是什么" class="headerlink" title="工作内容(作用)是什么"></a>工作内容(作用)是什么</h2><p><img src="/2023/03/21/Node-js/image-20230316181711554.png" alt="image-20230316181711554"></p><blockquote><p>在服务器上运行的代码，实现人与人网页云端上的交互</p></blockquote><p><img src="/2023/03/21/Node-js/image-20230316182107974.png" alt="image-20230316182107974"></p><h3 id="开发与应用"><a href="#开发与应用" class="headerlink" title="开发与应用"></a>开发与应用</h3><p><img src="/2023/03/21/Node-js/image-20230316181903682.png" alt="image-20230316181903682"></p><blockquote><p>1.开发服务器应用</p><p>2.开发工具类应用</p><p>3.开发桌面端应用</p></blockquote><h2 id="没有浏览器的API"><a href="#没有浏览器的API" class="headerlink" title="没有浏览器的API"></a>没有浏览器的API</h2><p><img src="/2023/03/21/Node-js/image-20230316190546829.png" alt="image-20230316190546829"></p><blockquote><p>有自己的API</p><p>主要是<code>BOM和DOM的对象没有</code></p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/2023/03/21/Node-js/image-20230316191132436.png" alt="image-20230316191132436"></p><blockquote><p>navigator、history等等</p><p>document、window等等</p></blockquote><hr><h1 id="Node-js简介"><a href="#Node-js简介" class="headerlink" title="Node.js简介"></a>Node.js简介</h1><h2 id="顶级对象global"><a href="#顶级对象global" class="headerlink" title="顶级对象global"></a>顶级对象global</h2><p><img src="/2023/03/21/Node-js/image-20230316191443723.png" alt="image-20230316191443723"></p><blockquote><p>globalThis === global</p></blockquote><h2 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer(缓冲区)"></a>Buffer(缓冲区)</h2><blockquote><p>一个类似于数组的东西(对象)</p></blockquote><p><img src="/2023/03/21/Node-js/image-20230316191932717.png" alt="image-20230316191932717"></p><blockquote><p>类似于那种ASCAll码</p></blockquote><p><img src="/2023/03/21/Node-js/image-20230316191938196.png" alt="image-20230316191938196"></p><blockquote><p>每个元素大小为1字节 </p></blockquote><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="创建Buffer-数组"><a href="#创建Buffer-数组" class="headerlink" title="创建Buffer(数组)"></a>创建Buffer(数组)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.alloc(清空数据，后创建)</span></span><br><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.allocUnsafe(有旧数据，省略清空)</span></span><br><span class="line"><span class="keyword">let</span> buf_2 = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.from(将字符串或数组转为buffer码)</span></span><br><span class="line"><span class="keyword">let</span> buf_3 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_3);</span><br></pre></td></tr></table></figure><p><img src="/2023/03/21/Node-js/image-20230316214148640.png" alt="image-20230316214148640"></p><blockquote><p>1.alloc(清空数据，后创建)</p><p>2.allocUnsafe(有旧数据，省略清空的时间)</p><p>3.from(将字符串或数组转为buffer码)</p><p>4.toString(将buffer转为为字符串)<code>默认为utf-8</code></p></blockquote><p>操作</p><p><img src="/2023/03/21/Node-js/image-20230316215544389.png" alt="image-20230316215544389"></p><p>溢出</p><p>中文</p><p><img src="/2023/03/21/Node-js/image-20230316220056808.png" alt="image-20230316220056808"></p><hr><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><blockquote><p>进程里面包含线程</p></blockquote><p><img src="/2023/03/21/Node-js/image-20230316221140221.png" alt="image-20230316221140221"></p><hr><h1 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h1><h2 id="fs介绍"><a href="#fs介绍" class="headerlink" title="fs介绍"></a>fs介绍</h2><p><img src="/2023/03/21/Node-js/image-20230316221324759.png" alt="image-20230316221324759"></p><h3 id="fs初试用"><a href="#fs初试用" class="headerlink" title="fs初试用"></a>fs初试用</h3><h4 id="文件的创建"><a href="#文件的创建" class="headerlink" title="文件的创建"></a>文件的创建</h4><p><img src="/2023/03/21/Node-js/image-20230316221804053.png" alt="image-20230316221804053"></p><blockquote><p>require</p><p>writeFile</p><p>帮助用户自动化形成文件(脚本)</p></blockquote><h3 id="fs异步与同步"><a href="#fs异步与同步" class="headerlink" title="fs异步与同步"></a>fs异步与同步</h3><blockquote><p>异步有点像事件.压入任务队列等待主线程完成</p></blockquote><h3 id="文件写入与追加"><a href="#文件写入与追加" class="headerlink" title="文件写入与追加"></a>文件写入与追加</h3><h4 id="日常所见的文件写入"><a href="#日常所见的文件写入" class="headerlink" title="日常所见的文件写入"></a>日常所见的文件写入</h4><blockquote><p>下载文件</p><p>安装软件</p><p>git </p><p>需要持久性地保存文件</p></blockquote><h4 id="一般的写入方式"><a href="#一般的写入方式" class="headerlink" title="一般的写入方式"></a>一般的写入方式</h4><p><strong>文件的追加写入</strong></p><p>……</p><p><strong>writeFileSync同步写入</strong></p><p><img src="/2023/03/21/Node-js/image-20230316223225392.png" alt="image-20230316223225392"></p><p><strong>writeFile异步追加写入</strong></p><p><img src="/2023/03/21/Node-js/image-20230316223657490.png" alt="image-20230316223657490"></p><blockquote><p>要有flag:’a，表示追加，否则…</p></blockquote><p><strong>appendFile异步写入</strong></p><p><img src="/2023/03/21/Node-js/image-20230316223535661.png" alt="image-20230316223535661"></p><blockquote><p>换行\r\n标识符</p></blockquote><h4 id="流式写入-stream"><a href="#流式写入-stream" class="headerlink" title="流式写入(stream)"></a>流式写入(stream)</h4><blockquote><p>可以减少打开文件的次数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;./第一天.text&#x27;</span>,&#123;<span class="attr">flag</span>:<span class="string">&#x27;a&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">//3.写入</span></span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;buffer数组\r\n&#x27;</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;noded的安装\r\n&#x27;</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;同步异步\r\n&#x27;</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;fs文件写入\r\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭通道</span></span><br><span class="line">ws.<span class="title function_">close</span>()</span><br></pre></td></tr></table></figure><hr><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><h4 id="日用场景"><a href="#日用场景" class="headerlink" title="日用场景"></a>日用场景</h4><p><img src="/2023/03/21/Node-js/image-20230316231051571.png" alt="image-20230316231051571"></p><blockquote><p>平时看什么都是要读取文件的</p></blockquote><h4 id="为什么需要文件读取"><a href="#为什么需要文件读取" class="headerlink" title="为什么需要文件读取"></a>为什么需要文件读取</h4><blockquote><p>脚本帮忙自动读取文件<code>(自动化)</code></p><p>(否则就是自己打开给用户)</p></blockquote><h4 id="三种读取方法"><a href="#三种读取方法" class="headerlink" title="三种读取方法"></a>三种读取方法</h4><p><img src="/2023/03/21/Node-js/image-20230316231257089.png" alt="image-20230316231257089"></p><p><strong>同步与异步读取</strong></p><p><img src="/2023/03/21/Node-js/image-20230316230650088.png" alt="image-20230316230650088"></p><blockquote><p>对应文件写入</p><p><code>同步和异步区别就是Sync</code></p></blockquote><h5 id="流式读取"><a href="#流式读取" class="headerlink" title="流式读取"></a><strong>流式读取</strong></h5><p><img src="/2023/03/21/Node-js/image-20230317001709013.png" alt="image-20230317001709013"></p><blockquote><p>rs.on(‘data’,名字 =&gt; {})</p><p>on方法，内容为data</p></blockquote><h4 id="两种读写的区别"><a href="#两种读写的区别" class="headerlink" title="两种读写的区别"></a>两种读写的区别</h4><p><img src="/2023/03/21/Node-js/image-20230317003258678.png" alt="image-20230317003258678"></p><blockquote><ul><li><p>显然流式读取，所占用的内存空间少</p></li><li><p>流式读取速度快于写的速度，读写的时候，会先读，所以导致内存空间实际要多(64k)理想</p></li></ul></blockquote><h4 id="比较内存使用"><a href="#比较内存使用" class="headerlink" title="比较内存使用"></a>比较内存使用</h4><p><img src="/2023/03/21/Node-js/image-20230317003839586.png" alt="image-20230317003839586"></p><blockquote><p>显然流式读取要占用少</p></blockquote><h3 id="文件移动与重命名"><a href="#文件移动与重命名" class="headerlink" title="文件移动与重命名"></a>文件移动与重命名</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><blockquote><p>fs.rename(<code>oldPath</code>, <code>newPath</code>, callback)</p><p>fs.renameSync(oldPath, newPath)</p></blockquote><h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><ul><li><p>oldPath 文件当前的路径</p></li><li><p>newPath 文件新的路径</p></li><li><p>callback 操作后的回调</p></li></ul><blockquote><p>两者都是文件的移动</p></blockquote><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><h4 id="unlink方法"><a href="#unlink方法" class="headerlink" title="unlink方法"></a>unlink方法</h4><blockquote><p>fs.unlink(path, callback)</p><p>fs.unlinkSync(path)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">&#x27;./test.txt&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">unlinkSync</span>(<span class="string">&#x27;./test2.txt&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="rm方法"><a href="#rm方法" class="headerlink" title="rm方法"></a>rm方法</h4><blockquote><p>14.4版本</p><p>+Sync是同步方法</p></blockquote><p>如下图所示</p><p><img src="/2023/03/21/Node-js/image-20230317214432733.png" alt="image-20230317214432733"></p><p><img src="/2023/03/21/Node-js/image-20230317214432733.png" alt="image-20230317214432733"></p><hr><h2 id="fs文件夹操作"><a href="#fs文件夹操作" class="headerlink" title="fs文件夹操作"></a>fs文件夹操作</h2><blockquote><p>创建文件夹</p><p>mkdir / mkdirSync </p></blockquote><blockquote><p>读取文件夹</p><p>readdir / readdirSync </p></blockquote><blockquote><p>删除文件夹</p><p>rmdir / rmdirSync      =&gt;<code>(remove的缩写)</code></p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;./page&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//递归异步创建</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;./1/2/3&#x27;</span>, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;递归创建成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//递归同步创建文件夹</span></span><br><span class="line">fs.<span class="title function_">mkdirSync</span>(<span class="string">&#x27;./x/y/z&#x27;</span>, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>1.递归创建与递归删除雷同，其实这些方法都大致相同</p><p>2.递归时需要加入<code>&#123;recursive: true&#125;</code>这样一个参数</p><p>3.递归就是创建一个目录下，多个文件</p><p>4.递归删除推荐rm方法</p></blockquote><h3 id="查看文件夹资源状态"><a href="#查看文件夹资源状态" class="headerlink" title="查看文件夹资源状态"></a>查看文件夹资源状态</h3><blockquote><p>fs.stat(path[, options], callback)</p><p>fs.statSync(path[, options])</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步获取状态</span></span><br><span class="line">fs.<span class="title function_">stat</span>(<span class="string">&#x27;./data.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//同步获取状态</span></span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">statSync</span>(<span class="string">&#x27;./data.txt&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="data包括"><a href="#data包括" class="headerlink" title="data包括"></a>data包括</h4><blockquote><p>data.size() 文件体积</p><p>…birthtime 创建时间</p><p>…mtime 最后修改时间</p><p>…isFile 检测是否为文件</p><p>…isDirectory 检测是否为文件夹</p></blockquote><hr><h2 id="路径初理解"><a href="#路径初理解" class="headerlink" title="路径初理解"></a>路径初理解</h2><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><blockquote><ol><li><p>./座右铭.txt 当前目录下的座右铭.txt</p></li><li><p>座右铭.txt 等效于上面的写法</p></li><li><p>../座右铭.txt 当前目录的上一级目录中的座右铭.txt</p></li></ol></blockquote><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><blockquote><ol><li><p>D:/Program Files windows 系统下的绝对路径</p></li><li><p>/usr/bin Linux 系统下的绝对路径</p></li></ol></blockquote><p><code>看起来和JS都差不多</code></p><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><blockquote><p>相对路径的参照物是<code>终端命令行的</code></p><p>所以当命令行的工作目录与文件所在目录不一致时，会出现一些 BUG</p></blockquote><h3 id="设置绝对路径-dirname"><a href="#设置绝对路径-dirname" class="headerlink" title="设置绝对路径(__dirname)"></a>设置绝对路径(__dirname)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/data.txt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><p>也等价于</p><p><img src="/2023/03/21/Node-js/image-20230317221728730.png" alt="image-20230317221728730"></p><blockquote><p>或者终端运行时，在当前文件夹运行<img src="/2023/03/21/Node-js/5E0216B3.png" alt="img"></p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>1.实现文件的复制</p><p>2.文件重命名</p><h1 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h1><h2 id="path方法"><a href="#path方法" class="headerlink" title="path方法"></a>path方法</h2><p><img src="/2023/03/21/Node-js/image-20230318220210903.png" alt="image-20230318220210903"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取路径分隔符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="property">sep</span>);</span><br><span class="line"><span class="comment">//拼接绝对路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;test&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析路径</span></span><br><span class="line"><span class="keyword">let</span> pathname = <span class="string">&#x27;D:/program file/nodejs/node.exe&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">parse</span>(pathname));</span><br><span class="line"><span class="comment">//获取路径基础名称</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(pathname))</span><br><span class="line"><span class="comment">//获取路径的目录名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(pathname));</span><br><span class="line"><span class="comment">//获取路径的扩展名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(pathname));</span><br></pre></td></tr></table></figure><blockquote><p>重点掌握resolve</p></blockquote><p><img src="/2023/03/21/Node-js/image-20230319211156723.png" alt="image-20230319211156723"></p><p>D:\index.html\test</p><h4 id="获取路径注意"><a href="#获取路径注意" class="headerlink" title="获取路径注意"></a>获取路径注意</h4><blockquote><p>通过方法输出的路径，copy时容易忽略</p><p>在其它地方复制过来的路径的<code>斜杠</code>，可能会变成<code>转义符号</code></p></blockquote><hr><h1 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h1><h2 id="概念与组成"><a href="#概念与组成" class="headerlink" title="概念与组成"></a>概念与组成</h2><blockquote><p>HTTP（hypertext transport protocol）协议；中文叫<strong>超文本传输协议</strong></p></blockquote><p>是一种基于TCP/IP的应用层通信协议</p><p>这个协议详细规定了 <code>浏览器 </code>和<code>万维网 </code>服务器 之间<code>互相通信</code>的规则。</p><p>协议中主要规定了两个方面的内容</p><ul><li><p>客户端：用来向服务器发送数据，可以被称之为<strong>请求报文</strong></p></li><li><p>服务端：向客户端返回数据，可以被称之为<strong>响应报文</strong></p></li></ul><blockquote><p>报文：可以简单理解为就是一堆字符串</p><p>raw查看</p></blockquote><h3 id="请求报文的组成"><a href="#请求报文的组成" class="headerlink" title="请求报文的组成"></a>请求报文的组成</h3><ul><li><p>请求行</p></li><li><p>请求头</p></li><li><p>空行</p></li><li><p>请求体</p></li></ul><h4 id="结构如下图所示"><a href="#结构如下图所示" class="headerlink" title="结构如下图所示"></a>结构如下图所示</h4><p><img src="/2023/03/21/Node-js/image-20230319213734741.png" alt="image-20230319213734741"></p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p><img src="/2023/03/21/Node-js/image-20230319213852074.png" alt="image-20230319213852074"></p><p><img src="/2023/03/21/Node-js/image-20230318221538277.png" alt="image-20230318221538277"></p><p><strong>URL</strong>(统一资源定位器)</p><p><img src="/2023/03/21/Node-js/image-20230319214401867.png" alt="image-20230319214401867"></p><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><blockquote><p>格式：【头名：头值</p><p>===键头(host)：键值</p></blockquote><p><img src="/2023/03/21/Node-js/image-20230318221649603.png" alt="image-20230318221649603"></p><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><p><img src="/2023/03/21/Node-js/image-20230318221743730.png" alt="image-20230318221743730"></p><h3 id="响应报文的组成"><a href="#响应报文的组成" class="headerlink" title="响应报文的组成"></a>响应报文的组成</h3><blockquote><p>与请求报文基本一致</p></blockquote><p><img src="/2023/03/21/Node-js/image-20230319215930754.png" alt="image-20230319215930754"></p><ul><li>响应行</li><li>响应头</li><li>响应头</li><li>空行</li><li>响应体</li></ul><h4 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h4><p><img src="/2023/03/21/Node-js/image-20230319220034700.png" alt="image-20230319220034700"></p><p><img src="/2023/03/21/Node-js/image-20230319220748049.png" alt="image-20230319220748049"></p><p><strong>状态码</strong></p><p><img src="/2023/03/21/Node-js/image-20230319220820560.png" alt="image-20230319220820560"></p><p><img src="/2023/03/21/Node-js/image-20230319220939370.png" alt="image-20230319220939370"></p><blockquote><p>状态码与描述一致</p></blockquote><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><p><img src="/2023/03/21/Node-js/image-20230319221248861.png" alt="image-20230319221248861"></p><blockquote><p>自定义响应头，可能搜不到</p></blockquote><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><p><img src="/2023/03/21/Node-js/image-20230319221649429.png" alt="image-20230319221649429"></p><blockquote><p>跟请求体差不多</p></blockquote><hr><h2 id="IP地址与端口"><a href="#IP地址与端口" class="headerlink" title="IP地址与端口"></a>IP地址与端口</h2><h3 id="IP的组成与概念"><a href="#IP的组成与概念" class="headerlink" title="IP的组成与概念"></a>IP的组成与概念</h3><h4 id="IP类型"><a href="#IP类型" class="headerlink" title="IP类型"></a>IP类型</h4><ul><li><p>局域网(私网IP)</p></li><li><p>公网IP</p></li><li><p>本机IP</p></li></ul><p><img src="/2023/03/21/Node-js/image-20230319222715528.png" alt="image-20230319222715528"></p><blockquote><p>192.168.1.3</p></blockquote><p><img src="/2023/03/21/Node-js/image-20230319223331376.png" alt="image-20230319223331376"></p><h4 id="局域网-私网IP"><a href="#局域网-私网IP" class="headerlink" title="局域网(私网IP)"></a>局域网(私网IP)</h4><ul><li>家里的设备(对内)</li></ul><h4 id="公网IP"><a href="#公网IP" class="headerlink" title="公网IP"></a>公网IP</h4><ul><li>对外唯一</li></ul><h4 id="本机IP"><a href="#本机IP" class="headerlink" title="本机IP"></a>本机IP</h4><p><img src="/2023/03/21/Node-js/image-20230319223603974.png" alt="image-20230319223603974"></p><p><img src="/2023/03/21/Node-js/image-20230319223628254.png" alt="image-20230319223628254"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="/2023/03/21/Node-js/image-20230319223734557.png" alt="image-20230319223734557"></p><h3 id="计算机端口"><a href="#计算机端口" class="headerlink" title="计算机端口"></a>计算机端口</h3><p><img src="/2023/03/21/Node-js/image-20230320003249787.png" alt="image-20230320003249787"></p><blockquote><p>编号：应用程序的数字标识，如端口9000</p></blockquote><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="/2023/03/21/Node-js/image-20230320003122124.png" alt="image-20230320003122124"></p><p><img src="/2023/03/21/Node-js/image-20230320003520677.png" alt="image-20230320003520677"></p><hr><h2 id="创建HTTP请求"><a href="#创建HTTP请求" class="headerlink" title="创建HTTP请求"></a>创建HTTP请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.模块启用</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request,response</span>) =&gt;</span>&#123;</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;Hello HTTP Server&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.监听端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>(request,response)两个形参，<code>请求，响应报告</code></p><p><strong>响应内容中文乱码</strong></p><p>response.setHeader(‘content-type’,’text/html;charset=utf-8’),相当于设置格式版本，可以识别中文</p></blockquote><h3 id="效果如图所示"><a href="#效果如图所示" class="headerlink" title="效果如图所示"></a>效果如图所示</h3><p><img src="/2023/03/21/Node-js/image-20230320005918221.png" alt="image-20230320005918221"></p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a><strong>端口占用</strong></h4><blockquote><p>关闭窗口</p><p>更换端口</p></blockquote><h4 id="默认端口"><a href="#默认端口" class="headerlink" title="默认端口"></a><strong>默认端口</strong></h4><blockquote><p>HTTP 协议默认端口是 80 。HTTPS 协议的默认端口是 443, </p><p>HTTP 服务开发常用端口有 3000，8080，8090，9000 等</p></blockquote><h3 id="浏览器查看HTTP报文"><a href="#浏览器查看HTTP报文" class="headerlink" title="浏览器查看HTTP报文"></a>浏览器查看HTTP报文</h3><blockquote><p>网络里面查看</p></blockquote><h3 id="内置对象-获取请求报文"><a href="#内置对象-获取请求报文" class="headerlink" title="(内置对象)获取请求报文"></a>(内置对象)获取请求报文</h3><p><img src="/2023/03/21/Node-js/image-20230320203737176.png" alt="image-20230320203737176"></p><blockquote><p><code>parse解析</code></p></blockquote><h4 id="获取请求头"><a href="#获取请求头" class="headerlink" title="获取请求头"></a>获取请求头</h4><p><img src="/2023/03/21/Node-js/image-20230320202120998.png" alt="image-20230320202120998"></p><blockquote><p>在端口中因为有<code>&#39;-&#39;</code>不规范，所以要用引号引着，不然会识别成减号</p></blockquote><p><strong>JS</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.模块启用</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request,response</span>) =&gt;</span>&#123;</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment">//3.分别获取请求头、方法、路径、版本</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">headers</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">url</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">method</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">httpVersion</span>);</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;Hello HTTP Server 你好&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4.监听端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建成功&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="获取请求体"><a href="#获取请求体" class="headerlink" title="获取请求体"></a>获取请求体</h4><p><img src="/2023/03/21/Node-js/image-20230320211120375.png" alt="image-20230320211120375"></p><blockquote><p>空字符串累加</p></blockquote><h4 id="URL查询字符串"><a href="#URL查询字符串" class="headerlink" title="URL查询字符串"></a>URL查询字符串</h4><blockquote><p><code>通过解析可以用于获取请求内容或者请求路径</code></p></blockquote><p><img src="/2023/03/21/Node-js/image-20230320214756054.png" alt="image-20230320214756054"></p><blockquote><p>血的教训，不要留空格；<code>总的来说，也是js的对象的用法</code></p></blockquote><h4 id="另一种方法"><a href="#另一种方法" class="headerlink" title="另一种方法"></a>另一种方法</h4><p><img src="/2023/03/21/Node-js/image-20230320215634845.png" alt="image-20230320215634845"></p><blockquote><p><code>params:参数，里面一般是id</code></p></blockquote><p><img src="/2023/03/21/Node-js/image-20230329222028798.png" alt="image-20230329222028798"></p><h2 id="设置响应报文"><a href="#设置响应报文" class="headerlink" title="设置响应报文"></a>设置响应报文</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><img src="/2023/03/21/Node-js/image-20230320223913062.png" alt="image-20230320223913062"></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p><img src="/2023/03/21/Node-js/image-20230320224217603.png" alt="image-20230320224217603"></p><blockquote><p>操作都为设置，设置头(setHeader)、状态码、响应体(内容)、</p></blockquote><ul><li>response.方法</li></ul><hr><h1 id="网页加载的基本过程"><a href="#网页加载的基本过程" class="headerlink" title="网页加载的基本过程"></a>网页加载的基本过程</h1><h2 id="请求顺序"><a href="#请求顺序" class="headerlink" title="请求顺序"></a>请求顺序</h2><p><img src="/2023/03/21/Node-js/image-20230320225341705.png" alt="image-20230320225341705"></p><blockquote><p>响应对应的请求，只会调用请求函数里面的内容</p></blockquote><h3 id="根据请求条件设置，响应多个请求"><a href="#根据请求条件设置，响应多个请求" class="headerlink" title="根据请求条件设置，响应多个请求"></a>根据请求条件设置，响应多个请求</h3><h4 id="麻烦的方法"><a href="#麻烦的方法" class="headerlink" title="麻烦的方法"></a>麻烦的方法</h4><p><img src="/2023/03/21/Node-js/image-20230320230130597.png" alt="image-20230320230130597"></p><h4 id="拼接路径方法"><a href="#拼接路径方法" class="headerlink" title="拼接路径方法"></a>拼接路径方法</h4><p><img src="/2023/03/21/Node-js/image-20230320231354772.png" alt="image-20230320231354772"></p><blockquote><p>找相同路径，拼接新路径</p></blockquote><p><strong>可以设置一个空目录</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置根目录</span></span><br><span class="line">   <span class="keyword">const</span> root = __dirname +<span class="string">&#x27;/page&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="setHeader-血的教训"><a href="#setHeader-血的教训" class="headerlink" title="setHeader(血的教训)"></a>setHeader(<code>血的教训</code>)<img src="/2023/03/21/Node-js/image-20230321203135413.png" alt="image-20230321203135413"></h4><blockquote><p>setHeader(页面信息格式)，不能乱放，会让外部文件无法使用</p></blockquote><h2 id="响应顺序"><a href="#响应顺序" class="headerlink" title="响应顺序"></a><code>响应顺序</code></h2><blockquote><p>暂时还不清楚</p></blockquote><hr><h2 id="静态资源-部署的文件-服务"><a href="#静态资源-部署的文件-服务" class="headerlink" title="静态资源(部署的文件)服务"></a>静态资源(部署的文件)服务</h2><p><img src="/2023/03/21/Node-js/image-20230320230420794.png" alt="image-20230320230420794"></p><blockquote><p>动态资源，例如不断更新的热搜</p></blockquote><h3 id="网站根目录或静态资源目录"><a href="#网站根目录或静态资源目录" class="headerlink" title="网站根目录或静态资源目录"></a>网站根目录或静态资源目录</h3><h4 id="相对路径-1"><a href="#相对路径-1" class="headerlink" title="相对路径"></a>相对路径</h4><blockquote><p>./index.js</p><p>../index.js</p><p>index.js</p></blockquote><p>相对路径在发送请求时，<code>需要与当前页面 URL 路径进行</code> 计算 ，得到完整 URL 后，再发送请求，学习阶段用的较多</p><h4 id="绝对路径-更加可靠"><a href="#绝对路径-更加可靠" class="headerlink" title="绝对路径(更加可靠)"></a>绝对路径(更加可靠)</h4><blockquote><p>‘<a href="http://baidu.com/index.js&#39;">http://baidu.com/index.js&#39;</a></p><p>//baidu.com/index.js</p><p>/index.js</p></blockquote><p>绝对路径可靠性强，而且相对容易理解，在项目中运用较多</p><hr><h3 id="设置资源类型-mime类型"><a href="#设置资源类型-mime类型" class="headerlink" title="设置资源类型(mime类型)"></a>设置资源类型(mime类型)</h3><p>媒体类型（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。</p><p><img src="/2023/03/21/Node-js/image-20230321230822661.png" alt="image-20230321230822661"></p><blockquote><p>mime 类型结构： [type]/[subType]</p><p>例如： text/html ,text/css ,image/jpeg ,image/png application/json</p></blockquote><p>HTTP 服务可以设置响应头 Content-Type 来表明响应体的 MIME 类型，浏览器会根据该类型决定如何处理资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>通常在读取文件的时候进行类型的响应头设置(来处理对应类型的文件)</p></blockquote><h4 id="设置响应头类型"><a href="#设置响应头类型" class="headerlink" title="设置响应头类型"></a>设置响应头类型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文件后缀名，去除一个点</span></span><br><span class="line"><span class="keyword">let</span> ext = path.<span class="title function_">extname</span>(filePath).<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ext);</span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">`text/<span class="subst">$&#123;ext&#125;</span>;charset=utf-8`</span>);</span><br></pre></td></tr></table></figure><p><img src="/2023/03/21/Node-js/image-20230322163507173.png" alt="image-20230322163507173"></p><h1 id="两种请求方式"><a href="#两种请求方式" class="headerlink" title="两种请求方式"></a>两种请求方式</h1><h2 id="get与post"><a href="#get与post" class="headerlink" title="get与post"></a>get与post</h2><p><img src="/2023/03/21/Node-js/image-20230321182647444.png" alt="image-20230321182647444"></p><p><img src="/2023/03/21/Node-js/image-20230321182713961.png" alt="image-20230321182713961"></p><hr><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>1.1</strong> <strong>什么是模块化与模块</strong> <strong>?</strong></p><ul><li><p>将一个复杂的程序文件依据一定规则（规范）拆分成多个文件的过程称之为<code>模块化</code></p></li><li><p>其中拆分出的<code>每个文件就是一个模块</code>，模块的内部数据是<code>私有的</code>，不过模块可以<code>暴露内部数据</code>以便其他模块使用</p></li></ul><p><strong>1.2</strong> <strong>什么是模块化项目</strong> <strong>?</strong></p><ul><li>编码时是按照模块一个一个编码的， 整个项目就是一个模块化的项目</li></ul><p><strong>1.3</strong> <strong>模块化好处</strong></p><p>下面是模块化的一些好处：</p><ol><li><p>防止命名冲突<code>(私有)</code></p></li><li><p>高复用性<code>(其它项目可用)</code></p></li><li><p>高维护性<code>(分块维护)</code></p></li></ol><p><img src="/2023/03/21/Node-js/image-20230321232627754.png" alt="image-20230321232627754"></p><blockquote><p>小模块组合成大模块</p></blockquote><hr><h2 id="模块暴露数据"><a href="#模块暴露数据" class="headerlink" title="模块暴露数据"></a>模块暴露数据</h2><h3 id="模块初体验"><a href="#模块初体验" class="headerlink" title="模块初体验"></a>模块初体验</h3><p>可以通过下面的操作步骤，快速体验模块化</p><p><strong>1.创建 me.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入模块</span></span><br><span class="line"><span class="keyword">const</span> tiemo = <span class="built_in">require</span>(<span class="string">&#x27;./me.js&#x27;</span>);</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="title function_">tiemo</span>();</span><br></pre></td></tr></table></figure><p><strong>2.创建 index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tiemo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;贴膜....&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//暴露数据</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = tiemo;</span><br></pre></td></tr></table></figure><p><strong>3.效果如图</strong></p><p><img src="/2023/03/21/Node-js/image-20230322172755031.png" alt="image-20230322172755031"></p><h3 id="暴露数据的方式"><a href="#暴露数据的方式" class="headerlink" title="暴露数据的方式"></a>暴露数据的方式</h3><p><img src="/2023/03/21/Node-js/image-20230322173252264.png" alt="image-20230322173252264"></p><blockquote><p>很像对象的角色：</p><p>1.地址指向同一个对象</p><p>2.给对象的属性赋值(添加属性)</p></blockquote><h4 id="模块暴露数据的方式有两种："><a href="#模块暴露数据的方式有两种：" class="headerlink" title="模块暴露数据的方式有两种："></a><strong>模块暴露数据的方式有两种：</strong></h4><blockquote><ul><li><p>module.exports = value</p></li><li><p>exports.属性 = value</p></li></ul></blockquote><h4 id="使用时有几点注意："><a href="#使用时有几点注意：" class="headerlink" title="使用时有几点注意："></a>使用时有几点注意：</h4><blockquote><ul><li><p>module.exports 可以暴露<code>任意</code>数据</p></li><li><p>不能使用<code>exports = value</code>的形式暴露数据，模块内部 module 与 exports 的隐式关系</p></li></ul><p><code>exports = module.exports = &#123;&#125; </code>，require 返回的是目标模块中<code>module.exports</code>的值</p></blockquote><ul><li>果然很像，就是不能给地址赋值</li></ul><h3 id="导入-引入-模块的注意事项"><a href="#导入-引入-模块的注意事项" class="headerlink" title="导入(引入)模块的注意事项"></a>导入(引入)模块的注意事项</h3><p>1.自定义模块，路径建议写<code>相对路径</code></p><p>2.<code>js 和 json 文件</code>导入时可以不用写后缀，c/c++编写的 node 扩展文件也可以不写后缀，但是一般用不到</p><p>3.如果导入其他类型的文件，<code>会以 js 文件</code>进行处理</p><p>4.如果导入的路径是个<code>文件夹</code>，则<code>会首先检测</code>该文件夹下 <code>package.json </code>文件中 <code>main</code> 属性对应的文件，</p><p>如果存在<code>(main)</code>则导入，反之如果文件不存在会报错。</p><p>如果 <code>main 属性不存在</code>，或者 package.json 不存在，则会尝试导入文件夹下的 index.js 和index.json ，</p><p>如果还是没找到，就会报错</p><p>5.内置模块，直接 require 模块的名字即可</p><h4 id="简言之"><a href="#简言之" class="headerlink" title="简言之"></a>简言之</h4><blockquote><p>1.有<code>package.json </code>有main<code>无文件</code>，报错</p><p>2.有<code>package.json </code>无main或者直接无<code>package.json </code>，导入文件夹下的 index.js 和index.json ，</p></blockquote><h3 id="导入模块基本流程"><a href="#导入模块基本流程" class="headerlink" title="导入模块基本流程"></a>导入模块基本流程</h3><p><img src="/2023/03/21/Node-js/image-20230322180237385.png" alt="image-20230322180237385"></p><p><img src="/2023/03/21/Node-js/image-20230322181137393.png" alt="image-20230322181137393"></p><blockquote><p>缓存让文件更快地执行</p></blockquote><p>1.流程函数里边引入me文件的模块对结果产生缓存</p><p>2.由于已经缓存过，所以模块函数只需要返回一次的值(模块的)，减少了一次</p><hr><h1 id="Path环境变量了解"><a href="#Path环境变量了解" class="headerlink" title="Path环境变量了解"></a>Path环境变量了解</h1><blockquote><p>在电脑高级设置里面，可以设置环境，然后在终端任意位置都可以执行该路径下的文件</p></blockquote><ul><li>命令行先从当前执行路径下寻找文件</li><li>当找不到时，就从Path下寻找</li></ul><p>跟之前安装java环境一个意思</p><p><img src="/2023/03/21/Node-js/image-20230322192530045.png" alt="image-20230322192530045"></p><h2 id="查看环境位置"><a href="#查看环境位置" class="headerlink" title="查看环境位置"></a>查看环境位置</h2><p><img src="/2023/03/21/Node-js/image-20230322192737781.png" alt="image-20230322192737781"></p><hr><h1 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p>『包』英文单词是 <code>package</code> ，代表了一组特定功能的源码集合</p></li><li><p>管理『包』的应用软件，可以对「包」进行 <code>下载安装 ， 更新 ， 删除 ， 上传</code> 等操作</p></li></ul><h3 id="常用的包管理工具"><a href="#常用的包管理工具" class="headerlink" title="常用的包管理工具"></a>常用的包管理工具</h3><ul><li><p>npm</p></li><li><p>yarn</p></li><li><p>cnpm</p></li></ul><hr><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><ul><li><p>npm 全称 <code>Node Package Manager </code>，翻译为中文意思是『Node 的包管理工具』</p></li><li><p>npm 是 node.js 官方内置的包管理工具，是 <code>必须要掌握住的工具</code></p></li></ul><blockquote><p>npm init</p><p>npm i</p><p>npm -v </p><p>npm install</p><p>npm ls –depth 0  </p></blockquote><h3 id="npm-init-初始化"><a href="#npm-init-初始化" class="headerlink" title="npm init(初始化)"></a>npm init(初始化)</h3><ul><li><p><code>npm init</code> 命令的作用是将文件夹<code>初始化为一个『包』</code>， <code>交互式创建 </code>package.json 文件</p></li><li><p><code>package.json 是包的配置文件</code>，每个包都必须要有 package.json</p></li></ul><p><strong>package.json 内容示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1-npm&quot;</span><span class="punctuation">,</span> #包的名字</span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span> #包的版本</span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> #包的描述</span><br><span class="line"><span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span> #包的入口文件</span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> #脚本配置</span><br><span class="line"><span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> #作者</span><br><span class="line"><span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span> #开源证书</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>配置命令别名script</strong></p><blockquote><p><code>属于是脚本配置</code></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node server.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p><img src="/2023/03/21/Node-js/image-20230322221237860.png" alt="image-20230322221237860"></p><blockquote><p><code>使用别名来执行js文件</code></p></blockquote><p>通过配置命令别名可以更简单的执行命令，<code>其中start可以省略run</code></p><p><strong>补充说明：</strong></p><blockquote><ul><li><p>npm start 是项目中<code>常用</code>的一个命令，一般用来启动项目</p></li><li><p><code>npm run 有自动向上级目录查找的特性</code>，跟 require 函数也一样</p></li><li><p>对于陌生的项目，我们可以通过查看 scripts 属性来参考项目的一些操作</p></li></ul></blockquote><h4 id="初始化注意事项"><a href="#初始化注意事项" class="headerlink" title="初始化注意事项"></a>初始化注意事项</h4><p>1.package name ( 包名 ) 不能使用中文、大写，默认值是<code>文件夹的名称 </code>，所以文件夹名称也不能使用中文和大写</p><p>2.version ( 版本号 )要求 x.x.x 的形式定义，默认值是 1.0.0</p><p>3.ISC 证书与 MIT 证书功能上是相同的，关于开源证书扩展阅读<strong><a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html">http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</a></strong></p><p>4.package.json 可以手动创建与修改</p><p>5.使用 npm init -y 或者 npm init –yes 极速创建 package.json<code>(都使用默认)</code></p><h3 id="npm-install-和-npm-i-安装"><a href="#npm-install-和-npm-i-安装" class="headerlink" title="npm install 和 npm i (安装)"></a>npm install 和 npm i (安装)</h3><h4 id="命令安装包"><a href="#命令安装包" class="headerlink" title="命令安装包"></a>命令安装包</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">npm install &lt;包名&gt;</span><br><span class="line">npm i &lt;包名&gt;</span><br><span class="line"># 示例</span><br><span class="line">npm install uniq</span><br><span class="line">npm i uniq</span><br><span class="line">##########</span><br><span class="line"></span><br><span class="line">##########安装指定版本</span><br><span class="line">## 格式</span><br><span class="line">npm i &lt;包名@版本号&gt;</span><br><span class="line">## 示例</span><br><span class="line">npm i jquery@<span class="number">1.11</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><blockquote><p>运行之后文件夹下会增加两个资源</p><ul><li><p><code>node_modules 文件夹</code> 存放下载的包</p></li><li><p><code>package-lock.json </code>包的锁文件 ，用来锁定包的版本</p></li></ul></blockquote><ul><li><p>安装 uniq 之后， uniq 就是当前这个包的一个 依赖包 ，有时会简称为 依赖</p></li><li><p>比如我们创建一个包名字为 A，A 中安装了包名字是 B，我们就说 B 是 A 的一个依赖包 ，也会说A 依赖 B</p></li></ul><blockquote><ul><li><p>安装的就是依赖</p></li><li><p>node_modules 文件夹大多数情况都不会存入版本库</p></li></ul></blockquote><h4 id="require导入依赖"><a href="#require导入依赖" class="headerlink" title="require导入依赖"></a>require导入依赖</h4><ul><li><p>在当前文件夹下<code> node_modules 中</code>寻找同名的文件夹</p></li><li><p>在<code>上级目录中下的 node_modules 中</code>寻找同名的文件夹，直至找到磁盘根目录</p></li></ul><p><img src="/2023/03/21/Node-js/image-20230322185229183.png" alt="image-20230322185229183"></p><blockquote><ul><li><p>导入的命名一般直接就是依赖的名字，因为是<code>向上找包</code>，各个文件使用</p></li><li><p><code>自定义模块</code>准确找到路径，<code>没有向上功能</code></p></li></ul></blockquote><h4 id="删除依赖"><a href="#删除依赖" class="headerlink" title="删除依赖"></a>删除依赖</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 局部删除</span><br><span class="line">npm remove uniq</span><br><span class="line">npm r uniq</span><br><span class="line">## 全局删除</span><br><span class="line">npm remove -g nodemon</span><br></pre></td></tr></table></figure><h4 id="全局安装npm-i-g"><a href="#全局安装npm-i-g" class="headerlink" title="全局安装npm i -g"></a>全局安装npm i -g</h4><blockquote><p>npm i -g 依赖</p></blockquote><p><img src="/2023/03/21/Node-js/image-20230322191810486.png" alt="image-20230322191810486"></p><blockquote></blockquote><blockquote><p>windows 默认不允许 npm 全局命令执行脚本文件，所以需要修改执行策略</p></blockquote><ul><li>管理员身份 打开 powershell 命令行</li></ul><p><img src="/2023/03/21/Node-js/image-20230322192049673.png" alt="image-20230322192049673"></p><h3 id="了解-生产环境与开发环境"><a href="#了解-生产环境与开发环境" class="headerlink" title="(了解)生产环境与开发环境"></a>(了解)生产环境与开发环境</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><blockquote><ul><li>开发用于<code>写代码，测试</code></li><li>生产可以<code>正式运行</code>，<code>上线让客户访问</code></li></ul></blockquote><p><img src="/2023/03/21/Node-js/image-20230322191232588.png" alt="image-20230322191232588"></p><blockquote><p>比喻成锅<code>(制作阶段)</code>和菜<code>(从制作到上菜)</code>的关系</p></blockquote><h2 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h2><p><img src="/2023/03/21/Node-js/image-20230322221930038.png" alt="image-20230322221930038"></p><p><img src="/2023/03/21/Node-js/image-20230322221943559.png" alt="image-20230322221943559"></p><p><img src="/2023/03/21/Node-js/image-20230322222006399.png" alt="image-20230322222006399"></p><p><img src="/2023/03/21/Node-js/image-20230322222019126.png" alt="image-20230322222019126"></p><h4 id="补充说明："><a href="#补充说明：" class="headerlink" title="补充说明："></a>补充说明：</h4><blockquote><ul><li><p>建议使用第二种方式 进行镜像配置，因为后续修改起来会比较方便</p></li><li><p>虽然 cnpm 可以提高速度，但是 npm 也可以通过淘宝镜像进行加速，所以 npm 的使用率还是高于 cnpm</p></li></ul></blockquote><h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2><p><img src="/2023/03/21/Node-js/image-20230322222256971.png" alt="image-20230322222256971"></p><p><img src="/2023/03/21/Node-js/image-20230322222318485.png" alt="image-20230322222318485"></p><p><img src="/2023/03/21/Node-js/image-20230322222340494.png" alt="image-20230322222340494"></p><p><img src="/2023/03/21/Node-js/image-20230322222407750.png" alt="image-20230322222407750"></p><blockquote><p>这里有个小问题就是<code>全局安装的包不可用</code>，yarn 全局安装包的位置可以通过 yarn global bin来查看，</p></blockquote><p><img src="/2023/03/21/Node-js/image-20230322222629857.png" alt="image-20230322222629857"></p><h3 id="切记"><a href="#切记" class="headerlink" title="切记"></a>切记</h3><blockquote><p><code>包管理工具 不要混着用，切记，切记，切记</code></p></blockquote><hr><h3 id="仅用于了解的包内容"><a href="#仅用于了解的包内容" class="headerlink" title="仅用于了解的包内容"></a>仅用于了解的包内容</h3><h4 id="管理发布包"><a href="#管理发布包" class="headerlink" title="管理发布包"></a>管理发布包</h4><p><img src="/2023/03/21/Node-js/image-20230322222906202.png" alt="image-20230322222906202"></p><p><img src="/2023/03/21/Node-js/image-20230322222914985.png" alt="image-20230322222914985"></p><p><img src="/2023/03/21/Node-js/image-20230322222925869.png" alt="image-20230322222925869"></p><h4 id="其他语言的包管理工具"><a href="#其他语言的包管理工具" class="headerlink" title="其他语言的包管理工具"></a>其他语言的包管理工具</h4><p><img src="/2023/03/21/Node-js/image-20230322222948966.png" alt="image-20230322222948966"></p><h4 id="系统的软件包"><a href="#系统的软件包" class="headerlink" title="系统的软件包"></a>系统的软件包</h4><p><img src="/2023/03/21/Node-js/image-20230322223136238.png" alt="image-20230322223136238"></p><hr><h1 id="Express框架"><a href="#Express框架" class="headerlink" title="Express框架"></a>Express框架</h1><h2 id="express-介绍"><a href="#express-介绍" class="headerlink" title="express 介绍"></a>express 介绍</h2><p><img src="/2023/03/21/Node-js/image-20230323154335048.png" alt="image-20230323154335048"></p><h2 id="express-使用"><a href="#express-使用" class="headerlink" title="express 使用"></a>express 使用</h2><ul><li>express 本身是一个 npm 包(依赖)，所以可以通过 npm 安装</li></ul><blockquote><p>npm init</p><p>npm i express</p></blockquote><h3 id="express-初体验"><a href="#express-初体验" class="headerlink" title="express 初体验"></a>express 初体验</h3><p><strong>JS</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建路由规则</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;hello express world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;端口3000服务中&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>与http也没什么差别</p></blockquote><hr><h3 id="express-路由"><a href="#express-路由" class="headerlink" title="express 路由"></a>express 路由</h3><h4 id="路由概念与组成"><a href="#路由概念与组成" class="headerlink" title="路由概念与组成"></a>路由概念与组成</h4><blockquote><p>路由规则，<code>类似于if</code>的使用</p><ul><li>确定了响应<code>条件请求</code>的<code>相应内容</code></li></ul></blockquote><blockquote><p>app.<method>(path，callback)</method></p><p>应用对象.方法（路径,回调函数）</p></blockquote><h4 id="确定路由规则"><a href="#确定路由规则" class="headerlink" title="确定路由规则"></a>确定路由规则</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首页路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;我才是真正的首页&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//创建 post 路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;登录成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//匹配所有的请求方法</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/search&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;1 秒钟为您找到相关结果约 100,000,000 个&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>自定义报错</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义 404 路由</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;*&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="express兼容性"><a href="#express兼容性" class="headerlink" title="express兼容性"></a>express兼容性</h3><h4 id="兼容原生-HTTP-模块的获取方式"><a href="#兼容原生-HTTP-模块的获取方式" class="headerlink" title="兼容原生 HTTP 模块的获取方式"></a>兼容原生 HTTP 模块的获取方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取请求的路由规则</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//1. 获取报文的方式与原生 HTTP 获取方式是兼容的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">method</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">httpVersion</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="不同"><a href="#不同" class="headerlink" title="不同"></a>不同</h4><p><strong>原生要具体到keyword</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分别获取请求路径</span></span><br><span class="line"><span class="keyword">let</span> res = url.<span class="title function_">parse</span>(request.<span class="property">url</span>,<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// console.log(res.pathname);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="comment">//查询字符串</span></span><br><span class="line"><span class="keyword">let</span> keyword = res.<span class="property">query</span>.<span class="property">keyword</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(keyword);</span><br><span class="line">response.<span class="title function_">end</span>(<span class="string">&#x27;Hello HTTP Server 你好&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>express一行到位</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. express 独有的获取报文的方式</span></span><br><span class="line"><span class="comment">//获取查询字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>); <span class="comment">// 『相对重要』</span></span><br><span class="line"><span class="comment">// 获取指定的请求头</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="title function_">get</span>(<span class="string">&#x27;host&#x27;</span>));</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;请求报文的获取&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="获取路由参数-路径"><a href="#获取路由参数-路径" class="headerlink" title="获取路由参数(路径)"></a>获取路由参数(路径)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/:id.html&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;商品详情, 商品 id 为&#x27;</span> + req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>方便获取文件名字信息</p></blockquote><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><h3 id="express响应设置"><a href="#express响应设置" class="headerlink" title="express响应设置"></a>express响应设置</h3><p><strong>1.兼容http的API(接口)</strong></p><blockquote><p>同上面的请求方法</p></blockquote><p><strong>2.express 的响应方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个一个</span></span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">500</span>); <span class="comment">//设置响应状态码</span></span><br><span class="line">res.<span class="title function_">set</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="string">&#x27;yyy&#x27;</span>);<span class="comment">//设置响应头</span></span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;中文响应不乱码&#x27;</span>);<span class="comment">//设置响应体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*~~~~~~~                        ~~~~~~*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//连贯操作</span></span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">set</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="string">&#x27;yyy&#x27;</span>).<span class="title function_">send</span>(<span class="string">&#x27;你好朋友&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>3.特有的响应</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">redirect</span>(<span class="string">&#x27;http://atguigu.com&#x27;</span>)<span class="comment">//重定向</span></span><br><span class="line">res.<span class="title function_">download</span>(<span class="string">&#x27;./package.json&#x27;</span>);<span class="comment">//下载响应</span></span><br><span class="line">res.<span class="title function_">json</span>();<span class="comment">//响应 JSON</span></span><br><span class="line">res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/home.html&#x27;</span>) <span class="comment">//响应文件内容</span></span><br></pre></td></tr></table></figure><blockquote><p>重定向：就是地址变成跳转到另一个地址</p></blockquote><hr><h2 id="express中间件"><a href="#express中间件" class="headerlink" title="express中间件"></a>express中间件</h2><p><img src="/2023/03/21/Node-js/image-20230323164237549.png" alt="image-20230323164237549"></p><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p><img src="/2023/03/21/Node-js/image-20230323163701584.png" alt="image-20230323163701584"></p><blockquote><p>请求与响应过程中的停靠站</p></blockquote><p><img src="/2023/03/21/Node-js/image-20230323163829514.png" alt="image-20230323163829514"></p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li><p>全局中间件<code>(进站口)</code></p></li><li><p>路由中间件<code>(检票口)</code></p></li></ul><h3 id="全局中间站-进站口"><a href="#全局中间站-进站口" class="headerlink" title="全局中间站(进站口)"></a>全局中间站(进站口)</h3><ul><li><code>每一个请求</code> 到达服务端之后 <code>都会执行全局中间件函数</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> recordMiddleware = <span class="keyword">function</span>(<span class="params">request,response,next</span>)&#123;</span><br><span class="line"><span class="comment">//实现功能代码</span></span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line"><span class="comment">//执行next函数(当如果希望执行完中间件函数之后，仍然继续执行路由中的回调函数，必须调用next)</span></span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">use</span>(recordMiddleware);<span class="comment">//应用</span></span><br></pre></td></tr></table></figure><h3 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/路径&#x27;</span>,<span class="string">`中间件函数`</span>,<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/路径&#x27;</span>,<span class="string">`中间件函数1`</span>,<span class="string">`中间件函数2`</span>,<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>如果 <code>只需要对某一些路由</code>进行功能封装 ，则就需要路由中间件</p></blockquote><h3 id="express-处理静态资源的中间件"><a href="#express-处理静态资源的中间件" class="headerlink" title="express 处理静态资源的中间件"></a>express 处理静态资源的中间件</h3><blockquote><ul><li>谁先匹配谁(写在前边)</li><li>路由响应动态资源(变动)，静态资源中间件响应静态资源(不变的html文件)</li></ul></blockquote><p><img src="/2023/03/21/Node-js/image-20230323165812012.png" alt="image-20230323165812012"></p><p><img src="/2023/03/21/Node-js/image-20230323165840597.png" alt="image-20230323165840597"></p><hr><h2 id="Router封装中间件"><a href="#Router封装中间件" class="headerlink" title="Router封装中间件"></a>Router封装中间件</h2><p><img src="/2023/03/21/Node-js/image-20230323165938963.png" alt="image-20230323165938963"></p><blockquote><p>简而言之就是<code>封装一个</code>引用<code>中间件</code>的<code>模块(包)</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.引入子路由文件</span></span><br><span class="line"><span class="keyword">const</span> homeRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/homeRouter&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.设置和使用中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(homeRouter);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000 端口启动....&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>补充:在主文件设置前缀，不用模块多次设置</p></blockquote><p><img src="/2023/03/21/Node-js/image-20230323190431402.png" alt="image-20230323190431402"></p><h2 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h2><blockquote><p>请求体解析</p></blockquote><p>用于方便获取请求体信息</p><p><code>后面被mongoose的一个功能代替</code></p><p><img src="/2023/03/21/Node-js/image-20230329185903233.png" alt="image-20230329185903233"></p><hr><h1 id="防盗链referer"><a href="#防盗链referer" class="headerlink" title="防盗链referer"></a>防盗链referer</h1><p><img src="/2023/03/21/Node-js/image-20230323181410421.png" alt="image-20230323181410421"></p><hr><h1 id="EJS-模板引擎"><a href="#EJS-模板引擎" class="headerlink" title="EJS 模板引擎"></a>EJS 模板引擎</h1><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p><img src="/2023/03/21/Node-js/image-20230323170402215.png" alt="image-20230323170402215"></p><blockquote><p>用于分离<code>服务端的JS</code>与html(文本)数据</p></blockquote><h3 id="EJS-初体验"><a href="#EJS-初体验" class="headerlink" title="EJS 初体验"></a>EJS 初体验</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.引入ejs</span></span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="comment">//2.定义数据</span></span><br><span class="line"><span class="keyword">let</span> person = [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王二麻子&#x27;</span>];</span><br><span class="line"><span class="comment">//3.ejs解析模板返回结构</span></span><br><span class="line"><span class="comment">//&lt;%= %&gt; 是ejs解析内容的标记，作用是输出当前表达式的执行结构</span></span><br><span class="line"><span class="keyword">let</span> html = ejs.<span class="title function_">render</span>(‘&lt;%= person.<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>) %&gt;’, &#123;<span class="attr">person</span>:person&#125;);</span><br><span class="line"><span class="comment">//4.输出结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br></pre></td></tr></table></figure><h3 id="简单语法"><a href="#简单语法" class="headerlink" title="简单语法"></a>简单语法</h3><p><img src="/2023/03/21/Node-js/image-20230323170552360.png" alt="image-20230323170552360"></p><h3 id="实现服务端JS与html分离"><a href="#实现服务端JS与html分离" class="headerlink" title="实现服务端JS与html分离"></a>实现服务端JS与html分离</h3><p><img src="/2023/03/21/Node-js/image-20230323184304256.png" alt="image-20230323184304256"></p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p><img src="/2023/03/21/Node-js/image-20230323184900656.png" alt="image-20230323184900656"></p><blockquote><p>两个isLogin对应的对象是不同的，但是<code>理解起来就是对象</code></p></blockquote><hr><h1 id="在express框架中使用ejs"><a href="#在express框架中使用ejs" class="headerlink" title="在express框架中使用ejs"></a>在express框架中使用ejs</h1><p><img src="/2023/03/21/Node-js/image-20230323185800495.png" alt="image-20230323185800495"></p><blockquote><p>文件后缀名.ejs</p></blockquote><h1 id="express-generator"><a href="#express-generator" class="headerlink" title="express-generator"></a>express-generator</h1><blockquote><p><code>快速创建一个express骨架</code></p></blockquote><ul><li>npm install -g <express-generator></express-generator></li></ul><blockquote><p>全局安装</p></blockquote><ul><li>nodemon start</li></ul><blockquote><p>启动服务</p></blockquote><h3 id="创建结果"><a href="#创建结果" class="headerlink" title="创建结果"></a>创建结果</h3><p><img src="/2023/03/21/Node-js/image-20230323214957024.png" alt="image-20230323214957024"></p><h4 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h4><blockquote><ul><li>里面包含各种模块(所以要安装好依赖)</li><li>明白各种文件的用途(哪个是启动文件、模块文件)</li><li>发现了router的前缀设置新用法</li><li>views文件下安装的是首页架构，使用了ejs渲染</li></ul></blockquote><p><img src="/2023/03/21/Node-js/image-20230323215503900.png" alt="image-20230323215503900"></p><blockquote><p>我发现文件好短，都是各种文件夹对功能分门别类放好的，都是通过各种引入模块实现的</p></blockquote><h2 id="查看上传文件"><a href="#查看上传文件" class="headerlink" title="查看上传文件"></a>查看上传文件</h2><p><img src="/2023/03/21/Node-js/image-20230324002428073.png" alt="image-20230324002428073"></p><blockquote><p>form上传数据的细节</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;Express&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理文件上传</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/portrait&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//显示网页表单</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/portrait&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;portrait&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><blockquote><p>多复制还是有好处的，或者看看有没有提示。不然很容易漏掉东西</p></blockquote><h1 id="处理上传文件"><a href="#处理上传文件" class="headerlink" title="处理上传文件"></a>处理上传文件</h1><h2 id="formidable"><a href="#formidable" class="headerlink" title="formidable"></a>formidable</h2><blockquote><p>分别<code>保存用户名和文件内容</code></p></blockquote><p><img src="/2023/03/21/Node-js/image-20230324162239555.png" alt="image-20230324162239555"></p><p><strong>express中的操作流程</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理文件上传</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/portrait&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//创建 form对象</span></span><br><span class="line">  <span class="keyword">const</span> form = <span class="title function_">formidable</span>(&#123; <span class="attr">multiples</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  <span class="comment">//解析请求报文</span></span><br><span class="line">  form.<span class="title function_">parse</span>(req, <span class="function">(<span class="params">err, fields, files</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="title function_">next</span>(err);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//作为json格式响应在页面上</span></span><br><span class="line">    <span class="comment">// res.json(&#123; fields, files &#125;);</span></span><br><span class="line">      <span class="comment">//打印在控制台</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fields);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(files);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><p><img src="/2023/03/21/Node-js/image-20230324155728029.png" alt="image-20230324155728029"></p><blockquote><p>打印储存名字和文件内容的两个文件。其中，可以利用file里面的<code>newFilename: </code>属性获取文件的路径名字(url)，为后续响应做准备</p></blockquote><hr><h1 id="阶段性练习"><a href="#阶段性练习" class="headerlink" title="阶段性练习"></a>阶段性练习</h1><h2 id="accounts"><a href="#accounts" class="headerlink" title="accounts"></a>accounts</h2><p><strong>1.传递数据给表单添加name属性</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;item&quot;</span>&gt;</span>事项<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                <span class="attr">name</span>=<span class="string">&quot;title&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">              /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.检测post请求，并查询信息传递</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));<span class="comment">//中间件解析url-encoded，使得req.body有数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//新增记录</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/account&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">//获取请求体数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;添加记录&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>3.对数据进行保存管理(lowbd)</strong></p><p>get(‘post’).push{内容}</p><p>get(‘post’).unshift{内容}</p><p>get(‘post’).remove{内容}</p><p><strong>4.添加id</strong></p><p>shortid</p><p>{id:xxx,…req.body}</p><blockquote><p>展开运算符</p></blockquote><p><strong>5.使用ejs分离</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增记录</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/account&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">//获取请求体数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;success&#x27;</span>,&#123;<span class="attr">msg</span>:<span class="string">&#x27;添加成功~&#x27;</span>,<span class="attr">url</span>:<span class="string">&#x27;account&#x27;</span>&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>让数据变灵活</p></blockquote><p><img src="/2023/03/21/Node-js/image-20230326165012530.png" alt="image-20230326165012530"></p><blockquote><p>甚至可以变成js执行语句，灵活变动样式</p></blockquote><p><strong>6.删除数据</strong></p><blockquote><p>一般是通过id来删除数据的(唯一性)</p></blockquote><p><img src="/2023/03/21/Node-js/image-20230326165304126.png" alt="image-20230326165304126"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS进阶</title>
      <link href="/2023/03/14/JS%E8%BF%9B%E9%98%B6/"/>
      <url>/2023/03/14/JS%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="JS进阶"><a href="#JS进阶" class="headerlink" title="JS进阶"></a>JS进阶</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F.png"></p><h3 id="块作用域，函数大括号"><a href="#块作用域，函数大括号" class="headerlink" title="块作用域，函数大括号"></a>块作用域，函数大括号</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F.png"></p><blockquote><p>var没有块作用域。let有(不能被访问)</p></blockquote><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%97%AE%E9%A2%98.png"></p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE.png"></p><h4 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E6%9F%A5%E6%89%BE%E6%9C%BA%E5%88%B6.png"></p><h3 id="JS立即回收机制"><a href="#JS立即回收机制" class="headerlink" title="JS立即回收机制"></a>JS立即回收机制</h3><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><blockquote><p>标记引用(数据的地址)次数，已淘汰</p></blockquote><h4 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E6%B3%95.png"></p><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/%E8%A7%A3%E5%86%B3%E4%BA%86%E7%9B%B8%E4%BA%92%E5%BC%95%E7%94%A8%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F.png"></p><blockquote><p>解决了相互引用导致的数据不能清除(引用一直有)</p><p>能够<code>被标记</code>的就不会被清除</p></blockquote><h5 id="解释如下图"><a href="#解释如下图" class="headerlink" title="解释如下图"></a>解释如下图</h5><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98.png"></p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/%E9%97%AD%E5%8C%85.png"></p><blockquote><p>闭包可以实现数据私有，内层函数+(引用)外层的变量</p></blockquote><h4 id="能够被标记"><a href="#能够被标记" class="headerlink" title="能够被标记"></a>能够被标记</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/%E8%BF%99%E6%A0%B7%E5%8F%AF%E4%BB%A5%E5%81%9A%E6%A0%87%E8%AE%B0%E8%80%8C%E4%B8%8D%E8%A2%AB%E5%9B%9E%E6%94%B6.png"></p><h4 id="问题解释"><a href="#问题解释" class="headerlink" title="问题解释"></a>问题解释</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/%E9%97%AD%E5%8C%85%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E9%87%8A.png"></p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/var%E7%9A%84%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87.png"></p><blockquote><p>var会提升到当前作用域最前面声明<code>出现先声明再赋值</code></p></blockquote><hr><h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><h4 id="提升过程"><a href="#提升过程" class="headerlink" title="提升过程"></a>提升过程</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87%E6%80%BB%E7%BB%93.png"></p><h3 id="arguments-本身是伪数组"><a href="#arguments-本身是伪数组" class="headerlink" title="arguments(本身是伪数组)"></a>arguments(本身是伪数组)</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0.png"></p><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310164108460.png"></p><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310164522922.png" alt="image-20230310164522922"></p><blockquote><p>当不知道参数有几个时</p></blockquote><h3 id="展开运算符-…"><a href="#展开运算符-…" class="headerlink" title="展开运算符(…)"></a>展开运算符(…)</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310164842406.png" alt="image-20230310164842406"></p><blockquote><p>Math方法时，…将数组可以展开为数字</p></blockquote><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310165009430.png" alt="image-20230310165009430"></p><hr><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><code>注意事项</code></h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230313155546032.png" alt="image-20230313155546032"></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310165840906.png" alt="image-20230310165840906"></p><blockquote><p>因为=&gt;{}函数时</p><p>所以对象=&gt;({ name : myname })，用来区分对象与函数</p></blockquote><h3 id="箭头函数参数"><a href="#箭头函数参数" class="headerlink" title="箭头函数参数"></a>箭头函数参数</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310170123503.png" alt="image-20230310170123503"></p><blockquote><p>参数两个或以上时，需要用（x，y）</p></blockquote><h4 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310170401865.png"></p><h3 id="箭头函数的this指向"><a href="#箭头函数的this指向" class="headerlink" title="箭头函数的this指向"></a>箭头函数的this指向</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310170917468.png" alt="image-20230310170917468"></p><blockquote><p>指向<code>上层作用域的指向</code></p></blockquote><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310171501923.png" alt="image-20230310171501923"></p><hr><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="交换两个变量"><a href="#交换两个变量" class="headerlink" title="交换两个变量"></a>交换两个变量</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310172217322.png" alt="image-20230310172217322"></p><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310172628192.png" alt="image-20230310172628192"></p><h4 id="数组结构变量的多少与函数的-形参，实参-相似"><a href="#数组结构变量的多少与函数的-形参，实参-相似" class="headerlink" title="数组结构变量的多少与函数的(形参，实参)相似"></a>数组结构变量的多少与函数的(形参，实参)相似</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310173026638.png" alt="image-20230310173026638"></p><blockquote><p>1.变量多undefined,少了就少了</p><p>2.剩余数组，直接返回真数组真好用</p></blockquote><h3 id="多维数组的数组解构"><a href="#多维数组的数组解构" class="headerlink" title="多维数组的数组解构"></a>多维数组的数组解构</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310173725799.png" alt="image-20230310173725799"></p><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310173813552.png" alt="image-20230310173813552"></p><hr><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310174158106.png" alt="image-20230310174158106"></p><blockquote><p>要一致且，前面不能有命名</p></blockquote><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310174426028.png" alt="image-20230310174426028"></p><blockquote><p>或者改名</p></blockquote><h4 id="多级数组对象解构"><a href="#多级数组对象解构" class="headerlink" title="多级数组对象解构"></a>多级数组对象解构</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310183622039.png" alt="image-20230310183622039"> </p><h4 id="对单一元素进行解构"><a href="#对单一元素进行解构" class="headerlink" title="对单一元素进行解构"></a>对单一元素进行解构</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310184700089.png" alt="image-20230310184700089"></p><h4 id="下面就是对象解构的魅力"><a href="#下面就是对象解构的魅力" class="headerlink" title="下面就是对象解构的魅力"></a>下面就是对象解构的魅力</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310221544030.png" alt="image-20230310221544030"></p><blockquote><p>取出了目标的两个属性与声明的进行绑定</p></blockquote><hr><h2 id="几种类似的遍历"><a href="#几种类似的遍历" class="headerlink" title="几种类似的遍历"></a>几种类似的遍历</h2><h3 id="遍历数组forEach"><a href="#遍历数组forEach" class="headerlink" title="遍历数组forEach"></a>遍历数组forEach</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310185413006.png" alt="image-20230310185413006"></p><blockquote><p>加强版的for循环</p></blockquote><h4 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h4><h5 id="js"><a href="#js" class="headerlink" title="js"></a>js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">//2.遍历对象,利用解构，获得对应的信息</span></span><br><span class="line">goodsList.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;name,price,picture&#125; = item</span><br><span class="line">    str += <span class="string">` </span></span><br><span class="line"><span class="string">            &lt;div class=&quot;item&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;img src=&quot;<span class="subst">$&#123;picture&#125;</span>&quot; alt=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;p class=&quot;name&quot;&gt;<span class="subst">$&#123;name&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p class=&quot;price&quot;&gt;<span class="subst">$&#123;price&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>();</span><br><span class="line">&#125;)    </span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>).<span class="property">innerHTML</span> = str</span><br></pre></td></tr></table></figure><blockquote><p>1.利用forEach进行遍历，解构每个数组里面的对象</p><p>2.获取对象的属性值</p><p>3.item用来代表每个数组元素arr[i]</p></blockquote><h3 id="filter过滤"><a href="#filter过滤" class="headerlink" title="filter过滤"></a>filter过滤</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310215613579.png" alt="image-20230310215613579"></p><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310220401625.png" alt="image-20230310220401625"></p><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(goodsList)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.filter&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = goodsList</span><br><span class="line">    <span class="keyword">const</span> &#123;tagName,dataset&#125; = e.<span class="property">target</span></span><br><span class="line">    <span class="keyword">if</span>(tagName === <span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dataset.<span class="property">index</span> === <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                arr = goodsList.<span class="title function_">filter</span>( <span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">price</span> &lt; <span class="number">100</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dataset.<span class="property">index</span> === <span class="string">&#x27;2&#x27;</span>)&#123;</span><br><span class="line">                arr = goodsList.<span class="title function_">filter</span>( <span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">price</span> &gt; <span class="number">100</span> &amp;&amp; item.<span class="property">price</span> &lt;<span class="number">300</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dataset.<span class="property">index</span> === <span class="string">&#x27;3&#x27;</span>)&#123;</span><br><span class="line">                arr = goodsList.<span class="title function_">filter</span>( <span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">price</span> &gt;= <span class="number">300</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">render</span>(arr)</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="效果如下-1"><a href="#效果如下-1" class="headerlink" title="效果如下"></a>效果如下</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230311002050508.png" alt="image-20230311002050508"></p><hr><blockquote><p>1.goodsList.filter( item =&gt; item.price &lt; 100)</p><p>返回的是满足条件的数组</p><p>2.在一行的时候，return可以省略</p></blockquote><h2 id="深入对象"><a href="#深入对象" class="headerlink" title="深入对象"></a>深入对象</h2><p>创建对象</p><p>三种方法</p><p>字面量、直接、构建函数</p><h3 id="对象的底层包装"><a href="#对象的底层包装" class="headerlink" title="对象的底层包装"></a>对象的底层包装</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230312154834591.png" alt="image-20230312154834591"></p><blockquote><p>平时可以引用的.length，toFixed，tagName等等,都是包装好的对象，所以可以肢解引用</p></blockquote><h3 id="Object静态方法"><a href="#Object静态方法" class="headerlink" title="Object静态方法"></a>Object静态方法</h3><h4 id="获取属性名"><a href="#获取属性名" class="headerlink" title="获取属性名"></a>获取属性名</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230312155618882.png" alt="image-20230312155618882"></p><blockquote><p>用来替代for in </p></blockquote><h4 id="对象的拷贝"><a href="#对象的拷贝" class="headerlink" title="对象的拷贝"></a>对象的拷贝</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230312155918424.png" alt="image-20230312155918424"></p><h2 id="Array-几种类似的遍历"><a href="#Array-几种类似的遍历" class="headerlink" title="(Array)几种类似的遍历"></a>(Array)几种类似的遍历</h2><h3 id="遍历数组forEach-1"><a href="#遍历数组forEach-1" class="headerlink" title="遍历数组forEach"></a>遍历数组forEach</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230310185413006.png" alt="image-20230310185413006"></p><blockquote><p>加强版的for循环</p></blockquote><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230312160401104.png" alt="image-20230312160401104"></p><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230312161444135.png" alt="image-20230312161444135"></p><blockquote><p>将循环一次后的值作为下一次循环的初始值</p></blockquote><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230313162108237.png" alt="image-20230313162108237"></p><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230313170300348.png" alt="image-20230313170300348"></p><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230313170330939.png" alt="image-20230313170330939"></p><blockquote><p>由此可见，两者用法一样，返回的是</p><p>1.find返回的是数</p><p>2.every返回的是布尔值</p></blockquote><h4 id="相同"><a href="#相同" class="headerlink" title="相同"></a>相同</h4><blockquote><p>在调用 <code>every</code>(函数) 之后添加到数组中的元素不会被 <code>callback</code> 访问到。如果数组中存在的元素被更改，则他们传入 <code>callback</code> 的值是 <code>every</code> 访问到他们那一刻的值。</p><p>调用callback直至满足</p></blockquote><h4 id="不同"><a href="#不同" class="headerlink" title="不同"></a>不同</h4><blockquote><p>find:所有索引都可调用<code>(遍历所有)</code>，被删除的元素仍旧会被访问到，但是其值已经是 undefined 了。</p><p>every:只为赋值的索引调用，那些被删除的元素或从来未被赋值的元素将不会被访问到。<code>(遍历有值)</code></p></blockquote><p>伪数组转化为真数组</p><p>Array.from()</p><p>字符串转化为数组</p><p>const arr = str.split(‘分隔符’)</p><p>将对象获取</p><p>const arr = Object.value(对象)</p><blockquote><p>Object.value(对象)，返回的是数组</p></blockquote><p>并转化为字符串</p><p>arr.join(‘分隔符’)</p><h3 id="String的实例方法"><a href="#String的实例方法" class="headerlink" title="String的实例方法"></a>String的实例方法</h3><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230313181639415.png" alt="image-20230313181639415"></p><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`&lt;p class=&quot;spec&quot;&gt;<span class="subst">$&#123;<span class="built_in">Object</span>.values(spec).join(<span class="string">&#x27;/&#x27;</span>)&#125;</span>&lt;/p&gt;`</span></span><br><span class="line"><span class="keyword">const</span> total = goodsList.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,item</span>)=&gt;</span>prev + (item.<span class="property">price</span> * item.<span class="property">count</span>)</span><br><span class="line">,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><p>1.用reduce累加，要给一个初始值，否则第一个元素就是prev</p><p>2.Object.values(对象)返回一个数组，记得要加S</p></blockquote><hr><h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230313224149293.png" alt="image-20230313224149293"></p><blockquote><p>JS主要是面向过程</p></blockquote><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230313224848129.png" alt="image-20230313224848129"></p><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><blockquote><p>每个对象，都会有原型对象（也是属性），prototype。成为共用对象</p><p>解决浪费内存的问题</p></blockquote><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230313225509117.png" alt="image-20230313225509117"></p><p><img src="/2023/03/14/JS%E8%BF%9B%E9%98%B6/image-20230313234818426.png" alt="image-20230313234818426"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS2023BOM</title>
      <link href="/2023/03/09/JS2023BOM/"/>
      <url>/2023/03/09/JS2023BOM/</url>
      
        <content type="html"><![CDATA[<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h2><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><p><img src="/2023/03/09/JS2023BOM/%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5.png"></p><blockquote><p>同步：按照顺序执行</p><p>异步：事件可以同时执行</p></blockquote><h4 id="同步任务"><a href="#同步任务" class="headerlink" title="同步任务"></a>同步任务</h4><blockquote><p>指任务都在主线上执行，形成一个<code>执行线</code></p></blockquote><h4 id="异步任务-后执行"><a href="#异步任务-后执行" class="headerlink" title="异步任务(后执行)"></a>异步任务(后执行)</h4><p><img src="/2023/03/09/JS2023BOM/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1.png"></p><blockquote><p>很多的事件、资源加载，定时器等等(有独立性)</p></blockquote><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><p><img src="/2023/03/09/JS2023BOM/%E5%90%84%E7%A7%8D%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E5%88%B7%E6%96%B0.png"></p><p><img src="/2023/03/09/JS2023BOM/%E8%8E%B7%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%A1%E6%81%AF.png"></p><p><img src="/2023/03/09/JS2023BOM/%E9%A1%B5%E9%9D%A2%E5%89%8D%E8%BF%9B%E5%90%8E%E9%80%80.png"></p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hahaah&#x27;</span></span><br><span class="line"><span class="comment">//定义规则(匹配信息)</span></span><br><span class="line"><span class="keyword">const</span> reg =<span class="regexp">/ha/</span></span><br><span class="line"><span class="comment">//打印结果，返回布尔值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str))</span><br><span class="line"><span class="comment">//同理</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(str))</span><br><span class="line"><span class="comment">//但返回空或者数组</span></span><br></pre></td></tr></table></figure><h2 id="元字符之边界符"><a href="#元字符之边界符" class="headerlink" title="元字符之边界符"></a>元字符之边界符</h2><blockquote><p>^以开头</p><p>$以结尾</p><p>^哈$精准单一个哈字</p></blockquote><h3 id="元字符之量词"><a href="#元字符之量词" class="headerlink" title="元字符之量词"></a>元字符之量词</h3><p><img src="/2023/03/09/JS2023BOM/%E8%BE%B9%E7%95%8C%E7%AC%A6%E5%BB%B6%E4%BC%B8.png"></p><blockquote><p>^哈*$ <code>只能是哈，次数+</code></p><p>^哈$ <code>精准</code></p></blockquote><p><img src="/2023/03/09/JS2023BOM/%E8%BE%B9%E7%95%8C%E7%AC%A6%E9%87%8F%E8%AF%8D.png"></p><h3 id="元字符之字符类"><a href="#元字符之字符类" class="headerlink" title="元字符之字符类"></a>元字符之字符类</h3><p><img src="/2023/03/09/JS2023BOM/%E8%BE%B9%E7%95%8C%E7%AC%A6%E4%B9%8B%E5%AD%97%E7%AC%A6%E7%B1%BB.png"></p><blockquote><p>最后一个优势在于可以出现两次</p><p><code>均为精准</code></p></blockquote><p><img src="/2023/03/09/JS2023BOM/%E5%85%A8%E9%80%89%E7%9A%84%E5%85%83%E5%AD%97%E7%AC%A6.png"></p><blockquote><p>全选</p></blockquote><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><img src="/2023/03/09/JS2023BOM/%E5%B0%B1%E8%BF%91%E5%8E%9F%E5%88%99%E5%85%83%E5%AD%97%E7%AC%A6.png"></p><blockquote><p>^[1-9] [0-9]{4,}$：以第一个中括号开头，以第二个中括号结尾，且满足+=4</p><p>中间没有空格</p></blockquote><blockquote><p>[^0-9],除了括号里面的，<code>表示取反</code></p></blockquote><p><img src="/2023/03/09/JS2023BOM/%E5%BF%AB%E6%8D%B7%E5%AE%9A%E4%B9%89%E5%AD%97%E7%AC%A6%E7%B1%BB.png"></p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p><img src="/2023/03/09/JS2023BOM/%E4%BF%AE%E9%A5%B0%E7%AC%A6.png"></p><blockquote><p>用于约束正则表达式</p></blockquote><h3 id="replace替换"><a href="#replace替换" class="headerlink" title="replace替换"></a>replace替换</h3><p><img src="/2023/03/09/JS2023BOM/%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6%E7%B1%BB.png"></p><blockquote><p>联想到：屏蔽词，王者里面的</p></blockquote><p><img src="/2023/03/09/JS2023BOM/%E6%95%B4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2.png"></p><hr><h2 id="短信发送倒计时"><a href="#短信发送倒计时" class="headerlink" title="短信发送倒计时"></a>短信发送倒计时</h2><h3 id="change事件监听"><a href="#change事件监听" class="headerlink" title="change事件监听"></a>change事件监听</h3><blockquote><p>有改动再触发</p></blockquote><p><img src="/2023/03/09/JS2023BOM/change%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6.png"></p><h3 id="追加样式-toggle"><a href="#追加样式-toggle" class="headerlink" title="追加样式(toggle)"></a>追加样式(toggle)</h3><blockquote><p>实现同一协议的勾选的css切换</p></blockquote><h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><p><img src="/2023/03/09/JS2023BOM/%E8%BF%BD%E5%8A%A0%E6%A0%B7%E5%BC%8Ftoggle.png"></p><h4 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h4><p><img src="/2023/03/09/JS2023BOM/toggle.png"></p><h3 id="追加样式-contains"><a href="#追加样式-contains" class="headerlink" title="追加样式(contains)"></a>追加样式(contains)</h3><blockquote><p>含有返回true,<code>利用返回判断 </code></p><p>我的想法是直接判断样式(以前的伪类样式返回数字)</p></blockquote><p><img src="/2023/03/09/JS2023BOM/%E6%A0%B7%E5%BC%8F%E8%BF%BD%E5%8A%A0contains.png"></p><h3 id="全局提交判断"><a href="#全局提交判断" class="headerlink" title="全局提交判断"></a>全局提交判断</h3><blockquote><p>利用封装函数返回的值，一般都是<code>布尔值</code></p></blockquote><p><img src="/2023/03/09/JS2023BOM/%E5%8C%85%E8%A3%85%E5%87%BD%E6%95%B0%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E9%80%9A%E8%BF%87.png"></p><h3 id="flag-防误触变量"><a href="#flag-防误触变量" class="headerlink" title="flag(防误触变量)"></a>flag(防误触变量)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line">code.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">//防止多次计时</span></span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    flag = <span class="literal">false</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    flag = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>防误触，多次计时</p></blockquote><h3 id="localStorage的使用"><a href="#localStorage的使用" class="headerlink" title="localStorage的使用"></a>localStorage的使用</h3><p><img src="/2023/03/09/JS2023BOM/%E5%AD%98%E5%82%A8localStorage.png"></p><blockquote><p>可以用于缓存用户名</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git基本用法</title>
      <link href="/2023/02/28/Git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2023/02/28/Git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Git的初认识"><a href="#Git的初认识" class="headerlink" title="Git的初认识"></a>Git的初认识</h2><p><img src="/2023/02/28/Git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/Git%E5%B7%A5%E4%BD%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><h3 id="git创建仓库"><a href="#git创建仓库" class="headerlink" title="git创建仓库"></a>git创建仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.仓库初始化，同时生成默认master分支</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><blockquote><ul><li>每次操作之前都要进行git init</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.将内容放到暂缓区(因为不是指定，所以可能会有多余文件)</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment">#2.详细文件</span></span><br><span class="line">git add 文件</span><br></pre></td></tr></table></figure><blockquote><ul><li>送至暂缓区(修改的文件需要追踪才能提交)</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.将暂缓区的信息提交</span></span><br><span class="line">git commit</span><br><span class="line"><span class="comment">#包含了add,但可能会有多余文件</span></span><br><span class="line">git commit -a -m <span class="string">&quot;修改注释&quot;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>-m  “修改注释”</li><li><code>一键提交不知道为什么不行</code></li></ul></blockquote><hr><h2 id="git分支管理"><a href="#git分支管理" class="headerlink" title="git分支管理"></a>git分支管理</h2><p><img src="/2023/02/28/Git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86.png"></p><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.生成分支</span></span><br><span class="line">git branch 分支名字</span><br></pre></td></tr></table></figure><blockquote><ul><li>第一次提交会有默认分支master</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.切换到()分支</span></span><br><span class="line">git checkout 分支名字</span><br><span class="line"><span class="comment">#2.一步到位，生成+切换</span></span><br><span class="line">git checkout -b 文件</span><br></pre></td></tr></table></figure><blockquote><ul><li>git branch -d 文件 (删除分支,<code>切换出才能删除</code>)</li><li>切换分支需要<code>先提交修改</code></li></ul></blockquote><h3 id="分支的细节"><a href="#分支的细节" class="headerlink" title="分支的细节"></a>分支的细节</h3><blockquote><ul><li><code>git log(上一次的提交记录)</code>查看当前分支</li></ul></blockquote><p><img src="/2023/02/28/Git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/%E5%B7%A5%E4%BD%9C%E5%88%86%E6%94%AF.png"></p><blockquote><p>1.<code>HEAD→指向当前工作的分支</code></p><p>2.切换分支需要<code>先提交修改</code></p><p>3.分支没有commit到本地时(新的改动)，会保留上一次提交的最初状态。(我理解为，各个分支独立)</p></blockquote><hr><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分支合并</span></span><br><span class="line">git merge 分支名字</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>合并之前，需要提交修改</p></li><li><p>合并前可以通过git status查看未提交</p></li><li><p>合并会提示内容差别</p></li></ul></blockquote><hr><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p><img src="/2023/02/28/Git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/Git%E5%B7%A5%E4%BD%9C%E7%A4%BA%E6%84%8F%E5%9B%BE2.png"></p><h3 id="远程项目操作"><a href="#远程项目操作" class="headerlink" title="远程项目操作"></a>远程项目操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 项目地址</span><br></pre></td></tr></table></figure><blockquote><p>没怎么用过，可以复制别人的项目，不建议github的(卡)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将本地仓库推到远程仓库</span></span><br><span class="line">git push 地址</span><br></pre></td></tr></table></figure><blockquote><p>绑定仓库之后直接push就好了</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 到分支master</span></span><br><span class="line">git pull --rebase origin master  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023JS</title>
      <link href="/2023/02/28/JS2023/"/>
      <url>/2023/02/28/JS2023/</url>
      
        <content type="html"><![CDATA[<h2 id="2023JS新增"><a href="#2023JS新增" class="headerlink" title="2023JS新增"></a>2023JS新增</h2><h3 id="定义改成let"><a href="#定义改成let" class="headerlink" title="定义改成let"></a>定义改成let</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num</span><br><span class="line"><span class="comment">//改成</span></span><br><span class="line"><span class="keyword">let</span> num</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><blockquote><p>解决了var可以定义多个同命名的变量的问题<code>let定义的变量唯一</code></p></blockquote><hr><h3 id="页面断点调试"><a href="#页面断点调试" class="headerlink" title="页面断点调试"></a>页面断点调试</h3><p><img src="/2023/02/28/JS2023/%E8%B0%83%E8%AF%95.png" alt="image-20230206165107492"></p><blockquote><p>鼠标移至变量处可以获得当前的值</p><p>双击之后刷新</p></blockquote><hr><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><blockquote><p>for(;;){}</p><p>while(“aaa”){}</p><p>while(true){}</p></blockquote><h4 id="金字塔的实现"><a href="#金字塔的实现" class="headerlink" title="金字塔的实现"></a>金字塔的实现</h4><p><img src="/2023/02/28/JS2023/%E9%87%91%E5%AD%97%E5%A1%94.png" alt="image-20230206165107492"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">10</span>; k &gt;= i; k--) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&amp;nbsp&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;❤&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h3><h4 id="script"><a href="#script" class="headerlink" title="script"></a>script</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;刘备&#x27;</span>, <span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>]</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;div&gt;<span class="subst">$&#123;arr&#125;</span>&lt;/div&gt;`</span>)</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>)<span class="comment">//(起始位置，删除数量)</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;div&gt;<span class="subst">$&#123;arr&#125;</span>&lt;/div&gt;`</span>)</span><br></pre></td></tr></table></figure><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: red solid <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">22px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="number">2px</span> red</span><br><span class="line">    margin: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">189</span>, <span class="number">239</span>, <span class="number">231</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果如图"><a href="#效果如图" class="headerlink" title="效果如图"></a>效果如图</h4><p><img src="/2023/02/28/JS2023/%E7%B2%BE%E7%A1%AE%E5%88%A0%E9%99%A4.png" alt="splice"></p><blockquote><p>splice做到了数组<code>选择删除的位置和数量</code></p></blockquote><hr><h3 id="对象添加"><a href="#对象添加" class="headerlink" title="对象添加"></a>对象添加</h3><p><img src="/2023/02/28/JS2023/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%BB%E5%8A%A0.png"></p><blockquote><p><code>变量得用中括号</code>，中括号里面是字符串。</p><p>o.age = 18</p><p>o.[‘age’] = 18</p><p><code>const k = &#39;age&#39;   o.[k] = 18</code></p><p><code>(item.name = &#39;age&#39; &amp; item.value = 18    o.[item.name] = item.value)</code></p></blockquote><h3 id="函数返回-return"><a href="#函数返回-return" class="headerlink" title="函数返回(return)"></a>函数返回(return)</h3><h4 id="script-1"><a href="#script-1" class="headerlink" title="script"></a>script</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getNum</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> max = arr[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">let</span> min = arr[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (max &lt; arr[i]) &#123;</span><br><span class="line">                    max = arr[i]</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (min &gt; arr[i]) &#123;</span><br><span class="line">                    min = arr[i]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> [max, min]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> newArr = <span class="title function_">getNum</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">11</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.price&#x27;</span>)</span><br><span class="line">        div.<span class="property">innerHTML</span> = <span class="string">`最小值是: <span class="subst">$&#123;newArr[<span class="number">1</span>]&#125;</span>`</span></span><br><span class="line">        <span class="keyword">let</span> min = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.min&#x27;</span>)</span><br><span class="line">        min.<span class="property">innerHTML</span> = <span class="string">`最大值是: <span class="subst">$&#123;newArr[<span class="number">0</span>]&#125;</span>`</span></span><br></pre></td></tr></table></figure><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;min&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果如图-1"><a href="#效果如图-1" class="headerlink" title="效果如图"></a>效果如图</h4><p><img src="/2023/02/28/JS2023/%E8%BF%94%E5%9B%9E%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%80%BC.png" alt="splice"></p><blockquote><p>利用return返回<code>数组实现多个答案</code></p></blockquote><hr><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><blockquote><p><code>可以解决变量污染(同名变量)</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>)(x, y)&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y)</span><br><span class="line">&#125;(<span class="number">1</span>,<span class="number">3</span>);<span class="comment">//注意这里要加分号结束</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">x，y</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y)</span><br><span class="line">&#125;(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">);<span class="comment">//注意这里要加分号结束</span></span><br></pre></td></tr></table></figure><hr><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本数据类型-值类型"><a href="#基本数据类型-值类型" class="headerlink" title="基本数据类型(值类型)"></a>基本数据类型(值类型)</h4><blockquote><ul><li>string</li><li>number</li><li>boolean</li><li>undefined</li><li>null</li></ul></blockquote><h4 id="引用数据类型（地址类型）"><a href="#引用数据类型（地址类型）" class="headerlink" title="引用数据类型（地址类型）"></a>引用数据类型（地址类型）</h4><blockquote><ul><li><p>Object</p></li><li><p>Array</p></li><li><p>Date</p><p>…(对象)</p></li></ul></blockquote><h4 id="如下图"><a href="#如下图" class="headerlink" title="如下图"></a>如下图</h4><p><img src="/2023/02/28/JS2023/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"></p><hr><h2 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h2><h3 id="追加样式"><a href="#追加样式" class="headerlink" title="追加样式"></a>追加样式</h3><h4 id="css-1"><a href="#css-1" class="headerlink" title="css"></a>css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.add</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blueviolet;</span><br><span class="line">    <span class="attribute">border</span>:red solid <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="html-1"><a href="#html-1" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">haha</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;add&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//追加一个样式</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果如下图"><a href="#效果如下图" class="headerlink" title="效果如下图"></a>效果如下图</h4><p><img src="/2023/02/28/JS2023/%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F.png"></p><blockquote><ul><li>add()//添加</li><li>remove()//移除</li><li>taggle()//切换没有加上，有删除</li></ul></blockquote><hr><h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><h4 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h4><h5 id="js"><a href="#js" class="headerlink" title="js"></a>js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1. 初始数据</span></span><br><span class="line">        <span class="keyword">const</span> sliderData = [</span><br><span class="line">            &#123; <span class="attr">url</span>: <span class="string">&#x27;01.jpg&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;什么超前了？&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;rgb(100, 67, 68)&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">url</span>: <span class="string">&#x27;02.jpg&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;黑暗传说！&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;rgb(43, 35, 26)&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">url</span>: <span class="string">&#x27;03.jpg&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;什么出现了！&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;rgb(36, 31, 33)&#x27;</span> &#125;,</span><br><span class="line">            </span><br><span class="line">        ]</span><br><span class="line"><span class="comment">//2.获取对象        </span></span><br><span class="line">        <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-wrapper img&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-footer p&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-footer toggle&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">const</span> time = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            i++</span><br><span class="line">            <span class="keyword">if</span> (i === sliderData.<span class="property">length</span>) &#123;</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            img.<span class="property">src</span> = sliderData[i].<span class="property">url</span></span><br><span class="line">            p.<span class="property">innerHTML</span> = sliderData[i].<span class="property">title</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.slider-indicator .active`</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.slider-indicator li:nth-child(<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>)`</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">        &#125;, <span class="number">500</span>)<span class="comment">//注意标号</span></span><br></pre></td></tr></table></figure><blockquote><p>删除增加，利用了排他思想</p></blockquote><h5 id="html-2"><a href="#html-2" class="headerlink" title="html"></a>html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-wrapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;01.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-footer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>什么太超前了？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;slider-indicator&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="css-2"><a href="#css-2" class="headerlink" title="css"></a>css</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">* &#123;</span><br><span class="line">         <span class="attribute">box-sizing</span>: border-box;<span class="comment">/*盒子变化跟随内边距*/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slider-footer</span> <span class="selector-class">.toggle</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">12px</span>;</span><br><span class="line">            <span class="attribute">display</span>: flex;</span><br><span class="line">        &#125;<span class="comment">/*适合摆图标位置*/</span></span><br><span class="line">     </span><br><span class="line"><span class="selector-class">.slider-footer</span> <span class="selector-class">.toggle</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">            <span class="attribute">margin-right</span>: <span class="number">12px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">28px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">            appearance: none;</span><br><span class="line">            <span class="comment">/*可以时样式消失*/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.slider-indicator</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">list-style</span>: none;</span><br><span class="line">            <span class="attribute">display</span>: flex;<span class="comment">/*让li变横排列*/</span></span><br><span class="line">            <span class="attribute">align-items</span>: center;<span class="comment">/*li居中*/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.slider-indicator</span> <span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">            <span class="attribute">opacity</span>: <span class="number">1</span>;<span class="comment">/*透明度*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h5><p><img src="/2023/02/28/JS2023/%E8%BD%AE%E6%92%AD%E5%9B%BE.png"></p><hr><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p><code>将自己作为参数</code>传递给其它函数使用的函数</p><blockquote><ul><li><p>事件监听</p><p>btn.addEventListener(‘click’,function(){</p><p>console.log(‘##’)</p><p>})</p></li><li><p>setInterval(fn,1000)时间函数</p></li></ul></blockquote><hr><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><blockquote><p>事件捕获</p><p>事件冒泡<code>子元素冒泡经过父元素</code></p><p>方便事件<code>委托给父亲</code>，解决了需要多个绑定事件的问题</p><p>因为冒泡document.querySelector(‘ul’)等价于</p><p>document.querySelectorAll(‘li’)</p><p>用tagName区别其它标签名</p></blockquote><blockquote><p>在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少DOM操作的原因；如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，<code>提高性能</code></p></blockquote><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p><img src="/2023/02/28/JS2023/%E4%B8%A4%E7%A7%8D%E6%B3%A8%E5%86%8C%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB.png"></p><blockquote><p><code>事件解绑</code></p><p>onclick=null,</p><p>removeEventListener(‘click’,<code>fn</code>)<code>函数必须有命名</code></p><p><code>阻止冒泡</code></p><p>事件对象.stopPropagation()</p></blockquote><h4 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h4><p><img src="/2023/02/28/JS2023/%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E6%8F%90%E4%BA%A4.png"></p><blockquote><p>默认跳转，默认发送等等</p></blockquote><hr><h3 id="Tag栏切换"><a href="#Tag栏切换" class="headerlink" title="Tag栏切换"></a>Tag栏切换</h3><blockquote><p>1.通过tagName判断点击的对象</p><p>2.<code>target.dataset.id</code>取目标的对应序号</p><p>3.直接获取父级利用事件委托</p></blockquote><h4 id="html-3"><a href="#html-3" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-id</span>=<span class="string">&quot;4&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>精品<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tab&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">lis.<span class="title function_">addEventListener</span>(<span class="string">`click`</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;A&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> i = e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果如图-2"><a href="#效果如图-2" class="headerlink" title="效果如图"></a>效果如图</h4><p><img src="/2023/02/28/JS2023/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7.png"></p><h4 id="忘了的"><a href="#忘了的" class="headerlink" title="忘了的"></a>忘了的</h4><blockquote><p><code>a,标签</code>通过decoration，去除下划线</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tab <span class="selector-tag">a</span> &#123;</span><br><span class="line">     <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h2><h3 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h3><p><img src="/2023/02/28/JS2023/%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E4%BA%8B%E4%BB%B6.png"></p><h4 id="load事件"><a href="#load事件" class="headerlink" title="load事件"></a>load事件</h4><blockquote><p>等待页面全部加载完</p></blockquote><h4 id="DOMContentLoaded"><a href="#DOMContentLoaded" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h4><blockquote><p>无需等待样式、图像加载完成</p></blockquote><hr><h3 id="页面滚动事件"><a href="#页面滚动事件" class="headerlink" title="页面滚动事件"></a>页面滚动事件</h3><p><img src="/2023/02/28/JS2023/%E9%A1%B5%E9%9D%A2%E6%BB%9A%E5%8A%A8%E4%BA%8B%E4%BB%B6.png"></p><blockquote><p>1.页面滚动持续触发</p><p>2.document或window添加</p></blockquote><blockquote><p>为什么要用</p><p>1.有些事件需要滚动到某些地方触发</p><p>​    <code>固定导航栏</code>，<code>返回顶部图标</code></p></blockquote><h4 id="页面距离"><a href="#页面距离" class="headerlink" title="页面距离"></a>页面距离</h4><p><img src="/2023/02/28/JS2023/%E9%A1%B5%E9%9D%A2%E6%BB%9A%E5%8A%A8%E8%B7%9D%E7%A6%BB.png"></p><blockquote><p>scrollTop</p><p>scrollLeft</p><p><code>超出框</code>的距离</p><p>可读写(<code>可以赋值</code>让改变初始位置)</p></blockquote><blockquote><p>scrollTo(x , y)</p></blockquote><hr><h3 id="页面缩放"><a href="#页面缩放" class="headerlink" title="页面缩放"></a>页面缩放</h3><blockquote><p>调整窗口大小<code>resize</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;窗口变化了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="调节窗口像素"><a href="#调节窗口像素" class="headerlink" title="调节窗口像素"></a>调节窗口像素</h4><p><img src="/2023/02/28/JS2023/%E4%B8%8D%E5%90%8C%E9%A1%B5%E9%9D%A2%E5%B0%BA%E5%AF%B8%E4%B8%8D%E5%90%8C%E8%B0%83%E8%8A%82.png"></p><blockquote><p>获得变化的屏幕尺寸，不断调节</p><p><code>页面的像素</code>，<code>调节字体大小</code></p></blockquote><hr><h3 id="获取宽高"><a href="#获取宽高" class="headerlink" title="获取宽高"></a>获取宽高</h3><h4 id="不包含外边框"><a href="#不包含外边框" class="headerlink" title="不包含外边框"></a>不包含外边框</h4><p><img src="/2023/02/28/JS2023/%E8%8E%B7%E5%8F%96%E5%AE%BD%E9%AB%98.png"></p><blockquote><p>获得的盒子宽高<code>不包含外边距</code></p><p>clientWidth</p><p>clientHeight</p></blockquote><h4 id="包含所有边框"><a href="#包含所有边框" class="headerlink" title="包含所有边框"></a>包含所有边框</h4><blockquote><p>offsetWidth</p><p>offsetHeight</p><p>获得的<code>盒子</code>宽高<code>包含</code>内容+padding+border</p><p>offsetTop</p><p>offsetLeft</p><p>与<code>窗口</code>，受<code>最近</code>父亲影响，当<code>相对定位</code>时，算父级的距离,100+8(外边)</p><p>得出<code>数字型</code>数据,<code>只读</code>。</p></blockquote><h4 id="元素窗口查信息"><a href="#元素窗口查信息" class="headerlink" title="元素窗口查信息"></a>元素窗口查信息</h4><blockquote><p><code>元素.getBoundingClientRect()</code></p></blockquote><h5 id="css-3"><a href="#css-3" class="headerlink" title="css"></a>css</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">border</span>: red solid <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="html-4"><a href="#html-4" class="headerlink" title="html"></a>html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getBoundingClientRect</span>()); </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="效果如下-1"><a href="#效果如下-1" class="headerlink" title="效果如下"></a>效果如下</h5><p><img src="/2023/02/28/JS2023/%E5%85%83%E7%B4%A0%E7%AA%97%E5%8F%A3%E7%9A%84%E4%BF%A1%E6%81%AF.png"></p><blockquote><p>将offsetTop 的值给 scrollTop<code>实现跳转</code></p></blockquote><hr><h2 id="插入表单制作"><a href="#插入表单制作" class="headerlink" title="插入表单制作"></a>插入表单制作</h2><h3 id="html-5"><a href="#html-5" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>新增学员<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> /&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;age&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">    性别:</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">class</span>=<span class="string">&quot;gender&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    薪资：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;salary&quot;</span> <span class="attr">name</span>=<span class="string">&quot;salary&quot;</span> /&gt;</span></span><br><span class="line">    就业城市：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">class</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;上海&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;广州&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;深圳&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;曹县&quot;</span>&gt;</span>曹县<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;add&quot;</span>&gt;</span>录入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>就业榜<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>薪资<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>就业城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        &lt;tr&gt;</span></span><br><span class="line"><span class="comment">          &lt;td&gt;1001&lt;/td&gt;</span></span><br><span class="line"><span class="comment">          &lt;td&gt;欧阳霸天&lt;/td&gt;</span></span><br><span class="line"><span class="comment">          &lt;td&gt;19&lt;/td&gt;</span></span><br><span class="line"><span class="comment">          &lt;td&gt;男&lt;/td&gt;</span></span><br><span class="line"><span class="comment">          &lt;td&gt;15000&lt;/td&gt;</span></span><br><span class="line"><span class="comment">          &lt;td&gt;上海&lt;/td&gt;</span></span><br><span class="line"><span class="comment">          &lt;td&gt;</span></span><br><span class="line"><span class="comment">            &lt;a href=&quot;javascript:&quot;&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="comment">          &lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;/tr&gt; </span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js-元素获取-主事件"><a href="#js-元素获取-主事件" class="headerlink" title="js(元素获取+主事件)"></a>js(元素获取+主事件)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素</span></span><br><span class="line">    <span class="keyword">const</span> tb = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tb&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> info = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.info&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;[name]&#x27;</span>)</span><br><span class="line">   <span class="comment">// ...省略</span></span><br><span class="line">    <span class="comment">//构造数组，利用for循环更新列表，重新(获取父级)生成子列表</span></span><br><span class="line">    <span class="keyword">const</span> arr = []</span><br><span class="line">    info.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="comment">//阻止跳转</span></span><br><span class="line">      e.<span class="title function_">preventDefault</span>()</span><br><span class="line">      <span class="comment">//判断输入</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (items[i].<span class="property">value</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;不能输入空的值&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//构造对象</span></span><br><span class="line">      <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="attr">stuId</span>: arr.<span class="property">length</span> + <span class="number">1</span>,</span><br><span class="line">        <span class="attr">uname</span>: uname.<span class="property">value</span>&#125;,</span><br><span class="line">        <span class="attr">age</span>: age.<span class="property">value</span>&#125;,</span><br><span class="line">        <span class="attr">gender</span>: gender.<span class="property">value</span>&#125;,</span><br><span class="line">        <span class="attr">salary</span>: salary.<span class="property">value</span>&#125;,</span><br><span class="line">        <span class="attr">city</span>: city.<span class="property">value</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//对象送入数组</span></span><br><span class="line">      arr.<span class="title function_">push</span>(obj)</span><br><span class="line">      <span class="comment">//清空上一次的记录</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reset</span>()</span><br><span class="line">      <span class="title function_">append</span>()</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="js-渲染函数"><a href="#js-渲染函数" class="headerlink" title="js(渲染函数)"></a>js(渲染函数)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//渲染函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">append</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//清空数据</span></span><br><span class="line">      tb.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="comment">//生成列表</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line">        tr.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;arr[i].stuId&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;arr[i].uname&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;arr[i].age&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;arr[i].gender&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;arr[i].salary&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;arr[i].city&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;javascript:&quot; data-id = <span class="subst">$&#123;i&#125;</span>&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">          &lt;/td&gt;</span></span><br><span class="line"><span class="string">        `</span><span class="comment">//序号与数组对应</span></span><br><span class="line">        tb.<span class="title function_">appendChild</span>(tr)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="js-删除功能"><a href="#js-删除功能" class="headerlink" title="js(删除功能)"></a>js(删除功能)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除列表信息，重新渲染</span></span><br><span class="line">   tb.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span>);</span><br><span class="line">     <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">     arr.<span class="title function_">splice</span>(e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span>, <span class="number">1</span>)</span><br><span class="line">       <span class="comment">//重新排序</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i = e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">         arr[i].<span class="property">stuId</span> += -<span class="number">1</span></span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i].<span class="property">stuId</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title function_">append</span>()</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h2 id="改进表单"><a href="#改进表单" class="headerlink" title="改进表单"></a>改进表单</h2><h3 id="localStorage的使用"><a href="#localStorage的使用" class="headerlink" title="localStorage的使用"></a>localStorage的使用</h3><h4 id="js-1"><a href="#js-1" class="headerlink" title="js"></a>js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objArr = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;arr&#x27;</span>))<span class="comment">//获取本地数据</span></span><br><span class="line"><span class="keyword">const</span> data = objArr </span><br><span class="line"><span class="keyword">const</span> arr = data ? data : []</span><br><span class="line"><span class="title function_">append</span>()</span><br></pre></td></tr></table></figure><blockquote><p>1.获得上次存储的数据(<code>对象为数组，所以类型为对象</code>)</p><p>2.声明为缓存数据(好习惯)</p><p>3.三元表达式，顺便兜底一个空数组(可能获取的信息是假的)</p><p>4.页面渲染缓存的数据</p></blockquote><h4 id="如图"><a href="#如图" class="headerlink" title="如图"></a>如图</h4><p><img src="/2023/02/28/JS2023/%E7%BC%93%E5%AD%98%E7%9A%84%E6%95%B0%E6%8D%AE.png"></p><h3 id="map-join的使用"><a href="#map-join的使用" class="headerlink" title="(map\join的使用)"></a>(map\join的使用)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> trArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, i</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">` </span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;<span class="subst">$&#123;item.stuId&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;<span class="subst">$&#123;item.uname&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;<span class="subst">$&#123;item.age&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;<span class="subst">$&#123;item.gender&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;<span class="subst">$&#123;item.salary&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;<span class="subst">$&#123;item.city&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;</span></span><br><span class="line"><span class="string">    &lt;a href=&quot;javascript:&quot; data-id = <span class="subst">$&#123;i&#125;</span>&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    `</span>## 2023JS新增</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 定义改成<span class="keyword">let</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">var num</span></span><br><span class="line"><span class="string">//改成</span></span><br><span class="line"><span class="string">let num</span></span><br><span class="line"><span class="string">//</span></span><br></pre></td></tr></table></figure><blockquote><p>解决了var可以定义多个同命名的变量的问题<code>let定义的变量唯一</code></p></blockquote><hr><h3 id="页面断点调试-1"><a href="#页面断点调试-1" class="headerlink" title="页面断点调试"></a>页面断点调试</h3><p><img src="/2023/02/28/JS2023/%E8%B0%83%E8%AF%95.png" alt="image-20230206165107492"></p><blockquote><p>鼠标移至变量处可以获得当前的值</p><p>双击之后刷新</p></blockquote><hr><h3 id="无限循环-1"><a href="#无限循环-1" class="headerlink" title="无限循环"></a>无限循环</h3><blockquote><p>for(;;){}</p><p>while(“aaa”){}</p><p>while(true){}</p></blockquote><h4 id="金字塔的实现-1"><a href="#金字塔的实现-1" class="headerlink" title="金字塔的实现"></a>金字塔的实现</h4><p><img src="/2023/02/28/JS2023/%E9%87%91%E5%AD%97%E5%A1%94.png" alt="image-20230206165107492"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">10</span>; k &gt;= i; k--) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&amp;nbsp&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;❤&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="操作数组-1"><a href="#操作数组-1" class="headerlink" title="操作数组"></a>操作数组</h3><h4 id="script-2"><a href="#script-2" class="headerlink" title="script"></a>script</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;刘备&#x27;</span>, <span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>]</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;div&gt;<span class="subst">$&#123;arr&#125;</span>&lt;/div&gt;`</span>)</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>)<span class="comment">//(起始位置，删除数量)</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;div&gt;<span class="subst">$&#123;arr&#125;</span>&lt;/div&gt;`</span>)</span><br></pre></td></tr></table></figure><h4 id="css-4"><a href="#css-4" class="headerlink" title="css"></a>css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: red solid <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">22px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="number">2px</span> red</span><br><span class="line">    margin: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">189</span>, <span class="number">239</span>, <span class="number">231</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果如图-3"><a href="#效果如图-3" class="headerlink" title="效果如图"></a>效果如图</h4><p><img src="/2023/02/28/JS2023/%E7%B2%BE%E7%A1%AE%E5%88%A0%E9%99%A4.png" alt="splice"></p><blockquote><p>splice做到了数组<code>选择删除的位置和数量</code></p></blockquote><hr><h3 id="对象添加-1"><a href="#对象添加-1" class="headerlink" title="对象添加"></a>对象添加</h3><p><img src="/2023/02/28/JS2023/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%BB%E5%8A%A0.png"></p><blockquote><p><code>变量得用中括号</code>，中括号里面是字符串。</p><p>o.age = 18</p><p>o.[‘age’] = 18</p><p><code>const k = &#39;age&#39;   o.[k] = 18</code></p><p><code>(item.name = &#39;age&#39; &amp; item.value = 18    o.[item.name] = item.value)</code></p></blockquote><h3 id="函数返回-return-1"><a href="#函数返回-return-1" class="headerlink" title="函数返回(return)"></a>函数返回(return)</h3><h4 id="script-3"><a href="#script-3" class="headerlink" title="script"></a>script</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getNum</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> max = arr[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">let</span> min = arr[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (max &lt; arr[i]) &#123;</span><br><span class="line">                    max = arr[i]</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (min &gt; arr[i]) &#123;</span><br><span class="line">                    min = arr[i]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> [max, min]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> newArr = <span class="title function_">getNum</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">11</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.price&#x27;</span>)</span><br><span class="line">        div.<span class="property">innerHTML</span> = <span class="string">`最小值是: <span class="subst">$&#123;newArr[<span class="number">1</span>]&#125;</span>`</span></span><br><span class="line">        <span class="keyword">let</span> min = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.min&#x27;</span>)</span><br><span class="line">        min.<span class="property">innerHTML</span> = <span class="string">`最大值是: <span class="subst">$&#123;newArr[<span class="number">0</span>]&#125;</span>`</span></span><br></pre></td></tr></table></figure><h4 id="html-6"><a href="#html-6" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;min&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果如图-4"><a href="#效果如图-4" class="headerlink" title="效果如图"></a>效果如图</h4><p><img src="/2023/02/28/JS2023/%E8%BF%94%E5%9B%9E%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%80%BC.png" alt="splice"></p><blockquote><p>利用return返回<code>数组实现多个答案</code></p></blockquote><hr><h3 id="立即执行函数-1"><a href="#立即执行函数-1" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><blockquote><p><code>可以解决变量污染(同名变量)</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>)(x, y)&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y)</span><br><span class="line">&#125;(<span class="number">1</span>,<span class="number">3</span>);<span class="comment">//注意这里要加分号结束</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">x，y</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y)</span><br><span class="line">&#125;(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">);<span class="comment">//注意这里要加分号结束</span></span><br></pre></td></tr></table></figure><hr><h3 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本数据类型-值类型-1"><a href="#基本数据类型-值类型-1" class="headerlink" title="基本数据类型(值类型)"></a>基本数据类型(值类型)</h4><blockquote><ul><li>string</li><li>number</li><li>boolean</li><li>undefined</li><li>null</li></ul></blockquote><h4 id="引用数据类型（地址类型）-1"><a href="#引用数据类型（地址类型）-1" class="headerlink" title="引用数据类型（地址类型）"></a>引用数据类型（地址类型）</h4><blockquote><ul><li><p>Object</p></li><li><p>Array</p></li><li><p>Date</p><p>…(对象)</p></li></ul></blockquote><h4 id="如下图-1"><a href="#如下图-1" class="headerlink" title="如下图"></a>如下图</h4><p><img src="/2023/02/28/JS2023/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"></p><hr><h2 id="DOM事件-1"><a href="#DOM事件-1" class="headerlink" title="DOM事件"></a>DOM事件</h2><h3 id="追加样式-1"><a href="#追加样式-1" class="headerlink" title="追加样式"></a>追加样式</h3><h4 id="css-5"><a href="#css-5" class="headerlink" title="css"></a>css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.add</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blueviolet;</span><br><span class="line">    <span class="attribute">border</span>:red solid <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="html-7"><a href="#html-7" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">haha</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;add&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//追加一个样式</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果如下图-1"><a href="#效果如下图-1" class="headerlink" title="效果如下图"></a>效果如下图</h4><p><img src="/2023/02/28/JS2023/%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F.png"></p><blockquote><ul><li>add()//添加</li><li>remove()//移除</li><li>taggle()//切换没有加上，有删除</li></ul></blockquote><hr><h3 id="数组对象-1"><a href="#数组对象-1" class="headerlink" title="数组对象"></a>数组对象</h3><h4 id="轮播图-1"><a href="#轮播图-1" class="headerlink" title="轮播图"></a>轮播图</h4><h5 id="js-2"><a href="#js-2" class="headerlink" title="js"></a>js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1. 初始数据</span></span><br><span class="line">        <span class="keyword">const</span> sliderData = [</span><br><span class="line">            &#123; <span class="attr">url</span>: <span class="string">&#x27;01.jpg&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;什么超前了？&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;rgb(100, 67, 68)&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">url</span>: <span class="string">&#x27;02.jpg&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;黑暗传说！&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;rgb(43, 35, 26)&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">url</span>: <span class="string">&#x27;03.jpg&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;什么出现了！&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;rgb(36, 31, 33)&#x27;</span> &#125;,</span><br><span class="line">            </span><br><span class="line">        ]</span><br><span class="line"><span class="comment">//2.获取对象        </span></span><br><span class="line">        <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-wrapper img&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-footer p&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-footer toggle&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">const</span> time = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            i++</span><br><span class="line">            <span class="keyword">if</span> (i === sliderData.<span class="property">length</span>) &#123;</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            img.<span class="property">src</span> = sliderData[i].<span class="property">url</span></span><br><span class="line">            p.<span class="property">innerHTML</span> = sliderData[i].<span class="property">title</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.slider-indicator .active`</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.slider-indicator li:nth-child(<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>)`</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">        &#125;, <span class="number">500</span>)<span class="comment">//注意标号</span></span><br></pre></td></tr></table></figure><blockquote><p>删除增加，利用了排他思想</p></blockquote><h5 id="html-8"><a href="#html-8" class="headerlink" title="html"></a>html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-wrapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;01.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-footer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>什么太超前了？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;slider-indicator&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="css-6"><a href="#css-6" class="headerlink" title="css"></a>css</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">* &#123;</span><br><span class="line">         <span class="attribute">box-sizing</span>: border-box;<span class="comment">/*盒子变化跟随内边距*/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slider-footer</span> <span class="selector-class">.toggle</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">12px</span>;</span><br><span class="line">            <span class="attribute">display</span>: flex;</span><br><span class="line">        &#125;<span class="comment">/*适合摆图标位置*/</span></span><br><span class="line">     </span><br><span class="line"><span class="selector-class">.slider-footer</span> <span class="selector-class">.toggle</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">            <span class="attribute">margin-right</span>: <span class="number">12px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">28px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">            appearance: none;</span><br><span class="line">            <span class="comment">/*可以时样式消失*/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.slider-indicator</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">list-style</span>: none;</span><br><span class="line">            <span class="attribute">display</span>: flex;<span class="comment">/*让li变横排列*/</span></span><br><span class="line">            <span class="attribute">align-items</span>: center;<span class="comment">/*li居中*/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.slider-indicator</span> <span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">            <span class="attribute">opacity</span>: <span class="number">1</span>;<span class="comment">/*透明度*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="效果如下-2"><a href="#效果如下-2" class="headerlink" title="效果如下"></a>效果如下</h5><p><img src="/2023/02/28/JS2023/%E8%BD%AE%E6%92%AD%E5%9B%BE.png"></p><hr><h3 id="回调函数-1"><a href="#回调函数-1" class="headerlink" title="回调函数"></a>回调函数</h3><p><code>将自己作为参数</code>传递给其它函数使用的函数</p><blockquote><ul><li><p>事件监听</p><p>btn.addEventListener(‘click’,function(){</p><p>console.log(‘##’)</p><p>})</p></li><li><p>setInterval(fn,1000)时间函数</p></li></ul></blockquote><hr><h3 id="事件流-1"><a href="#事件流-1" class="headerlink" title="事件流"></a>事件流</h3><blockquote><p>事件捕获</p><p>事件冒泡<code>子元素冒泡经过父元素</code></p><p>方便事件<code>委托给父亲</code>，解决了需要多个绑定事件的问题</p><p>因为冒泡document.querySelector(‘ul’)等价于</p><p>document.querySelectorAll(‘li’)</p><p>用tagName区别其它标签名</p></blockquote><blockquote><p>在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少DOM操作的原因；如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，<code>提高性能</code></p></blockquote><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p><img src="/2023/02/28/JS2023/%E4%B8%A4%E7%A7%8D%E6%B3%A8%E5%86%8C%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB.png"></p><blockquote><p><code>事件解绑</code></p><p>onclick=null,</p><p>removeEventListener(‘click’,<code>fn</code>)<code>函数必须有命名</code></p><p><code>阻止冒泡</code></p><p>事件对象.stopPropagation()</p></blockquote><h4 id="阻止默认行为-1"><a href="#阻止默认行为-1" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h4><p><img src="/2023/02/28/JS2023/%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E6%8F%90%E4%BA%A4.png"></p><blockquote><p>默认跳转，默认发送等等</p></blockquote><hr><h3 id="Tag栏切换-1"><a href="#Tag栏切换-1" class="headerlink" title="Tag栏切换"></a>Tag栏切换</h3><blockquote><p>1.通过tagName判断点击的对象</p><p>2.<code>target.dataset.id</code>取目标的对应序号</p><p>3.直接获取父级利用事件委托</p></blockquote><h4 id="html-9"><a href="#html-9" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-id</span>=<span class="string">&quot;4&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>精品<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tab&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">lis.<span class="title function_">addEventListener</span>(<span class="string">`click`</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;A&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> i = e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果如图-5"><a href="#效果如图-5" class="headerlink" title="效果如图"></a>效果如图</h4><p><img src="/2023/02/28/JS2023/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7.png"></p><h4 id="忘了的-1"><a href="#忘了的-1" class="headerlink" title="忘了的"></a>忘了的</h4><blockquote><p><code>a,标签</code>通过decoration，去除下划线</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tab <span class="selector-tag">a</span> &#123;</span><br><span class="line">     <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他事件-1"><a href="#其他事件-1" class="headerlink" title="其他事件"></a>其他事件</h2><h3 id="页面加载事件-1"><a href="#页面加载事件-1" class="headerlink" title="页面加载事件"></a>页面加载事件</h3><p><img src="/2023/02/28/JS2023/%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E4%BA%8B%E4%BB%B6.png"></p><h4 id="load事件-1"><a href="#load事件-1" class="headerlink" title="load事件"></a>load事件</h4><blockquote><p>等待页面全部加载完</p></blockquote><h4 id="DOMContentLoaded-1"><a href="#DOMContentLoaded-1" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h4><blockquote><p>无需等待样式、图像加载完成</p></blockquote><hr><h3 id="页面滚动事件-1"><a href="#页面滚动事件-1" class="headerlink" title="页面滚动事件"></a>页面滚动事件</h3><p><img src="/2023/02/28/JS2023/%E9%A1%B5%E9%9D%A2%E6%BB%9A%E5%8A%A8%E4%BA%8B%E4%BB%B6.png"></p><blockquote><p>1.页面滚动持续触发</p><p>2.document或window添加</p></blockquote><blockquote><p>为什么要用</p><p>1.有些事件需要滚动到某些地方触发</p><p>​    <code>固定导航栏</code>，<code>返回顶部图标</code></p></blockquote><h4 id="页面距离-1"><a href="#页面距离-1" class="headerlink" title="页面距离"></a>页面距离</h4><p><img src="/2023/02/28/JS2023/%E9%A1%B5%E9%9D%A2%E6%BB%9A%E5%8A%A8%E8%B7%9D%E7%A6%BB.png"></p><blockquote><p>scrollTop</p><p>scrollLeft</p><p><code>超出框</code>的距离</p><p>可读写(<code>可以赋值</code>让改变初始位置)</p></blockquote><blockquote><p>scrollTo(x , y)</p></blockquote><hr><h3 id="页面缩放-1"><a href="#页面缩放-1" class="headerlink" title="页面缩放"></a>页面缩放</h3><blockquote><p>调整窗口大小<code>resize</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;窗口变化了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="调节窗口像素-1"><a href="#调节窗口像素-1" class="headerlink" title="调节窗口像素"></a>调节窗口像素</h4><p><img src="/2023/02/28/JS2023/%E4%B8%8D%E5%90%8C%E9%A1%B5%E9%9D%A2%E5%B0%BA%E5%AF%B8%E4%B8%8D%E5%90%8C%E8%B0%83%E8%8A%82.png"></p><blockquote><p>获得变化的屏幕尺寸，不断调节</p><p><code>页面的像素</code>，<code>调节字体大小</code></p></blockquote><hr><h3 id="获取宽高-1"><a href="#获取宽高-1" class="headerlink" title="获取宽高"></a>获取宽高</h3><h4 id="不包含外边框-1"><a href="#不包含外边框-1" class="headerlink" title="不包含外边框"></a>不包含外边框</h4><p><img src="/2023/02/28/JS2023/%E8%8E%B7%E5%8F%96%E5%AE%BD%E9%AB%98.png"></p><blockquote><p>获得的盒子宽高<code>不包含外边距</code></p><p>clientWidth</p><p>clientHeight</p></blockquote><h4 id="包含所有边框-1"><a href="#包含所有边框-1" class="headerlink" title="包含所有边框"></a>包含所有边框</h4><blockquote><p>offsetWidth</p><p>offsetHeight</p><p>获得的<code>盒子</code>宽高<code>包含</code>内容+padding+border</p><p>offsetTop</p><p>offsetLeft</p><p>与<code>窗口</code>，受<code>最近</code>父亲影响，当<code>相对定位</code>时，算父级的距离,100+8(外边)</p><p>得出<code>数字型</code>数据,<code>只读</code>。</p></blockquote><h4 id="元素窗口查信息-1"><a href="#元素窗口查信息-1" class="headerlink" title="元素窗口查信息"></a>元素窗口查信息</h4><blockquote><p><code>元素.getBoundingClientRect()</code></p></blockquote><h5 id="css-7"><a href="#css-7" class="headerlink" title="css"></a>css</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">border</span>: red solid <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="html-10"><a href="#html-10" class="headerlink" title="html"></a>html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getBoundingClientRect</span>()); </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="效果如下-3"><a href="#效果如下-3" class="headerlink" title="效果如下"></a>效果如下</h5><p><img src="/2023/02/28/JS2023/%E5%85%83%E7%B4%A0%E7%AA%97%E5%8F%A3%E7%9A%84%E4%BF%A1%E6%81%AF.png"></p><blockquote><p>将offsetTop 的值给 scrollTop<code>实现跳转</code></p></blockquote><hr><h2 id="插入表单制作-1"><a href="#插入表单制作-1" class="headerlink" title="插入表单制作"></a>插入表单制作</h2><h3 id="html-11"><a href="#html-11" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>新增学员<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> /&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;age&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">    性别:</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">class</span>=<span class="string">&quot;gender&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    薪资：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;salary&quot;</span> <span class="attr">name</span>=<span class="string">&quot;salary&quot;</span> /&gt;</span></span><br><span class="line">    就业城市：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">class</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;上海&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;广州&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;深圳&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;曹县&quot;</span>&gt;</span>曹县<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;add&quot;</span>&gt;</span>录入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>就业榜<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>薪资<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>就业城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        &lt;tr&gt;</span></span><br><span class="line"><span class="comment">          &lt;td&gt;1001&lt;/td&gt;</span></span><br><span class="line"><span class="comment">          &lt;td&gt;欧阳霸天&lt;/td&gt;</span></span><br><span class="line"><span class="comment">          &lt;td&gt;19&lt;/td&gt;</span></span><br><span class="line"><span class="comment">          &lt;td&gt;男&lt;/td&gt;</span></span><br><span class="line"><span class="comment">          &lt;td&gt;15000&lt;/td&gt;</span></span><br><span class="line"><span class="comment">          &lt;td&gt;上海&lt;/td&gt;</span></span><br><span class="line"><span class="comment">          &lt;td&gt;</span></span><br><span class="line"><span class="comment">            &lt;a href=&quot;javascript:&quot;&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="comment">          &lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;/tr&gt; </span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js-元素获取-主事件-1"><a href="#js-元素获取-主事件-1" class="headerlink" title="js(元素获取+主事件)"></a>js(元素获取+主事件)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素</span></span><br><span class="line">    <span class="keyword">const</span> tb = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tb&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> info = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.info&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;[name]&#x27;</span>)</span><br><span class="line">   <span class="comment">// ...省略</span></span><br><span class="line">    <span class="comment">//构造数组，利用for循环更新列表，重新(获取父级)生成子列表</span></span><br><span class="line">    <span class="keyword">const</span> arr = []</span><br><span class="line">    info.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="comment">//阻止跳转</span></span><br><span class="line">      e.<span class="title function_">preventDefault</span>()</span><br><span class="line">      <span class="comment">//判断输入</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (items[i].<span class="property">value</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;不能输入空的值&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//构造对象</span></span><br><span class="line">      <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="attr">stuId</span>: arr.<span class="property">length</span> + <span class="number">1</span>,</span><br><span class="line">        <span class="attr">uname</span>: uname.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">age</span>: age.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">gender</span>: gender.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">salary</span>: salary.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">city</span>: city.<span class="property">value</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//对象送入数组</span></span><br><span class="line">      arr.<span class="title function_">push</span>(obj)</span><br><span class="line">      <span class="comment">//清空上一次的记录</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reset</span>()</span><br><span class="line">      <span class="title function_">append</span>()</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="js-渲染函数-1"><a href="#js-渲染函数-1" class="headerlink" title="js(渲染函数)"></a>js(渲染函数)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//渲染函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">append</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//清空数据</span></span><br><span class="line">      tb.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="comment">//生成列表</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line">        tr.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;arr[i].stuId&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;arr[i].uname&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;arr[i].age&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;arr[i].gender&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;arr[i].salary&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;arr[i].city&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;javascript:&quot; data-id = <span class="subst">$&#123;i&#125;</span>&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">          &lt;/td&gt;</span></span><br><span class="line"><span class="string">        `</span><span class="comment">//序号与数组对应</span></span><br><span class="line">        tb.<span class="title function_">appendChild</span>(tr)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="js-删除功能-1"><a href="#js-删除功能-1" class="headerlink" title="js(删除功能)"></a>js(删除功能)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除列表信息，重新渲染</span></span><br><span class="line">   tb.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span>);</span><br><span class="line">     <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">     arr.<span class="title function_">splice</span>(e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span>, <span class="number">1</span>)</span><br><span class="line">       <span class="comment">//重新排序</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i = e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">         arr[i].<span class="property">stuId</span> += -<span class="number">1</span></span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i].<span class="property">stuId</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title function_">append</span>()</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h2 id="改进表单-1"><a href="#改进表单-1" class="headerlink" title="改进表单"></a>改进表单</h2><h3 id="localStorage的使用-1"><a href="#localStorage的使用-1" class="headerlink" title="localStorage的使用"></a>localStorage的使用</h3><h4 id="js-3"><a href="#js-3" class="headerlink" title="js"></a>js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objArr = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;arr&#x27;</span>))<span class="comment">//获取本地数据</span></span><br><span class="line"><span class="keyword">const</span> data = objArr </span><br><span class="line"><span class="keyword">const</span> arr = data ? data : []</span><br><span class="line"><span class="title function_">append</span>()</span><br></pre></td></tr></table></figure><blockquote><p>1.获得上次存储的数据(<code>对象为数组，所以类型为对象</code>)</p><p>2.声明为缓存数据(好习惯)</p><p>3.三元表达式，顺便兜底一个空数组(可能获取的信息是假的)</p><p>4.页面渲染缓存的数据</p></blockquote><h4 id="如图-1"><a href="#如图-1" class="headerlink" title="如图"></a>如图</h4><p><img src="/2023/02/28/JS2023/%E7%BC%93%E5%AD%98%E7%9A%84%E6%95%B0%E6%8D%AE.png"></p><h3 id="map-join的使用-1"><a href="#map-join的使用-1" class="headerlink" title="(map\join的使用)"></a>(map\join的使用)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> trArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, i</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">` </span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;<span class="subst">$&#123;item.stuId&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;<span class="subst">$&#123;item.uname&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;<span class="subst">$&#123;item.age&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;<span class="subst">$&#123;item.gender&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;<span class="subst">$&#123;item.salary&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;<span class="subst">$&#123;item.city&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;</span></span><br><span class="line"><span class="string">    &lt;a href=&quot;javascript:&quot; data-id = <span class="subst">$&#123;i&#125;</span>&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line">tb.<span class="property">innerHTML</span> = trArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">//将新数组给列表</span></span><br></pre></td></tr></table></figure><blockquote><p>arr.map(function (item, i){return})//用于遍历，或者返回一个新数组</p><p>trArr.join(‘’) //去除将数组转化为字符串，并且去除分隔的逗号</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS小技巧</title>
      <link href="/2023/02/23/JS%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2023/02/23/JS%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="1-更改markdown样式"><a href="#1-更改markdown样式" class="headerlink" title="1.更改markdown样式"></a>1.更改markdown样式</h3><blockquote><p>1.通过查看页面源代码找到对应的样式</p><p>2.通过修改样式来更改</p><p>期间我发现了伪元素的用法</p><p>通过伪元素画图，给代码块增加了三个原点</p></blockquote><h4 id="如下图所示"><a href="#如下图所示" class="headerlink" title="如下图所示"></a>如下图所示</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.name</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>:<span class="string">&#x27;旺财&#x27;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">name</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h4><p><img src="/2023/02/23/JS%E5%B0%8F%E6%8A%80%E5%B7%A7/%E4%BC%AA%E5%85%83%E7%B4%A0%E7%9A%84%E7%94%A8%E6%B3%95.png" alt="伪元素"></p><h3 id="2-CSS的投影"><a href="#2-CSS的投影" class="headerlink" title="2.CSS的投影"></a>2.CSS的投影</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-webkit-<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fc625d</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">12px</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">#fdbc40</span>, <span class="number">40px</span> <span class="number">0</span> <span class="number">#35cd4b</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">#fdbc40</span>, <span class="number">40px</span> <span class="number">0</span> <span class="number">#35cd4b</span>;</span><br></pre></td></tr></table></figure><h4 id="效果如下-1"><a href="#效果如下-1" class="headerlink" title="效果如下"></a>效果如下</h4><p><img src="/2023/02/23/JS%E5%B0%8F%E6%8A%80%E5%B7%A7/%E6%8A%95%E5%BD%B1.png" alt="伪元素"></p><hr><h3 id="3-CSS项目对齐"><a href="#3-CSS项目对齐" class="headerlink" title="3.CSS项目对齐"></a>3.CSS项目对齐</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-end;<span class="comment">/*以下边对齐*/</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>justify-content://里面的项目对齐方式</p><p><code>如下：</code></p><p>space-around//水平距离均匀分配</p><p>space-between//相邻间距相等</p></blockquote><h4 id="效果如下-2"><a href="#效果如下-2" class="headerlink" title="效果如下"></a>效果如下</h4><p><img src="/2023/02/23/JS%E5%B0%8F%E6%8A%80%E5%B7%A7/%E6%91%86%E6%94%BE1.png" alt="css摆放"></p><p><img src="/2023/02/23/JS%E5%B0%8F%E6%8A%80%E5%B7%A7/%E6%91%86%E6%94%BE2.png" alt="css摆放"></p><hr><h3 id="4-逻辑中断思路"><a href="#4-逻辑中断思路" class="headerlink" title="4.逻辑中断思路"></a>4.逻辑中断思路</h3><blockquote><p>利用逻辑中断，让函数不再执行</p></blockquote><h4 id="script1"><a href="#script1" class="headerlink" title="script1"></a>script1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span> &amp;&amp; <span class="number">22</span>)<span class="comment">//一假则假，均真返回22(不中断)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span> || <span class="number">22</span>)<span class="comment">//一真则真，均真返回11(不中断)</span></span><br></pre></td></tr></table></figure><h4 id="script2"><a href="#script2" class="headerlink" title="script2"></a>script2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &amp;&amp; num++)<span class="comment">//一假则假，均真返回false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);<span class="comment">//(中断,num++不执行)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num+<span class="number">1</span> || <span class="number">22</span>)<span class="comment">//一真则真，均真返回num+1(不中断,执行运算)</span></span><br></pre></td></tr></table></figure><h4 id="效果如下图"><a href="#效果如下图" class="headerlink" title="效果如下图"></a>效果如下图</h4><p><img src="/2023/02/23/JS%E5%B0%8F%E6%8A%80%E5%B7%A7/%E4%B8%8E%E6%88%96%E9%80%BB%E8%BE%91%E4%B8%AD%E6%96%AD.png" alt="逻辑中断"></p><h4 id="布尔型的值"><a href="#布尔型的值" class="headerlink" title="布尔型的值"></a>布尔型的值</h4><p><img src="/2023/02/23/JS%E5%B0%8F%E6%8A%80%E5%B7%A7/%E5%B8%83%E5%B0%94%E5%9E%8B(true&false).png" alt="布尔型"></p><h5 id="运算时"><a href="#运算时" class="headerlink" title="运算时"></a>运算时</h5><blockquote><ul><li>空字符串当0</li><li>null当0</li><li>undefined变成NaN</li></ul></blockquote><hr><h3 id="5-包装函数"><a href="#5-包装函数" class="headerlink" title="5.包装函数"></a>5.包装函数</h3><h4 id="数组求和求平均"><a href="#数组求和求平均" class="headerlink" title="数组求和求平均"></a>数组求和求平均</h4><h6 id="script"><a href="#script" class="headerlink" title="script"></a>script</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">function</span> <span class="title function_">getNum</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> sum = arr[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span> ;i&lt;=arr.<span class="property">length</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                sum = sum + arr[i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> [sum,<span class="built_in">parseFloat</span>(sum/arr.<span class="property">length</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>)]<span class="comment">//保留两位</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">getNum</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="keyword">let</span> num = <span class="title class_">Boolean</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;请输入true求和或false求平均&#x27;</span>)) </span><br><span class="line"><span class="keyword">if</span>(num == <span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">0</span>]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="literal">false</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="结果如下图"><a href="#结果如下图" class="headerlink" title="结果如下图"></a>结果如下图</h6><p><img src="/2023/02/23/JS%E5%B0%8F%E6%8A%80%E5%B7%A7/%E6%95%B0%E7%BB%84%E6%B1%82%E5%92%8C%E6%B1%82%E5%B9%B3%E5%9D%87.png" alt="逻辑中断"></p><hr><h3 id="6-事件的技巧"><a href="#6-事件的技巧" class="headerlink" title="6.事件的技巧"></a>6.事件的技巧</h3><h4 id="6-1轮转图"><a href="#6-1轮转图" class="headerlink" title="6.1轮转图"></a>6.1轮转图</h4><blockquote><p>1.设置轮转按键，</p><p>2.利用时间函数重复调用，按键函数实现自动轮转。</p><p>省去了麻烦的自动轮转</p></blockquote><h4 id="6-2去除文本空格"><a href="#6-2去除文本空格" class="headerlink" title="6.2去除文本空格"></a>6.2去除文本空格</h4><h5 id="css"><a href="#css" class="headerlink" title="css"></a>css</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">90px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">8s</span>;<span class="comment">/*框延迟拉伸(需要设置变化长度)*/</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="built_in">rgb</span>(<span class="number">156</span>, <span class="number">153</span>, <span class="number">153</span>) solid ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="js"><a href="#js" class="headerlink" title="js"></a>js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ipt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">        ipt.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;<span class="comment">//事件对象e</span></span><br><span class="line">            <span class="keyword">if</span>(e.<span class="property">key</span> === <span class="string">&#x27;Enter&#x27;</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(ipt.<span class="property">value</span>.<span class="title function_">trim</span>()); <span class="comment">//去除空格</span></span><br><span class="line">                <span class="comment">// ipt.value = &#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h5 id="效果如下-3"><a href="#效果如下-3" class="headerlink" title="效果如下"></a>效果如下</h5><p><img src="/2023/02/23/JS%E5%B0%8F%E6%8A%80%E5%B7%A7/%E6%96%87%E6%9C%AC%E5%8E%BB%E9%99%A4%E7%A9%BA%E6%A0%BC.png"></p><blockquote><p><code>trim()去除空格</code></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS的BOM</title>
      <link href="/2022/12/20/JS%E7%9A%84BOM/"/>
      <url>/2022/12/20/JS%E7%9A%84BOM/</url>
      
        <content type="html"><![CDATA[<h1 id="BOM简述"><a href="#BOM简述" class="headerlink" title="BOM简述"></a>BOM简述</h1><p><img src="/2022/12/20/JS%E7%9A%84BOM/%E5%8C%85%E5%90%AB%E8%8C%83%E5%9B%B4.png"></p><blockquote><p>BOM比DOM更大，他管理着整个窗口</p></blockquote><p><img src="/2022/12/20/JS%E7%9A%84BOM/%E4%BB%80%E4%B9%88%E6%98%AFBOM.png"></p><blockquote><p>整个窗口的交互，滚动条啊，页面返回、刷新等等</p></blockquote><p><img src="/2022/12/20/JS%E7%9A%84BOM/BOM%E6%9E%84%E6%88%90.png"></p><hr><h2 id="窗口事件"><a href="#窗口事件" class="headerlink" title="窗口事件"></a>窗口事件</h2><blockquote><p>窗口事件的区别</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//1.等待页面加载完后进行，只执行最后一组</span></span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//2.可以执行多个</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//3.主要的DOM交互效果，（不包括图片,flash,css）加载完就可以执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>调整窗口大小</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;窗口变化了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h4><blockquote><p>延迟函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">var</span> time1 = <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(fn,时间);<span class="comment">//time为标识符</span></span><br></pre></td></tr></table></figure><blockquote><p>clearTimeout(timer);</p><p>停止定时器的函数</p></blockquote><hr><h4 id="setlnterval"><a href="#setlnterval" class="headerlink" title="setlnterval()"></a>setlnterval()</h4><blockquote><p>每隔一段时间之后就重新调用</p><p>下面是倒计时的使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hour = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hour&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> minute = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.minute&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> second = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.second&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2022-12-19 23:59:59&#x27;</span>);<span class="comment">//返回的是用户输入的总毫秒数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">getTime</span>(<span class="params">time</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//时间戳</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(nowTime);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>;<span class="comment">//剩余时间（单位秒）</span></span><br><span class="line">            <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);<span class="comment">//天数</span></span><br><span class="line">            <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);<span class="comment">//当天的余数小时</span></span><br><span class="line">            <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">            <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>);</span><br><span class="line">            hour.<span class="property">innerHTML</span> = h;</span><br><span class="line">            minute.<span class="property">innerHTML</span> = m;</span><br><span class="line">            second.<span class="property">innerHTML</span> = s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">getTime</span>();</span><br><span class="line">        <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(getTime, <span class="number">1000</span>);<span class="comment">//每秒调用一次</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>添加一个停止/开始功能</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">btn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stop.<span class="property">value</span> === <span class="string">&#x27;停止&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">            stop.<span class="property">value</span> = <span class="string">&#x27;开始&#x27;</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(stop.<span class="property">value</span>);</span><br><span class="line">            <span class="comment">// stop.disabled = true;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stop.<span class="property">value</span> === <span class="string">&#x27;开始&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">                 timer = <span class="built_in">setInterval</span>(getTime, <span class="number">1000</span>);</span><br><span class="line">                stop.<span class="property">value</span> = <span class="string">&#x27;停止&#x27;</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(stop.<span class="property">value</span>);</span><br><span class="line">            &#125;              </span><br><span class="line">    &#125;&#125;         </span><br><span class="line">stop.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="title function_">btn</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS的DOM</title>
      <link href="/2022/12/14/JS%E7%9A%84DOM/"/>
      <url>/2022/12/14/JS%E7%9A%84DOM/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简单-amp-复杂的数据类型"><a href="#1-简单-amp-复杂的数据类型" class="headerlink" title="1.简单&amp;复杂的数据类型"></a>1.简单&amp;复杂的数据类型</h2><blockquote><p><code>简单的数据类型又叫值类型</code></p></blockquote><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="简单数据类型"></p><hr><blockquote><p><code>复杂数据类型又叫引用类型</code></p></blockquote><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="复杂数据类型"></p><blockquote><p><code>空间栈与空间堆</code></p></blockquote><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E6%A0%88%E7%A9%BA%E9%97%B4%E4%B8%8E%E5%A0%86%E7%A9%BA%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="栈空间与堆空间的数据类型"></p><hr><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E6%94%B9%E5%8F%98%E7%9A%84%E6%98%AF%E5%80%BC.png" alt="改变的是值"></p><hr><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E7%BB%99%E7%9A%84%E6%98%AF%E5%9C%B0%E5%9D%80%EF%BC%8C%E7%94%A8%E7%9A%84%E6%98%AF%E5%90%8C%E4%B8%80%E4%B8%AA%E5%80%BC.png" alt="给的是地址，用的是同一个值"></p><hr><hr><hr><h2 id="2-Web-APIs"><a href="#2-Web-APIs" class="headerlink" title="2.Web APIs"></a>2.Web APIs</h2><p>![Web APIs和JS基础关联性](Web APIs和JS基础关联性.png)</p><blockquote><p>前面学的主要是ECMAScript</p></blockquote><hr><blockquote><p>API就是一个接口，类似于连接某个封装好的功能</p></blockquote><hr><blockquote><p>能够使用API接口，帮助实现某种功能</p></blockquote><hr><h2 id="3-DOM"><a href="#3-DOM" class="headerlink" title="3.DOM"></a>3.DOM</h2><p><img src="/2022/12/14/JS%E7%9A%84DOM/DOM%E6%A0%91.png" alt="DOM树"></p><blockquote><p>DOM就是文档对象模型</p><ul><li>他是一个接口，可以对以上对象（样式、结构、内容）</li></ul></blockquote><hr><hr><h3 id="3-1常见的获取元素的方式"><a href="#3-1常见的获取元素的方式" class="headerlink" title="3.1常见的获取元素的方式"></a>3.1常见的获取元素的方式</h3><h4 id="3-11getElemengtById-‘id’-获取元素"><a href="#3-11getElemengtById-‘id’-获取元素" class="headerlink" title="3.11getElemengtById(‘id’)获取元素"></a>3.11getElemengtById(‘id’)获取元素</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0.png" alt=")"></p><blockquote><ul><li><p>返回的是一个元素对象</p><p>可以console.log(typeof timer);//来返回判断类型</p><p>console.dir(timer)//可以打印元素对象，<code>可以看一些数据（id&amp;内容)</code></p></li></ul></blockquote><hr><p><code>获取元素对象集合getElemengtByTagName(&#39;li&#39;);</code></p><p><code>用伪数组的方式储存</code></p><p>如果没有相应的元素，返回的是空的伪数组</p><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E5%85%83%E7%B4%A0%E4%BC%AA%E6%95%B0%E7%BB%84%E8%BF%94%E5%9B%9E.png" alt="获取元素"></p><hr><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E8%8E%B7%E5%8F%96%E7%88%B6%E5%85%83%E7%B4%A0.png" alt="获取元素"></p><blockquote><p>var ol = 父元素.getElementsByTagName(‘标签’);</p><p>console.log(ol.getElementsByTagName(‘li’);</p><p><code>一般设定id指定</code></p></blockquote><hr><h4 id="3-12html5新增三个获取元素的接口"><a href="#3-12html5新增三个获取元素的接口" class="headerlink" title="3.12html5新增三个获取元素的接口"></a>3.12html5新增三个获取元素的接口</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E9%80%89%E6%8B%A9%E5%99%A8%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0.png" alt="获取元素"></p><hr><h4 id="3-13body-html元素获取方式"><a href="#3-13body-html元素获取方式" class="headerlink" title="3.13body,html元素获取方式"></a>3.13body,html元素获取方式</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/body,html%E5%85%83%E7%B4%A0%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F.png" alt="获取元素"></p><blockquote><ul><li>对应两个命令来获取元素信息<a name="top">获取方式</a></li><li>document.body() &amp; document.documentElement()</li></ul></blockquote><hr><h3 id="3-2对DOM的事件三要素"><a href="#3-2对DOM的事件三要素" class="headerlink" title="3.2对DOM的事件三要素"></a>3.2对DOM的事件三要素</h3><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E4%BA%8B%E4%BB%B6%E4%B8%89%E8%A6%81%E7%B4%A0.png" alt="获取元素"></p><blockquote><p>1.获取事件 2.绑定事件 3.函数处理</p></blockquote><hr><h3 id="3-3获取元素后的处理（案例）"><a href="#3-3获取元素后的处理（案例）" class="headerlink" title="3.3获取元素后的处理（案例）"></a>3.3获取元素后的处理（案例）</h3><h4 id="3-31处理刷新时间"><a href="#3-31处理刷新时间" class="headerlink" title="3.31处理刷新时间"></a>3.31处理刷新时间</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E6%94%B9%E5%8F%98%E5%85%83%E7%B4%A0%E5%86%85%E5%AE%B9.png" alt="获取元素"></p><blockquote><p>onclick（判定点击）</p><p>div.innerText(div里面的内容)</p><p>getTime(封装好的时间函数)，记得<code>要实例化</code></p><p><code>var date = new Date();</code>//目前<code>参数固定</code></p></blockquote><h4 id="3-311拓展innerHTML"><a href="#3-311拓展innerHTML" class="headerlink" title="3.311拓展innerHTML"></a>3.311<code>拓展innerHTML</code></h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/innerHtml.png" alt="获取元素"></p><blockquote><p>是否识别html标签</p><p>是否保留空格/换行（格式）</p></blockquote><hr><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E5%B8%B8%E7%94%A8%E5%85%83%E7%B4%A0.png" alt="获取元素"></p><hr><h4 id="3-32-根据时间改变图片路径"><a href="#3-32-根据时间改变图片路径" class="headerlink" title="3.32 根据时间改变图片路径"></a>3.32 根据时间改变图片路径</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E6%97%B6%E9%97%B4%E8%87%AA%E5%8A%A8%E6%94%B9%E5%8F%98%E5%9B%BE%E7%89%87.png" alt="获取元素"></p><blockquote><p>1.获取图片元素</p><p>2.获取系统时间信息</p><p>3.判断时间，并修改图片路径</p></blockquote><hr><h4 id="3-32表单元素修改"><a href="#3-32表单元素修改" class="headerlink" title="3.32表单元素修改"></a>3.32表单元素修改</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E8%A1%A8%E5%8D%95%E5%86%85%E5%AE%B9%E4%BF%AE%E6%94%B9.png" alt="获取元素"></p><blockquote><p>input里面的内容需要<code>通过value值来修改</code></p></blockquote><hr><h4 id="3-33js修改样式"><a href="#3-33js修改样式" class="headerlink" title="3.33js修改样式"></a>3.33js修改样式</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/js%E4%BF%AE%E6%94%B9%E6%A0%B7%E5%BC%8F.png" alt="获取元素"></p><p><img src="/2022/12/14/JS%E7%9A%84DOM/js%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E4%BF%AE%E6%94%B9%E6%A0%B7%E5%BC%8F.png" alt="获取元素"></p><hr><h4 id="3-34精灵图标快速使用"><a href="#3-34精灵图标快速使用" class="headerlink" title="3.34精灵图标快速使用"></a>3.34精灵图标快速使用</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E7%B2%BE%E7%81%B5%E5%9B%BE%E6%A0%87%E5%BF%AB%E9%80%9F.png" alt="获取元素"></p><blockquote><ul><li>利用图标的坐标，使用for循环依次截取图标</li><li><code>最好控制一个坐标一直不变</code></li></ul></blockquote><hr><h4 id="3-35显示隐藏文本框内容"><a href="#3-35显示隐藏文本框内容" class="headerlink" title="3.35显示隐藏文本框内容"></a>3.35显示隐藏文本框内容</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E9%9A%90%E8%97%8F%E6%96%87%E6%9C%AC.png" alt="获取元素"></p><blockquote><p>利用的是</p><p>onfocus</p><p>onblur实现</p></blockquote><hr><h3 id="3-4忘记了的总结"><a href="#3-4忘记了的总结" class="headerlink" title="3.4忘记了的总结"></a>3.4忘记了的总结</h3><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E6%93%8D%E4%BD%9C%E5%85%83%E7%B4%A0%E7%9A%84%E6%80%BB%E7%BB%93.png" alt="获取元素"></p><blockquote><ul><li>一个是body和html的元素获取方式<a href="#top">特殊元素的获取</a></li><li>绝对定位和相对定位的使用</li><li>input和password和button的使用   </li><li>cursor: pointer;实现元素能被点击</li><li>下拉式菜单，利用a:hover实现</li><li>display：none;实现开关灯</li><li>焦点的触发与离开。</li><li><code>display: inline-block</code>;实现块元素同行（本来不可同行）</li></ul></blockquote><hr><hr><h3 id="3-5排他思想（算法）"><a href="#3-5排他思想（算法）" class="headerlink" title="3.5排他思想（算法）"></a>3.5排他思想（算法）</h3><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E6%8E%92%E4%BB%96%E6%80%9D%E6%83%B3.png" alt="获取元素"></p><blockquote><p>循环全部清空清算敌人，选中自己</p></blockquote><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E6%8E%92%E4%BB%96%E6%80%9D%E6%83%B3%E8%A7%A3%E6%9E%90.png" alt="获取元素"></p><blockquote><p>同一组元素，想改变某一个元素</p></blockquote><h4 id="3-51-背景更换"><a href="#3-51-背景更换" class="headerlink" title="3.51.背景更换"></a>3.51.背景更换</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E6%8E%92%E4%BB%96%E6%80%9D%E6%83%B3.png" alt="获取元素"></p><hr><hr><h3 id="3-6-表格制作"><a href="#3-6-表格制作" class="headerlink" title="3.6.表格制作"></a>3.6.表格制作</h3><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E8%A1%A8%E6%A0%BC.png" alt="获取元素"></p><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E8%A1%A8%E6%A0%BC%E4%BE%8B%E5%AD%90.png" alt="获取元素"></p><hr><h4 id="3-61拓展表格"><a href="#3-61拓展表格" class="headerlink" title="3.61拓展表格"></a><code>3.61拓展表格</code></h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E8%A1%A8%E6%A0%BC%E5%85%A8%E9%80%89%E5%AE%9E%E7%8E%B0.png" alt="获取元素"></p><p><code>效果如下图</code></p><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E5%85%A8%E9%80%89.png" alt="获取元素"></p><hr><hr><h3 id="3-7-自定义属性操作"><a href="#3-7-自定义属性操作" class="headerlink" title="3.7.自定义属性操作"></a>3.7.自定义属性操作</h3><blockquote><p>1.自定义属性只能div.getAttribute(‘data-index’);</p><p>2.div.dataset.index</p><p>3.有多个-时</p><p>div.dataset.listName</p><p>div.data[‘listName’]</p><ul><li>规范data-开头为自己设置的自定义属性<code>（H5新增）</code></li></ul></blockquote><h4 id="3-71获取元素的属性"><a href="#3-71获取元素的属性" class="headerlink" title="3.71获取元素的属性"></a>3.71获取元素的属性</h4><ul><li><p>老方法+获取自定义属性的方法</p><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E8%8E%B7%E5%8F%96%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95.png" alt="获取元素"></p></li></ul><h4 id="3-71-设置属性"><a href="#3-71-设置属性" class="headerlink" title="3.71.设置属性"></a>3.71.设置属性</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E8%AE%BE%E7%BD%AE%E5%B1%9E%E6%80%A7.png" alt="获取元素"></p><blockquote><p><code>setAttribute(&#39;  &#39;,&#39;  &#39;);还可以更改自定义属性</code></p></blockquote><p><code>*拓展</code></p><blockquote><p>removeAttribute//移除属性值</p><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E8%AE%BE%E7%BD%AE&%E8%8E%B7%E5%8F%96%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7.png" alt="获取元素"></p></blockquote><p><code>效果如下图</code></p><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E5%8F%82%E6%95%B0%E5%8F%98%E5%8C%96.png" alt="获取元素"></p><hr><hr><h3 id="3-8-节点操作"><a href="#3-8-节点操作" class="headerlink" title="3.8.节点操作"></a>3.8.节点操作</h3><hr><h4 id="3-81-节点层级"><a href="#3-81-节点层级" class="headerlink" title="3.81.节点层级"></a>3.81.节点层级</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E8%8A%82%E7%82%B9%E5%B1%82%E7%BA%A7.png" alt="获取元素"></p><h4 id="3-82-操作"><a href="#3-82-操作" class="headerlink" title="3.82.操作"></a>3.82.操作</h4><ul><li>获取父级节点</li></ul><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E8%8E%B7%E5%8F%96%E7%88%B6%E7%BA%A7%E8%8A%82%E7%82%B9.png" alt="获取元素"></p><blockquote><p>li.parentNode</p></blockquote><ul><li>获取子节点</li></ul><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E5%AD%90%E8%8A%82%E7%82%B9%E8%8E%B7%E5%8F%96.png" alt="获取元素"></p><blockquote><p>ul.children</p></blockquote><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E8%8E%B7%E5%8F%96%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%90%E5%85%83%E7%B4%A0.png" alt="获取元素"></p><ul><li>获取兄弟节点</li></ul><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E8%8E%B7%E5%8F%96%E5%85%84%E5%BC%9F%E8%8A%82%E7%82%B9.png" alt="获取元素"></p><blockquote><p><code>根据元素、文本、对应的数字</code></p></blockquote><ul><li>创建添加节点（评论区）</li></ul><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E5%88%9B%E5%BB%BA%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9.png" alt="获取元素"></p><blockquote><p><code>1.创建</code></p><p>createElement(‘li’);</p><p><code>2.添加</code></p><p>ul.appendChildren(li);//<code>前提</code>是获取它的父节点</p><p>ul.insertBefore(li,ul.children[0]);<code>插入</code>节点到位置</p></blockquote><hr><ul><li><code>删除节点</code></li></ul><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9.png" alt="获取元素"></p><ul><li><code>拷贝节点</code></li></ul><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E6%B5%85%E6%8B%B7%E8%B4%9D.png" alt="获取元素"></p><blockquote><p>node.cloneNode();<code>括号为空时是浅拷贝</code></p><p>node.cloneNode(<code>true</code>);//<code>为深拷贝</code></p></blockquote><hr><hr><p>创建元素</p><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E4%B8%89%E7%A7%8D%E5%88%9B%E5%BB%BA%E5%85%83%E7%B4%A0.png" alt="元素"></p><blockquote><p>利用数组，的innerHTML效率更高</p><p><code>忘记的</code>数组转化为字符串</p><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E6%95%B0%E7%BB%84join%E6%8B%BC%E6%8E%A5.png" alt="获取元素"></p><p>参数为空</p></blockquote><hr><h3 id="3-83-生成动态表格"><a href="#3-83-生成动态表格" class="headerlink" title="3.83.生成动态表格"></a><code>3.83.生成动态表格</code></h3><ul><li>数组数据</li></ul><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E6%95%B0%E7%BB%84%E6%95%B0%E6%8D%AE.png" alt="节点操作"></p><ul><li>动态生成表格</li></ul><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E8%A1%A8%E6%A0%BC.png" alt="节点操作"></p><blockquote><ul><li>行数与数组元素有关</li><li>格子数与对象个数有关</li><li>datas[ i ] [ k ]//指的是第i个元素的第k个对象属性</li></ul></blockquote><hr><hr><hr><hr><h2 id="4-DOM核心"><a href="#4-DOM核心" class="headerlink" title="4.DOM核心"></a>4.DOM核心</h2><blockquote><p><img src="/2022/12/14/JS%E7%9A%84DOM/dom%E6%93%8D%E4%BD%9C.png" alt="节点操作"></p></blockquote><p>1.创建（三种）</p><p>2.增（两个）</p><p>3.一个</p><p>4.<img src="/2022/12/14/JS%E7%9A%84DOM/%E6%94%B9%E5%85%83%E7%B4%A0%E5%B1%9E%E6%80%A7.png" alt="节点操作"></p><p>5.查（获取）</p><p>分三类：古老、H5、节点父子兄关系</p><p>6.属性操作</p><ul><li>设置</li><li>获取</li><li>移除</li></ul><p>7.事件操作</p><blockquote><p>onclick</p><p>onfoucus</p><p>onblur</p><p>onmouseover</p><p>onmouseout</p><p>onmouseup</p><p>onmousedown</p><p>onmousemove</p></blockquote><hr><hr><p><code>任务目标</code> </p><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E5%85%83%E7%B4%A0%E6%93%8D%E4%BD%9C%E7%9B%AE%E6%A0%87.png" alt="节点操作"></p><p><code>1.注册事件</code></p><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E4%BC%A0%E7%BB%9F%E7%9A%84%E6%B3%A8%E5%86%8C%E4%BA%8B%E4%BB%B6.png" alt="节点操作"></p><hr><p><code>方法监听注册方式</code></p><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E6%96%B9%E6%B3%95%E7%9B%91%E5%90%AC%E6%B3%A8%E5%86%8C%E6%96%B9%E5%BC%8F.png" alt="节点操作"></p><hr><p><code>addEvetListener()</code></p><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E7%9B%91%E5%90%AC%E6%B3%A8%E5%86%8C%E4%BA%8B%E4%BB%B6.png" alt="节点操作"></p><blockquote><p>注意字符串要加单引号</p></blockquote><p>解决兼容性的问题。通过判断是否支持，不支持改成支持的那种格式</p><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E6%B3%A8%E5%86%8C%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7.png" alt="事件"></p><hr><hr><p>2.移除事件</p><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E4%B8%89%E7%A7%8D%E7%A7%BB%E9%99%A4%E4%BA%8B%E4%BB%B6.png" alt="事件"></p><blockquote><p><code>添加</code></p><p>1.div.onclick = function()</p><p>2.div.<code>add</code>EventListener(<code>&#39;click&#39;</code>,fn)</p><p>3.div.attachEvent(<code>&#39;onclick&#39;</code>,fn1)</p><p><code>移除</code></p><p>1.div.onclick = null;</p><p>2.div.<code>remove</code>EventListener(<code>&#39;click&#39;</code>,fn)</p><p>3.div.detachEvent(<code>&#39;onclick&#39;</code>,fn1)</p></blockquote><hr><h3 id="1-DOM事件流"><a href="#1-DOM事件流" class="headerlink" title="1.DOM事件流"></a>1.DOM事件流</h3><p><img src="/2022/12/14/JS%E7%9A%84DOM/DOM%E4%BA%8B%E4%BB%B6%E6%B5%81.png" alt="事件"></p><blockquote><ul><li>捕获阶段，参数为ture</li><li>冒泡阶段，参数为false</li><li>2.div.<code>add</code>EventListener(<code>&#39;click&#39;</code>,fn,<code>ture/false</code>)</li></ul></blockquote><hr><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E4%BA%8B%E4%BB%B6%E6%B5%81%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.png" alt="."></p><hr><h4 id="1-常见的属性"><a href="#1-常见的属性" class="headerlink" title="1.常见的属性"></a>1.常见的属性</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%E5%B8%B8%E8%A7%81%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95.png" alt="事件对象常见属性和方法"></p><blockquote><p><code>e.target与this的区别</code></p></blockquote><p><img src="/2022/12/14/JS%E7%9A%84DOM/this%E4%B8%8Ee.target%E7%9A%84%EF%BC%88%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%EF%BC%89%E5%8C%BA%E5%88%AB.png"></p><blockquote><p><code>返回</code>事件的<code>类型</code>&amp;<code>阻止</code>默认事件的<code>方法</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常见事件对象的属性和方法</span></span><br><span class="line">    <span class="comment">//1.返回事件类型</span></span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>,fn);</span><br><span class="line">    div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,fn);</span><br><span class="line">    div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>,fn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">type</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.阻止默认事件，让链接不要跳转，或者让提交按钮不提交</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">a.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">e.<span class="title function_">preventDefault</span>();<span class="comment">//dom 标准写法 常用</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.传统的注册方式</span></span><br><span class="line">a.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//普通浏览器 e.preventDefault(); 方法</span></span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="comment">//低版本浏览器 ie678  e.returnValue 属性</span></span><br><span class="line">    e.<span class="property">returnValue</span>;</span><br><span class="line">    <span class="comment">//没有兼容性问题 但是后面的代码不执行了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>阻止事件冒泡</p></blockquote><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1.png" alt="阻止事件冒泡"></p><hr><h4 id="2-事件委派"><a href="#2-事件委派" class="headerlink" title="2.事件委派"></a>2.事件委派</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%B4%BE.png" alt="事件委派"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;把我也带走&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//冒泡父级影响子节点，通过一个dom操作实现四个dom操作</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="3-鼠标事件"><a href="#3-鼠标事件" class="headerlink" title="3.鼠标事件"></a>3.鼠标事件</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E9%BC%A0%E6%A0%87%E8%8E%B7%E5%8F%96%E5%9D%90%E6%A0%87.png" alt="鼠标获取坐标"></p><blockquote><p>根据对应要求获取坐标信息</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">//鼠标事件对象 MouseEvent</span></span><br><span class="line">        <span class="comment">//鼠标位置</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="comment">//可视区（移动拖条也不变）</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientX</span>+<span class="string">&#x27;,&#x27;</span>+e.<span class="property">clientY</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------&#x27;</span>);</span><br><span class="line">            <span class="comment">//页面文档</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageX</span>+<span class="string">&#x27;,&#x27;</span>+e.<span class="property">pageY</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------&#x27;</span>);</span><br><span class="line">            <span class="comment">//电脑屏幕</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">screenX</span>+<span class="string">&#x27;,&#x27;</span>+e.<span class="property">screenY</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>鼠标移动精灵的应用</li></ul><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8%E7%B2%BE%E7%81%B5.png" alt="鼠标移动精灵"></p><hr><h4 id="4-键盘事件"><a href="#4-键盘事件" class="headerlink" title="4.键盘事件"></a>4.键盘事件</h4><p><img src="/2022/12/14/JS%E7%9A%84DOM/%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6.png" alt="键盘事件"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS基础（2）</title>
      <link href="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/"/>
      <url>/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="9-数组"><a href="#9-数组" class="headerlink" title="9.数组"></a>9.数组</h2><h3 id="9-1创建数组"><a href="#9-1创建数组" class="headerlink" title="9.1创建数组"></a>9.1创建数组</h3><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA.png" alt="数组创建"></p><blockquote><p><code>中括号是常用的方法</code></p></blockquote><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA%E8%A7%84%E5%88%99.png" alt="数组创建规则"></p><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E6%95%B0%E7%BB%84%E9%97%AE%E9%A2%98.png" alt="数组问题"></p><p><strong><code>可以将多个数据存储到一个变量下，方便</code></strong></p><p><strong><code>利用new创建</code></strong></p><p><strong><code>利用中括号创建</code></strong></p><p>数组里面的数据、没有限制，有字符，数字，布尔等等</p><hr><h3 id="9-2-数组数据的使用"><a href="#9-2-数组数据的使用" class="headerlink" title="9.2 数组数据的使用"></a>9.2 数组数据的使用</h3><blockquote><p> var arr = [‘a’,’b’,’c’,’d’];</p><p> 通过索引号使用，0、1、2、3</p><p> arr[1];</p></blockquote><blockquote><p><code>**可以通过循环的方式，会更方便**</code></p></blockquote><hr><h4 id="1-遍历数组"><a href="#1-遍历数组" class="headerlink" title="1.遍历数组"></a>1.遍历数组</h4><p><code>循环遍历</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [关羽 刘备，张飞]；</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt;= <span class="number">2</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arr[i]&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>i&lt; arr.length//会更加方便，<code>动态检测</code></p></blockquote><p>问题</p><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84%E9%97%AE%E9%A2%98.png" alt="遍历数组问题"></p><blockquote><ul><li><strong><code>输出数组最大/小值</code></strong></li><li><strong><code>数组字符串相连，（符号可以在外面定义一个变量</code></strong></li></ul></blockquote><hr><hr><h4 id="2-数组新增-删除元素"><a href="#2-数组新增-删除元素" class="headerlink" title="2.数组新增/删除元素"></a>2.数组新增/删除元素</h4><blockquote><ul><li><p>检测数组长度</p><p>console.log(arr.length);</p></li></ul></blockquote><hr><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E6%96%B0%E5%A2%9E%E6%95%B0%E7%BB%84.png" alt="新增数组"></p><ol><li><strong><code>修改长度</code></strong>(出现未定义的元素)</li><li>**<code>增加索引号，追加数组</code>**（加入元素，替换元素）</li></ol><blockquote><p><strong>数组变量相当于变量，不能直接赋值，否则数据没了</strong></p></blockquote><hr><hr><p>2.<strong>删除数组元素</strong></p><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E6%95%B0%E7%BB%84%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0.png" alt="数组删除元素"></p><p><code>**由于数组的长度会跟着变化，所以一般这样设定**</code></p><hr><hr><h4 id="3-冒泡排序（从大到小-从小到大从新排）"><a href="#3-冒泡排序（从大到小-从小到大从新排）" class="headerlink" title="3.冒泡排序（从大到小/从小到大从新排）"></a>3.冒泡排序（从大到小/从小到大从新排）</h4><p>用到双循环，管外，管内</p><p>用到变量值的交换</p><p>用到数组的一些长度计算，新数组等等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line">        <span class="keyword">var</span> newArr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= arr.<span class="property">length</span> - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">var</span> temp = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>容易<code>**犯错**</code>的点：</p><ol><li><strong><code>比较次数j与循环趟数i需要分开，这样更加清晰</code></strong></li><li><strong><code>减去多余的次数，更加方便</code></strong></li><li><strong><code>可以在外面定义变量temp剩下空间</code></strong></li><li><strong><code>双循环的思路一般是两个循环分开工作，要理解好各自工作的内容。</code></strong></li></ol></blockquote><hr><p><code>**翻转数组**</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> arr=[<span class="string">&#x27;刘备&#x27;</span>,<span class="string">&#x27;关羽&#x27;</span>,<span class="string">&#x27;张飞&#x27;</span>,<span class="string">&#x27;赵云&#x27;</span>,<span class="string">&#x27;黄忠&#x27;</span>];</span><br><span class="line">        <span class="keyword">var</span> newa=[];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;=arr.<span class="property">length</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            newa[i] = arr[arr.<span class="property">length</span>-i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newa);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>定义新数组从新增加元素，<code>**注意元素的位置**</code></li></ul><hr><hr><hr><h2 id="10-函数"><a href="#10-函数" class="headerlink" title="10.函数"></a>10.函数</h2><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E5%87%BD%E6%95%B0%E4%BE%8B%E5%AD%90.png" alt="函数例子"></p><blockquote><p><code>**一般函数的封装**</code></p></blockquote><blockquote><ul><li>函数命名通常是<code>动词</code></li><li>函数的执行需要调用，<code>getSum();</code></li></ul></blockquote><hr><h3 id="10-1-函数参数的问题"><a href="#10-1-函数参数的问题" class="headerlink" title="10.1 函数参数的问题"></a>10.1 函数参数的问题</h3><ol><li>形参（函数参数）、实参（用户）</li><li>实参超过。则会取参，取前面的</li><li>若实参不够，则NaN</li></ol><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0.png" alt="函数参数"></p><hr><hr><h3 id="10-2-return的使用和注意事项"><a href="#10-2-return的使用和注意事项" class="headerlink" title="10.2 return的使用和注意事项"></a>10.2 return的使用和注意事项</h3><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/return%E7%9A%84%E4%BD%BF%E7%94%A8.png" alt="return的使用"></p><blockquote><p><strong><strong><code>**利用数组时，可以实现许多功能**</code></strong></strong></p><p>如数组里面可以放方程</p><p><code>注意</code>：</p><ol><li><p>在返回值时，没有return返回undefined</p></li><li><p>return不仅可以跳出循环，还能返回return语句中的值，结束函数代码</p></li></ol></blockquote><hr><h3 id="10-3实参与形参的个数对应问题"><a href="#10-3实参与形参的个数对应问题" class="headerlink" title="10.3实参与形参的个数对应问题"></a>10.3实参与形参的个数对应问题</h3><blockquote><p>比较free，可以允许实参个数少于形参个数</p></blockquote><h3 id="1-遇到的问题可调用"><a href="#1-遇到的问题可调用" class="headerlink" title="1.遇到的问题可调用"></a><strong>1.遇到的问题<code>可调用</code></strong></h3><blockquote><p><strong><code>1.函数里面的变量只能在函数里面用</code></strong></p><p><strong><code>不能带到外面</code></strong></p><p>2.<code>**但是函数之间可以互相调用**</code></p></blockquote><hr><hr><h3 id="10-4-arguments-存储实参的组"><a href="#10-4-arguments-存储实参的组" class="headerlink" title="10.4 arguments(存储实参的组)"></a>10.4 arguments(存储实参的组)</h3><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/arguments%E8%8E%B7%E5%8F%96%E5%AE%9E%E5%8F%82.png" alt="arguments获取实参"></p><blockquote><ul><li>只有函数才有的，内置好的（伪数组）</li><li>存储了所有传递的实参<ol><li>console.log(arguments.length);</li><li>利用遍历可以输出</li></ol></li></ul></blockquote><hr><h3 id="2-案例中的发现"><a href="#2-案例中的发现" class="headerlink" title="2.案例中的发现"></a>2.案例中的发现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;<span class="comment">//true是函数的值</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-函数的命名"><a href="#3-函数的命名" class="headerlink" title="3.函数的命名"></a>3.函数的命名</h3><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E5%87%BD%E6%95%B0%E5%91%BD%E5%90%8D%E7%9A%84%E4%B8%8D%E5%90%8C.png" alt="函数命名的不同"></p><hr><hr><h2 id="11-作用域（起作用的范围）"><a href="#11-作用域（起作用的范围）" class="headerlink" title="11 作用域（起作用的范围）"></a>11 作用域（起作用的范围）</h2><blockquote><ol><li><p>提高代码的可靠性</p></li><li><p>减少命名的冲突问题</p></li><li><p>函数里面的命名与全局里面的命名</p></li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure><hr><h3 id="11-1变量作用域"><a href="#11-1变量作用域" class="headerlink" title="11.1变量作用域"></a>11.1变量作用域</h3><blockquote><ol><li><code>全局变量</code><ol><li>在函数里面<code>没有var声明</code></li><li>在全局作用域下的变量</li></ol></li></ol></blockquote><hr><blockquote><p>2.<code>局部变量</code></p><ol><li>在函数里面<code>有声明</code></li><li>函数里面的<code>形参</code></li></ol></blockquote><hr><h4 id="1-区别"><a href="#1-区别" class="headerlink" title="1.区别"></a>1.区别</h4><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E5%8F%98%E9%87%8F%E4%B8%8D%E5%90%8C%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="变量不同的区别"></p><blockquote><p><code>注意</code></p><p>es6中才加的块级作用域</p></blockquote><hr><hr><h3 id="11-2作用域链"><a href="#11-2作用域链" class="headerlink" title="11.2作用域链"></a>11.2作用域链</h3><p><code>函数包含函数时的变量作用域问题</code></p><hr><hr><h2 id="12-预解析（将一些定义提前）"><a href="#12-预解析（将一些定义提前）" class="headerlink" title="12.预解析（将一些定义提前）"></a>12.预解析（将一些定义提前）</h2><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E9%A2%84%E8%A7%A3%E6%9E%90%E7%9A%84%E5%86%85%E5%AE%B9.png" alt="预解析的内容"></p><blockquote><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/var%E9%A2%84%E8%A7%A3%E6%9E%90.png" alt="var预解析"></p></blockquote><ul><li><code>提升到当前作用域的最前面</code></li><li><code>定义变量/函数</code></li></ul><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E5%BD%93%E5%89%8D%E5%AE%9A%E4%B9%89%E5%9F%9F%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E5%87%BD%E6%95%B0%E6%8F%90%E5%89%8D.png" alt="当前定义域的变量和函数提前"></p><blockquote><p>最后加上console.log(num);</p><p>结果分别是是undefind  ,20 ，10</p><p>1.函数外var全局声明，函数内var在函数内全局（局部变量），两者均提前到当前域的最前面</p></blockquote><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E5%BD%93%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E6%9C%89%E5%85%B3%E7%B3%BB%E6%97%B6.png" alt="当变量声明有关系时"></p><ul><li><code>var a = b = c = 9(只声明了a)</code>这样容易变成全局声明</li><li><code>var a = 9, b = 9, c = 9;（全部声明）</code> </li></ul><hr><hr><hr><h2 id="13-TARGET（对象）"><a href="#13-TARGET（对象）" class="headerlink" title="13.TARGET（对象）"></a>13.TARGET（对象）</h2><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/JS%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9A%E4%B9%89.png" alt="JS中对象的定义"></p><blockquote><p>具体的</p></blockquote><h3 id="13-1创建对象的三种方法"><a href="#13-1创建对象的三种方法" class="headerlink" title="13.1创建对象的三种方法"></a>13.1创建对象的三种方法</h3><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95.png" alt="创建对象的三种方法"></p><blockquote><p>1.字面量//<code>大括号创建空对象</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">         <span class="attr">uname</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">         <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">         <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~&#x27;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">uname</span>);<span class="comment">//.+信息</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;age&#x27;</span>]);<span class="comment">//属性信息用中括号</span></span><br><span class="line">     obj.<span class="title function_">sayHi</span>();<span class="comment">//属性的方法调用</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.<code>其中&#39;.&#39;理解为‘的’</code></p><p>如<code>obj的方法</code>||<code>obj的age</code></p><p>3.uname: ‘张三’,<br>         age: ‘18’</p><p>这里需要注意中间用<code>冒号</code>表示一个键值对</p><p>每个键值对用<code>逗号隔开</code></p></blockquote><h4 id="1-与变量的相同"><a href="#1-与变量的相同" class="headerlink" title="1.与变量的相同"></a>1.与变量的相同</h4><blockquote><p> 都是可以存储信息</p></blockquote><h4 id="2-不同"><a href="#2-不同" class="headerlink" title="2.不同"></a>2.不同</h4><blockquote><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E5%AF%B9%E8%B1%A1%E4%B8%8E%E4%B8%80%E8%88%AC%E5%8F%98%E9%87%8F&%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E5%90%8C.png" alt="对象与一般变量&amp;函数的异同"></p><p><code>一般都是调用的时候不同</code></p><p>变量和函数都是可以<code>单独存在</code>的</p></blockquote><hr><hr><h3 id="13-2利用new-Object创建对象"><a href="#13-2利用new-Object创建对象" class="headerlink" title="13.2利用new Object创建对象"></a>13.2利用new Object创建对象</h3><blockquote><p>其实就是<code>直接创建对象</code></p><p>1.先创建一个空对象</p><p>2.obj.sex = ‘男’;</p><p><code>var o =&#123;&#125;;</code></p><p><code>o[a];//创建了对象o,里面的一个属性a（可以是变量.</code></p></blockquote><hr><blockquote><p><code>这里要注意，obj.sex创建的属性是明确的，不能用变量</code></p></blockquote><hr><h3 id="13-3创建多个对象（方便）构造函数"><a href="#13-3创建多个对象（方便）构造函数" class="headerlink" title="13.3创建多个对象（方便）构造函数"></a>13.3创建多个对象（方便）<code>构造函数</code></h3><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/new%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%EF%BC%8C%E6%96%B9%E4%BE%BF%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA.png" alt="new构造一个函数，方便多个对象创建"></p><blockquote><p>相当于之前的调用函数+创建数组的样子</p><p>new+构造函数名+对象信息（相同）</p><p>快速创建</p><p>还要用<code>this</code></p><p>this.sing = function(sang) {</p><p>​    console.log(sang);</p><p>}</p><p>ldh.sing(‘冰雨’)；</p></blockquote><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/new%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.png" alt="new创建对象"></p><hr><p><code>new?</code></p><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/new.png" alt="new"></p><hr><hr><h3 id="13-4实现遍历对象for-in（让属性有序，可以输出"><a href="#13-4实现遍历对象for-in（让属性有序，可以输出" class="headerlink" title="13.4实现遍历对象for in（让属性有序，可以输出"></a>13.4实现<code>遍历对象</code>for in（让属性有序，可以输出</h3><p>![for in遍历对象中的内容](for in遍历对象中的内容.png)</p><blockquote><p>（<code>输出也是和遍历输出一样的，可以在里面添加条件语句比较大小</code>）</p></blockquote><hr><h4 id="1-实现任意数组的冒泡"><a href="#1-实现任意数组的冒泡" class="headerlink" title="1.实现任意数组的冒泡"></a>1.实现任意数组的冒泡</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">Number</span>(<span class="params">reverse</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">reverse</span> = <span class="keyword">function</span> (<span class="params">sang</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> newArr = [];</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= sang.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= sang.<span class="property">length</span> - i - <span class="number">1</span>; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (sang[j] &lt; sang[j + <span class="number">1</span>]) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">var</span> temp = sang[j + <span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">                            sang[j + <span class="number">1</span>] = sang[j];</span></span><br><span class="line"><span class="language-javascript">                            sang[j] = temp;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                newArr = sang;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">2</span>,<span class="number">99</span>], arr2 = <span class="keyword">new</span> <span class="title class_">Number</span>(arr1);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span></span><br><span class="line"><span class="language-javascript">        arr2.<span class="title function_">reverse</span>(arr1);</span></span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id="14内置对象-快捷内置方法"><a href="#14内置对象-快捷内置方法" class="headerlink" title="14内置对象(快捷内置方法)"></a>14内置对象(快捷内置方法)</h2><blockquote><p>对象分为三种：</p><p><code>自定义对象（obj)、内置对象、浏览器对象</code></p></blockquote><h3 id="14-1多去查文档（MDN）Math对象"><a href="#14-1多去查文档（MDN）Math对象" class="headerlink" title="14.1多去查文档（MDN）Math对象"></a>14.1多去查文档（MDN）Math对象</h3><p>Math.max(1,9)</p><p>Math.PI</p><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/Math%E6%96%B9%E6%B3%95.png" alt="Math方法"></p><blockquote><p><code>会存在隐式转换</code>，字符串数字转换成数字</p><p>Math.abs(‘1’);</p><p>四舍五入，0.5无论正负都是<code>往大了取</code></p></blockquote><hr><h4 id="1-random获取随机数（实现点名）"><a href="#1-random获取随机数（实现点名）" class="headerlink" title="1.random获取随机数（实现点名）"></a>1.random获取随机数（实现点名）</h4><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E8%8E%B7%E5%8F%96%E4%B8%A4%E4%B8%AA%E6%95%B4%E6%95%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BB%BB%E6%84%8F%E6%95%B4%E6%95%B0.png" alt="获取两个整数之间的任意整数"></p><p><code>可以实现字符串随机取</code></p><blockquote><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E9%9A%8F%E6%9C%BA%E7%82%B9%E5%90%8D.png" alt="随机点名"></p><p><code>利用random代替数字的索引号</code></p></blockquote><hr><hr><h3 id="14-2日期对象（其实就是构造一个日期函数）"><a href="#14-2日期对象（其实就是构造一个日期函数）" class="headerlink" title="14.2日期对象（其实就是构造一个日期函数）"></a>14.2日期对象（其实就是构造一个日期函数）</h3><blockquote><p>需要用到<code>new</code>(实例化后才能使用)</p></blockquote><p>var date = new Dat();</p><p>console.log(date.getMonth()+1);</p><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E8%8E%B7%E5%BE%97%E6%97%A5%E6%9C%9F%E7%9A%84date%E6%96%B9%E6%B3%95.png" alt="获得日期的date方法"></p><blockquote><p><code>1.利用数组实现日期的输出</code></p><p>var date = new Date();<code>//(实例化)</code></p><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E8%BE%93%E5%87%BA%E6%97%A5%E6%9C%9F.png" alt="输出日期"></p><p>在方法里面，<code>星期日输出的是0，刚好对应索引号0</code></p><p>可以在此基础上，加入<code>时分秒</code></p><p><code>2.用函数输出时分秒</code></p><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E6%97%B6%E5%88%86%E7%A7%92.png" alt="函数输出时分秒"></p><p><code>格式</code></p><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E6%97%B6%E5%88%86%E7%A7%92%E6%A0%BC%E5%BC%8F.png" alt="时分秒格式"></p><p>s = s &lt; 10 ？’0’ + s : s;//<code>s小于10就在前面+0，否则直接输出</code></p></blockquote><hr><hr><h3 id="14-3数组对象"><a href="#14-3数组对象" class="headerlink" title="14.3数组对象"></a>14.3数组对象</h3><p>创建方法与之前大致相同</p><h4 id="1-检测是否为数组"><a href="#1-检测是否为数组" class="headerlink" title="1.检测是否为数组"></a>1.检测是否为数组</h4><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E4%B8%BA%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95.png" alt="检测是否为数组的两种方法"></p><hr><h4 id="2-添加数组"><a href="#2-添加数组" class="headerlink" title="2.添加数组"></a>2.添加数组</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>);<span class="comment">//末尾添加4进去</span></span><br><span class="line"><span class="title function_">unshift</span>(<span class="number">0</span>);<span class="comment">//前面增加一个元素</span></span><br><span class="line"><span class="comment">//返回长度</span></span><br></pre></td></tr></table></figure><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E5%89%8D%E5%90%8E%E6%B7%BB%E5%8A%A0%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95.png" alt="前后添加数组元素的方法"></p><p>前后增加一个元素</p><p>pop();//后面删除一个元素，返回删除的元素</p><p>shift();//删除第一个元素，返回删除的那个元素</p></blockquote><blockquote><p><code>push//可以直接增加一个数组到另一个数组里面</code></p><ul><li><p>之前需要的是创建一个新的数组用for循环进行转移</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =  <span class="number">1</span>;i &lt;= arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">arrNew [arrNew.<span class="property">length</span>] = arr [ i ];&#125;</span><br></pre></td></tr></table></figure></li><li></li></ul></blockquote><hr><h4 id="3-数组排序"><a href="#3-数组排序" class="headerlink" title="3.数组排序"></a>3.数组排序</h4><blockquote><p><code>arr.reverse()</code></p><p><code>颠倒数组</code></p></blockquote><blockquote><p>arr.sort(function(a,b)){</p><p>return a - b;//<code>升序排列</code>b - a降序</p><p>}//<code>就是冒泡排序</code></p></blockquote><p><code>以上均会改变原来的数组，返回一个新的数组（arrNew=[])</code></p><hr><h4 id="4-索引数组元素-往前往后查"><a href="#4-索引数组元素-往前往后查" class="headerlink" title="4.索引数组元素(往前往后查)"></a>4.索引数组元素(往前往后查)</h4><blockquote><p><code>indexOf(数组元素)</code>//(相同时)返回第一个满足的数组元素的索引号&lt;</p><p><code>lastIndexOf()</code>//最后一个</p></blockquote><blockquote><p>当数组里面找不到时，返回的是-1</p><p>var arr = [‘blue’];</p><p>console.log(arr.indexOf(‘blue’));</p><p>console.log(arr.lastIndexOf(‘blue’));</p></blockquote><hr><h4 id="5-数组转化为字符串"><a href="#5-数组转化为字符串" class="headerlink" title="5.数组转化为字符串"></a>5.数组转化为字符串</h4><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt="修改数组为字符串"></p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">toString</span>()；<span class="comment">//整个转化</span></span><br><span class="line">arr.<span class="title function_">join</span>(分隔符)；<span class="comment">//转化同时可以有分隔符</span></span><br></pre></td></tr></table></figure><p><code>join//默认分隔符为逗号，可以自定义分隔符</code></p><p><a name="数转字">数组转化为字符串</a></p></blockquote><hr><h4 id="6-数组修改拓展"><a href="#6-数组修改拓展" class="headerlink" title="6.数组修改拓展"></a>6.<code>数组修改拓展</code></h4><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E6%9B%B4%E6%94%B9%E6%95%B0%E7%BB%84.png" alt="更改数组"></p><p><a name="top">修改数组</a></p><hr><hr><h3 id="14-4字符串对象"><a href="#14-4字符串对象" class="headerlink" title="14.4字符串对象"></a>14.4字符串对象</h3><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E5%9F%BA%E6%9C%AC%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%EF%BC%88%E8%AE%A9%E6%95%B0%E6%8D%AE%E6%8B%A5%E6%9C%89%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%EF%BC%89.png" alt="基本包装类型（让数据拥有属性和方法）"></p><hr><h4 id="1-字符串不可变"><a href="#1-字符串不可变" class="headerlink" title="1.字符串不可变"></a>1.字符串不可变</h4><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/Users\dell\AppData\Roaming\Typora\typora-user-images\image-20220817155725310.png" alt="image-20220817155725310"></p><blockquote><p>只是改变了指向，原来的字符串仍然占空间（所以不要大量拼接字符串）``</p></blockquote><blockquote><p><code>每次更改字符串的操作都会返回一个新的字符串占用空间</code></p></blockquote><hr><h4 id="2-报告字符串的位置"><a href="#2-报告字符串的位置" class="headerlink" title="2.报告字符串的位置"></a>2.报告字符串的位置</h4><blockquote><p>str.indexOf(‘字符串’)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">var</span> str =<span class="string">&#x27;abcdefg,121041584&#x27;</span>;  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;1&#x27;</span>)+<span class="number">1</span>);    <span class="comment">//返回该字符串的位置</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;1&#x27;</span>)+<span class="number">1</span>);    <span class="comment">//返回该字符串的位置(优先后面)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>console.log(str.indexOf(‘1’,12)+1);//<code>从第十二个开始找</code></p></blockquote><blockquote><ul><li><code>检查数组中，元素出现的位置和次数</code></li></ul><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E6%A3%80%E6%9F%A5%E6%95%B0%E7%BB%84%E4%B8%AD%EF%BC%8C%E5%85%83%E7%B4%A0%E5%87%BA%E7%8E%B0%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%92%8C%E6%AC%A1%E6%95%B0.png" alt="检查数组中，元素出现的位置和次数"></p><blockquote><p><code>同理字符串也可以</code></p></blockquote></blockquote><hr><h4 id="3-根据位置返回字符串"><a href="#3-根据位置返回字符串" class="headerlink" title="3.根据位置返回字符串"></a>3.<code>根据位置返回字符串</code></h4><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E6%A0%B9%E6%8D%AE%E4%BD%8D%E7%BD%AE%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95.png" alt="根据位置返回字符串的三种方法"></p><blockquote><p>还能用if语句判断是否有这个属性</p><p>if(str[<code>&#39;age&#39;</code>])</p></blockquote><blockquote><p><code>检测字符的出现次数（并且比较大小）</code></p><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E6%A3%80%E6%B5%8B%E5%AD%97%E7%AC%A6%E7%9A%84%E6%95%B0%E9%87%8F.png" alt="检测字符的数量"></p><ul><li><code>可以利用for in来实现遍历比较大小</code></li></ul></blockquote><hr><h4 id="4-拼接字符串"><a href="#4-拼接字符串" class="headerlink" title="4.拼接字符串"></a>4.拼接字符串</h4><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt="截取字符串"></p><blockquote><p>可以与之前的数组截取对比</p><p><code>参考数组修改拓展</code></p></blockquote><p><a href="#top">跳转到修改数组</a></p><p><a href="#top">修改数组</a></p><hr><h4 id="5-替换字符串"><a href="#5-替换字符串" class="headerlink" title="5.替换字符串"></a>5.替换字符串</h4><blockquote><p>str.replace(‘a’,’*’);</p><p>可以用来替换敏感词</p></blockquote><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/replace%E5%81%9A%E5%88%B0%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt="replace做到替换字符串"></p><blockquote><p>str.indexOf(‘o’)//字符时</p><p>indexOf(数组元素)//数组时</p></blockquote><h4 id="6-字符转化为数组"><a href="#6-字符转化为数组" class="headerlink" title="6.字符转化为数组"></a>6.字符转化为数组</h4><p><a href="#%E6%95%B0%E8%BD%AC%E5%AD%97">数组转化为字符串</a></p><p><img src="/2022/12/14/JS%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E7%BB%84.png" alt="字符串转数组"></p><blockquote><p>这里应该<code>注意</code>字符串里面的<code>分隔符</code></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS基础语法</title>
      <link href="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JS基础"><a href="#1-JS基础" class="headerlink" title="1.JS基础"></a>1.JS基础</h1><h2 id="2-三种书写方"><a href="#2-三种书写方" class="headerlink" title="2.三种书写方"></a>2.三种书写方</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.行内式</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点点看&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;onclick是什么意思呢？&#x27;)&quot;</span>&gt;</span></span><br><span class="line">2.内嵌式</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;内嵌式用法&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">3.外部</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;外部书写.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>highlight 1</code><br><mark>highlight 2<mark></mark></mark></p><blockquote><ul><li><mark>与之前的用法十分相似<mark></mark></mark></li><li>懂了，就是点击出现警示框的意思</li></ul></blockquote><h2 id="3-js的三种输入输出语句"><a href="#3-js的三种输入输出语句" class="headerlink" title="3.js的三种输入输出语句"></a>3.js的三种输入输出语句</h2><hr><p><img src="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%AF%AD%E5%8F%A5.png" alt="三种常用的输入输出语句"></p><p><img src="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E4%B8%89%E7%A7%8D%E7%94%A8%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E8%A7%A3%E6%9E%90.png" alt="三种用法的使用解析"></p><blockquote><p><mark>1.输出给用户看的警示框<mark></mark></mark></p><p><mark>2.让用户输入的框<mark></mark></mark></p><p><mark>3.给程序员看的框（显示在console）<mark></mark></mark></p></blockquote><h2 id="4-命名规范"><a href="#4-命名规范" class="headerlink" title="4.命名规范"></a>4.命名规范</h2><p><img src="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83.png" alt="变量命名规范"></p><blockquote><ul><li><mark>注意驼峰命名<mark></mark></mark></li></ul></blockquote><blockquote><ul><li><mark>name最好不要作为直接变量使用<mark></mark></mark></li></ul></blockquote><blockquote><ul><li><mark>值得注意的是定义变量有三个，而且都有区别<mark></mark></mark></li></ul></blockquote><p><img src="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/var%E3%80%81let%E3%80%81const%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="var、let、const的区别"></p><ul><li>其中var在第六个版本中会被画出来</li></ul><h2 id="5-数据类型"><a href="#5-数据类型" class="headerlink" title="5.数据类型"></a>5.数据类型</h2><h3 id="5-1数据类型"><a href="#5-1数据类型" class="headerlink" title="5.1数据类型"></a>5.1数据类型</h3><h3 id="5-2字符串类型"><a href="#5-2字符串类型" class="headerlink" title="5.2字符串类型"></a>5.2字符串类型</h3><h4 id="1-字符串转义符"><a href="#1-字符串转义符" class="headerlink" title="1.字符串转义符"></a>1.字符串转义符</h4><p><img src="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89%E7%AC%A6.png" alt="字符串转义符"></p><blockquote><p>其中常用的为</p><ol><li><strong><mark>\n(换行符)<mark></mark></mark></strong></li><li><strong><mark>\\(斜杠)<mark></mark></mark></strong></li><li><strong><mark>\b(空格)<mark></mark></mark></strong></li></ol></blockquote><h4 id="2-拼接字符串-检测字符串的长度方法"><a href="#2-拼接字符串-检测字符串的长度方法" class="headerlink" title="2.拼接字符串\检测字符串的长度方法"></a>2.拼接字符串\检测字符串的长度方法</h4><p><strong><mark>变量+length<mark></mark></mark></strong></p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> demo=<span class="string">&quot;哈哈!&quot;</span>;<span class="comment">//定义变量为字符串</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(demo.<span class="property">length</span>);<span class="comment">//显示3</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><hr><p>字符串+其他类型=新的字符串</p><ul><li><p>字符串+字符串</p></li><li><blockquote><p>字符串+变量</p><p>var demo=prompt(‘请输入的的值’)</p><p>alert(‘’’haha’’+demo’);</p><p><mark>注意这里可以通过改变demo的值<mark></mark></mark></p></blockquote></li></ul><p><img src="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="转换为数据类型"></p><p>**常用的是加号拼接  **<mark><strong>S</strong><mark>tring()注意大写</mark></mark></p><blockquote><p>容易<mark><strong>犯错的点</strong><mark></mark></mark></p><ul><li><mark><strong>有加号的时候，经常输出的是字符型，要注意转换成数字类型</strong><mark></mark></mark></li></ul></blockquote><hr><h3 id="5-3boolean型（布尔）及undefined和-null"><a href="#5-3boolean型（布尔）及undefined和-null" class="headerlink" title="5.3boolean型（布尔）及undefined和 null"></a>5.3boolean型（布尔）及undefined和 null</h3><p><mark>布尔型就是<mark></mark></mark></p><p><mark>ture&amp;flase<mark></mark></mark></p><p><strong><mark>1&amp;0<mark></mark></mark></strong></p><p>undefined和null</p><blockquote><p><mark>未定义&amp;空值<mark></mark></mark></p></blockquote><p><img src="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/undefined%E5%92%8Cnull.png" alt="undefined和null"></p><hr><blockquote><p><strong><mark>转化为布尔型<mark></mark></mark></strong></p><p><strong><mark>Boolean()<mark></mark></mark></strong></p></blockquote><p><img src="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E4%B8%80%E8%88%AC%E7%9A%84%E5%B8%83%E5%B0%94%E5%9E%8B%E8%BD%AC%E5%8C%96.png" alt="一般的布尔型转化"></p><h3 id="5-4转化为数字型"><a href="#5-4转化为数字型" class="headerlink" title="5.4转化为数字型"></a>5.4转化为数字型</h3><ol><li><p>parseInt()//将字符型转换成整数型</p></li><li><p>parseFloat()//转化为浮点型</p></li></ol><blockquote><p>1.其中’120px’只会保留120</p><p>2.’aa120px’这个不太行</p></blockquote><ol start="3"><li><p>Number()//强制转换函数</p></li><li><p>-*/三个符号运算可以转换成</p><hr></li></ol><h3 id="5-5总结五种数据类型-检测"><a href="#5-5总结五种数据类型-检测" class="headerlink" title="5.5总结五种数据类型(检测)"></a>5.5总结五种数据类型(<mark>检测<mark>)</mark></mark></h3><ol><li>数字型(number)</li><li>字符型(string)</li><li>布尔型（boolean)</li><li>未定义(undifined)</li><li>空值(null)keyi</li></ol><blockquote><p><strong>平时通过字面量（看）判断类型，后台通过颜色来判断</strong></p><p><mark>通过**console.log(typeof+空格+());**命令检测数据类型<mark></mark></mark></p></blockquote><p><img src="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/typeof%E6%A3%80%E6%B5%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="typeof检测数据类型"></p><blockquote><p> <mark>注意:通过prompt取过来的值是字符型的。<mark></mark></mark></p></blockquote><hr><hr><h2 id="6-算数运算符"><a href="#6-算数运算符" class="headerlink" title="6.算数运算符"></a>6.算数运算符</h2><h2 id="6-1"><a href="#6-1" class="headerlink" title="6.1+-*/%"></a>6.1+-*/%</h2><ol><li>可以通过%余数是否为零判断是否整除</li><li>浮点数运算时因为计算机通过<mark><strong>二进制</strong><mark>过程，<mark><strong>所以会有误差</strong><mark></mark></mark></mark></mark></li><li>同样的<mark><strong>浮点数</strong><mark>经过运算后的值由于有误差所以<mark><strong>不能直接用来比较</strong><mark>相等</mark></mark></mark></mark></li></ol><p><img src="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.png" alt="算数运算符的常见问题"></p><hr><p>num=0 </p><p>num++</p><blockquote><p>先返回原值(式子）再计算给值给num</p></blockquote><p>++num</p><blockquote><p>先+1后返回原值++num=1,num=1</p><p>num++ + ++num||</p></blockquote><hr><h2 id="6-2短路运算-中断"><a href="#6-2短路运算-中断" class="headerlink" title="6.2短路运算(中断)"></a>6.2短路运算(中断)</h2><h3 id="1-逻辑-amp-与"><a href="#1-逻辑-amp-与" class="headerlink" title="1.逻辑&amp;与"></a>1.逻辑&amp;与</h3><p><img src="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E7%9F%AD%E8%B7%AF%E8%BF%90%E7%AE%97.png" alt="短路运算"></p><blockquote><p><mark><strong>返回值</strong><mark>，<strong>目前还不知道有什么意义</strong>?</mark></mark></p><ol><li><p>判断是否要中断后面的运算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>&amp;num++);<span class="comment">//返回1式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);<span class="comment">//由于没有运算，num=0</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><hr><h3 id="2-逻辑-或"><a href="#2-逻辑-或" class="headerlink" title="2.逻辑||或"></a>2.逻辑||或</h3><blockquote><p><mark><strong>1式真返回1，假则返回后面一个。直到出现真。</strong><mark></mark></mark></p></blockquote><hr><h3 id="3-逻辑比较"><a href="#3-逻辑比较" class="headerlink" title="3.逻辑比较"></a>3.逻辑比较</h3><p><img src="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="比较运算符"></p><blockquote><p><mark><strong>关于‘=’号的用法</strong><mark></mark></mark></p></blockquote><table><thead><tr><th>符号</th><th>作用</th><th>用法</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td></td></tr><tr><td>==</td><td>判断</td><td>判断两边是否相等（包含转化字符）</td></tr><tr><td>===</td><td>全等</td><td>值和数据类型完全相等</td></tr></tbody></table><hr><hr><h3 id="4-运算符优先级"><a href="#4-运算符优先级" class="headerlink" title="4.运算符优先级"></a>4.运算符优先级</h3><p><img src="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.png" alt="运算符优先级"></p><ul><li>大致与我们常见的顺序一样</li></ul><hr><h2 id="7-分支流程控制"><a href="#7-分支流程控制" class="headerlink" title="7.分支流程控制"></a>7.分支流程控制</h2><h3 id="7-1-if语句"><a href="#7-1-if语句" class="headerlink" title="7.1  if语句"></a>7.1  if语句</h3><blockquote><p><mark><strong>与以前学过的大致一样</strong><mark></mark></mark></p></blockquote><h3 id="7-2-if-else双分支语句"><a href="#7-2-if-else双分支语句" class="headerlink" title="7.2 if else双分支语句"></a>7.2 if else双分支语句</h3><blockquote><p>if(1&gt;0)</p><p>{alert(‘a’)};</p><p>else</p><p>{alert(‘b’)};</p><blockquote><p><mark><strong>与之前学过的大致一样</strong><mark></mark></mark></p></blockquote></blockquote><h3 id="7-3-if-else-if语句多分支"><a href="#7-3-if-else-if语句多分支" class="headerlink" title="7.3 if else if语句多分支"></a>7.3 if else if语句多分支</h3><blockquote><p><mark><strong>由上往下执行，直至一条成立，与之前的差不多</strong><mark></mark></mark></p></blockquote><hr><h3 id="7-4三元表达式"><a href="#7-4三元表达式" class="headerlink" title="7.4三元表达式"></a><mark><strong>7.4三元表达式</strong><mark></mark></mark></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> result=num&gt;<span class="number">5</span>?<span class="string">&#x27;是的&#x27;</span>:<span class="string">&#x27;不是&#x27;</span>；</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    <span class="comment">//这里作用相当于if else</span></span><br></pre></td></tr></table></figure><blockquote><p>优势在于只需要一行代码</p></blockquote><h3 id="7-5switch"><a href="#7-5switch" class="headerlink" title="7.5switch"></a>7.5switch</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> num=<span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span>(num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span><span class="string">&#x27;1&#x27;</span>:</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span><span class="string">&#x27;2&#x27;</span>:</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span><span class="string">&#x27;3&#x27;</span>:</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"> <span class="attr">default</span>:</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有此结果&#x27;</span>);</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p><mark><strong>注意，变量与switch里面的变量必须是全等关系</strong><mark></mark></mark></p></blockquote></blockquote><hr><hr><hr><h2 id="8-循环语句"><a href="#8-循环语句" class="headerlink" title="8.循环语句"></a>8.循环语句</h2><h3 id="8-1-for循环"><a href="#8-1-for循环" class="headerlink" title="8.1 for循环"></a>8.1 for循环</h3><blockquote><p><mark><strong>与之前的for循环类似</strong><mark></mark></mark></p></blockquote><h4 id="1-录入班级平均分"><a href="#1-录入班级平均分" class="headerlink" title="1.录入班级平均分"></a>1.录入班级平均分</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> resault=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;输入你的班级人数&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (num &lt;= <span class="number">9999</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> a=<span class="title function_">prompt</span>(<span class="string">&#x27;请输入第&#x27;</span> + i + <span class="string">&#x27;个人的分数&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                 resault = <span class="built_in">parseInt</span>(resault) + <span class="built_in">parseInt</span>(a);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> average=resault/num;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;平均分为&#x27;</span>+average);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">else</span></span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;输入格式不对或者人数超出范围&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="2-星星金子塔"><a href="#2-星星金子塔" class="headerlink" title="2.星星金子塔"></a>2.星星金子塔</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> num=<span class="title function_">prompt</span>(<span class="string">&#x27;输入金字塔层数&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> str=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">  &#123;</span><br><span class="line">      str=str+<span class="string">&#x27;★&#x27;</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="title function_">alert</span>(str);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/2022/12/12/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E6%98%9F%E6%98%9F%E9%87%91%E5%AD%97%E5%A1%94.png" alt="星星金字塔"></p><blockquote><p>这里有一个问题，这里是输出了很多次分别打印的结果，<mark><strong>如果一次性打印出来这个金子塔的话，需要用到/N</strong><mark></mark></mark></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> num=<span class="title function_">prompt</span>(<span class="string">&#x27;输入金字塔层数&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> str=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">  &#123;</span><br><span class="line">      str=str+<span class="string">&#x27;★&#x27;</span>;</span><br><span class="line">     str=str+<span class="string">&#x27;/n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="3-双层for循环"><a href="#3-双层for循环" class="headerlink" title="3.  双层for循环"></a>3.  双层for循环</h4><p>一个为行，一个为列</p><hr><hr><h3 id="8-2-while循环"><a href="#8-2-while循环" class="headerlink" title="8.2 while循环"></a>8.2 while循环</h3><blockquote><p><mark><strong>与之前学过的while一样的用法</strong><mark></mark></mark></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>)</span><br><span class="line">&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;haha&#x27;</span>)</span><br><span class="line">i++;&#125;</span><br></pre></td></tr></table></figure></blockquote><hr><h4 id="1-do-while"><a href="#1-do-while" class="headerlink" title="1.do while"></a>1.do while</h4><blockquote><p>执行思路不同，先执行后判断,<mark><strong>至少执行一次</strong><mark></mark></mark></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;haha&#x27;</span>);</span><br><span class="line">i++</span><br><span class="line">&#125;<span class="keyword">while</span>(i!&lt;=<span class="number">10</span>)</span><br><span class="line"><span class="comment">//这里while后面不加;号,这里表示不为什么数就循环</span></span><br></pre></td></tr></table></figure></blockquote><hr><hr><h3 id="8-3关键字"><a href="#8-3关键字" class="headerlink" title="8.3关键字"></a>8.3关键字</h3><h4 id="1-关键字continue"><a href="#1-关键字continue" class="headerlink" title="1.关键字continue"></a>1.关键字continue</h4><blockquote><p><mark><strong>与之前学过的差不多，用于跳出循环</strong><mark></mark></mark></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i=<span class="number">4</span>)&#123;<span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第&#x27;</span>+i+<span class="string">&#x27;个&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><mark><strong>不输出第四个</strong><mark></mark></mark></p></blockquote><hr><h4 id="2-关键字break"><a href="#2-关键字break" class="headerlink" title="2.关键字break"></a>2.关键字break</h4><blockquote><p><mark><strong>区别</strong>：<mark>直接结束循环，不是跳出其中一个</mark></mark></p></blockquote><hr><hr><h3 id="8-4-xunhuanzuoye"><a href="#8-4-xunhuanzuoye" class="headerlink" title="8.4 xunhuanzuoye"></a>8.4 xunhuanzuoye</h3><p>1.chengfabiao</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                str = str + j + <span class="string">&#x27;x&#x27;</span> + i + <span class="string">&#x27;=&#x27;</span> + i * j;</span><br><span class="line">                str+= <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><hr><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2022/12/09/CSS/"/>
      <url>/2022/12/09/CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS开始学习了"><a href="#CSS开始学习了" class="headerlink" title="CSS开始学习了"></a>CSS开始学习了</h1><p><img src="/2022/12/09/CSS/%E5%AD%A6%E4%B9%A0%E8%A6%81%E6%B1%82.png" alt="学习要求"></p><ul><li>学习的要求，精通必须学会网页动画的设计</li></ul><p>cascading style sheet</p><p>层叠级联样式表</p><h3 id="1-入门直接代码在里面使用"><a href="#1-入门直接代码在里面使用" class="headerlink" title="1.入门直接代码在里面使用"></a>1.入门直接代码在里面使用</h3><p><img src="/2022/12/09/CSS/%E5%A5%97%E5%9C%A8%E9%87%8C%E9%9D%A2%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8.png" alt="套在里面直接使用"></p><h3 id="嵌套使用"><a href="#嵌套使用" class="headerlink" title="嵌套使用"></a>嵌套使用</h3><h2 id="html利用css的两种方式"><a href="#html利用css的两种方式" class="headerlink" title="html利用css的两种方式"></a>html利用css的两种方式<img src="/2022/12/09/CSS/%E5%86%99%E5%85%A5css%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A0%B7%E5%BC%8F.png" alt="写入css的两种样式"></h2><ul><li>导入式比较不常用（css2.1特有的）</li><li>容易出现问题<ol><li>生成页面时，卡的话会先显示骨架html</li><li>后面才会是css的渲染</li></ol></li></ul><h3 id="样式的优先级"><a href="#样式的优先级" class="headerlink" title="样式的优先级"></a>样式的优先级</h3><p><img src="/2022/12/09/CSS/%E6%A0%B7%E5%BC%8F%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7.png" alt="样式的优先级"></p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>作用：选择页面上的某个元素或标 签</p><p><img src="/2022/12/09/CSS/%E6%A0%87%E7%AD%BE%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%8C%E9%80%89%E4%B8%AD%E6%A0%87%E7%AD%BE.png" alt="标签选择器，选中标签"></p><ol><li>学习的时候可以在网页中调试，再复制到自己的网页上</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;标签&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    <span class="selector-tag">h1</span>&#123;</span><br><span class="line">      <span class="attribute">color</span>: aqua;</span><br><span class="line">      <span class="attribute">background</span>: blue;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">p</span>&#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*background--表示字体背景颜色</span></span><br><span class="line"><span class="comment">border-radius: 8px;表示背景圈的圆度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      font-size: 40px;表示字体的大小</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">h1</span>&gt;小颖真帅&lt;/<span class="selector-tag">h1</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;冠锦不行啊&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="显示结果"><a href="#显示结果" class="headerlink" title="显示结果"></a>显示结果</h3><p><img src="/2022/12/09/CSS/%E6%A0%87%E7%AD%BE%E6%98%BE%E7%A4%BA%E7%BB%93%E6%9E%9C.png" alt="标签显示结果"></p><h3 id="2-类选择器"><a href="#2-类选择器" class="headerlink" title="2.类选择器"></a>2.类选择器</h3><p> <img src="/2022/12/09/CSS/%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="类选择器"></p><ul><li>可以.class=”**”来自定义标签的选中在style里面设定类的设置就行</li></ul><h3 id="3-id选择器"><a href="#3-id选择器" class="headerlink" title="3.id选择器"></a>3.id选择器</h3><p> 与.class不同，id选择器是全局唯一的</p><p>但是用法相识</p><h3 id="4-选择器的优先级"><a href="#4-选择器的优先级" class="headerlink" title="4.选择器的优先级"></a>4.选择器的优先级</h3><p>id&gt;class&gt;标签</p><p><img src="/2022/12/09/CSS/%E5%88%A4%E6%96%AD%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7.png" alt="判断选择器的优先级"></p><p>去网页上尝试各种标签</p><h2 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h2><p><img src="/2022/12/09/CSS/%E5%B1%82%E6%AC%A1%E6%B5%81%E7%A8%8B.png" alt="层次流程"></p><p>看代码生成流程层次图</p><p>/<em>浏览器有时候刷新不变可能是没有清楚缓存</em>/</p><p><img src="/2022/12/09/CSS/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%88%B7%E6%96%B0%E4%B8%8D%E5%8F%98.png" alt="浏览器刷新不变"></p><ul><li><p>后代选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;<span class="attribute">color</span>: yellow;</span><br><span class="line">        <span class="attribute">background</span>: green;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>:center;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/12/09/CSS/%E5%90%8E%E4%BB%A3%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="后代选择器"></p></li></ul><p>如图选中了后代带有p标签的元素</p><ul><li><p>子选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;<span class="attribute">color</span>: green;</span><br><span class="line">        <span class="attribute">background</span>: red;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>:center;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/12/09/CSS/%E5%AD%90%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="子选择器"></p></li></ul><p>如图，只选择p1一代</p><ul><li>下铺兄弟选择器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.xiapu</span>+<span class="selector-tag">p</span>&#123;<span class="attribute">color</span>: green;</span><br><span class="line">        <span class="attribute">background</span>: red;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>:center;&#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;p1&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;xiapu&quot;&gt;p0&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;xiapu&quot;&gt;p9&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;p8&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure><p>由题意得，他会选择p9\p8变化</p><ul><li>同条楼下兄弟选择器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.louxia</span>~<span class="selector-tag">p</span>&#123;<span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>:center;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;p1&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;louxia&quot;&gt;p0&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;xiapu&quot;&gt;p9&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;p8&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">ol</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line">      &lt;<span class="selector-tag">p</span>&gt;p2&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">  &lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">p</span>&gt;p3&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">  &lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">ol</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;p100&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="/2022/12/09/CSS/%E5%90%8C%E6%A5%BC%E9%80%89%E6%8B%A9%E5%99%A8%E5%90%91%E4%B8%8B.png" alt="同楼选择器向下"></p><p>如图，选中了同条楼下的兄弟p类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>)&gt;<span class="selector-tag">input</span>&#123;<span class="attribute">border</span>: <span class="number">3px</span> solid black;&#125;<span class="comment">/*精准选择第一个</span></span><br></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[class*=<span class="string">&quot;first&quot;</span>]</span>&#123;<span class="attribute">background</span>: red&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[id*=<span class="string">&quot;demo&quot;</span>]</span>&#123;<span class="attribute">background</span>: blue&#125;</span><br><span class="line"></span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../css/颜色与大小<span class="selector-class">.css</span>&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">a</span> href=&quot;&quot; class=&quot;item first&quot; id=&quot;demo&quot;&gt;p1&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">a</span> href=&quot;&quot; class=&quot;item&quot;&gt;p2&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">a</span> href=&quot;&quot;&gt;p3&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">a</span> href=&quot;&quot;class=&quot;demo first&quot;&gt;p4&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">a</span> href=&quot;&quot; class=&quot;demo&quot;&gt;p5&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">a</span> href=&quot;&quot; id=&quot;demo first&quot;&gt;p6&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line"><span class="comment">/*其中class与id类似使用</span></span><br><span class="line"><span class="comment">=//表示绝对相等</span></span><br><span class="line"><span class="comment">*=//包含相等</span></span><br><span class="line"><span class="comment">^=//开头包含</span></span><br><span class="line"><span class="comment">$=//表示后面包含</span></span><br><span class="line"><span class="comment">a[class$=&quot;first&quot;]&#123;background: chocolate&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="/2022/12/09/CSS/%E5%B1%9E%E6%80%A7%E6%A0%87%E7%AD%BE%E7%9A%84%E5%BA%94%E7%94%A8.png" alt="属性标签的应用"></p><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;</span><br><span class="line">      <span class="attribute">background</span>: green;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="selector-tag">li</span> hover&#123;<span class="attribute">background</span>;blueviolet;&#125;<span class="comment">/*移动至标签时的背景颜色*/</span></span><br></pre></td></tr></table></figure><p>主要方便选择第一个或者最后一个标签进行改变</p><p><img src="/2022/12/09/CSS/%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="伪类选择器"></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><img src="/2022/12/09/CSS/%E5%88%97%E8%A1%A8%E7%9A%84%E8%AE%BE%E7%BD%AE.png" alt="列表的设置"></p><p><img src="/2022/12/09/CSS/%E5%88%97%E8%A1%A8%E6%88%90%E6%9E%9C.png" alt="列表成果"></p><h2 id="3-美化网页"><a href="#3-美化网页" class="headerlink" title="3.美化网页"></a>3.美化网页</h2><h3 id="1-突出主体"><a href="#1-突出主体" class="headerlink" title="1.突出主体"></a>1.突出主体</h3><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>i:hover{</p><p>​    color: aqua;</p><p>​    background-color: aqua;</p><p>}//移动至元素，使元素突出</p></blockquote><h3 id="2-改变字体"><a href="#2-改变字体" class="headerlink" title="2.改变字体"></a>2.改变字体</h3><p>设置阴影</p><p><img src="/2022/12/09/CSS/%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93%E9%98%B4%E5%BD%B1.png" alt="设置字体阴影"></p><p>突出效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">span</span>&gt;<span class="selector-tag">a</span>&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line"><span class="comment">/*突出a*/</span></span><br><span class="line"><span class="attribute">font-family</span>:楷体，英文字体； </span><br><span class="line"><span class="comment">/*改变设置字体*/</span></span><br><span class="line">font-size:<span class="number">12px</span></span><br><span class="line"><span class="comment">/*改变字体大小*/</span></span><br><span class="line">...</span><br><span class="line">oblique bolder</span><br><span class="line"><span class="comment">/*斜体，加粗</span></span><br></pre></td></tr></table></figure><h3 id="1-文本样式"><a href="#1-文本样式" class="headerlink" title="1.文本样式"></a>1.文本样式</h3><ol><li><p>颜色  color rgb rgba</p><p>排版</p></li><li><p>首行缩进 text-indent:2em</p></li><li><p>文本居中/靠左、右</p></li></ol><p><img src="/2022/12/09/CSS/%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F.png" alt="文本样式"></p><p>！！！注意居中可以让行高与块高度一致</p><p>行高：line-height:10px;</p><ol start="4"><li>装饰 text-decoration:(去掉超链接的下滑线等等)</li></ol><h3 id="2-图片居中"><a href="#2-图片居中" class="headerlink" title="2.图片居中"></a>2.图片居中</h3><p>文本图片水平对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        <span class="selector-tag">img</span>,<span class="selector-tag">span</span>&#123;<span class="attribute">vertical-align</span>: middle;&#125;<span class="comment">/*对齐需要目标*/</span></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">span</span>&gt;冠锦大帅哥&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;../../resoure/文本样式<span class="selector-class">.png</span>&quot; alt=&quot;图片居中&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span>&gt;冠锦大帅哥&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="/2022/12/09/CSS/%E5%9B%BE%E7%89%87%E4%B8%8E%E5%8F%82%E8%80%83%E7%89%A9%E5%AF%B9%E9%BD%90.png" alt="图片与参考物对齐"></p><h3 id="3-超链接伪类"><a href="#3-超链接伪类" class="headerlink" title="3.超链接伪类"></a>3.超链接伪类</h3><p><img src="/2022/12/09/CSS/%E8%B6%85%E9%93%BE%E6%8E%A5%E4%BC%AA%E7%B1%BB%E6%95%88%E6%9E%9C.png" alt="超链接伪类效果"></p><ol><li>悬浮时颜色、字体大小</li><li>按住时字体颜色</li></ol><p><img src="/2022/12/09/CSS/%E8%B6%85%E9%93%BE%E6%8E%A5%E4%BC%AA%E7%B1%BB%E5%B8%B8%E7%94%A8.png" alt="超链接伪类常用"></p><h3 id="4-图书例子的使用"><a href="#4-图书例子的使用" class="headerlink" title="4.图书例子的使用"></a>4.图书例子的使用</h3><p><img src="/2022/12/09/CSS/%E5%9B%BE%E4%B9%A6%E4%BE%8B%E5%AD%90.png" alt="图书例子"></p><ol><li><p>预览颜色</p></li><li><p>图片链接</p></li><li><p>字体预览斜体</p></li><li><p>字体加粗</p></li><li><p>字体样式</p></li><li><p>悬停文字变大变红</p></li><li><p>点击文字变绿</p></li></ol><p>如<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图书的超伪类链接<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font</span>: oblique bolder <span class="number">20px</span> <span class="string">&quot;楷体&quot;</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../css/图书样式.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">&quot;https:/www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span>  <span class="attr">src</span>=<span class="string">&quot;../../resoure/css/例图，图书界面超伪类链接.png&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">alt</span>=<span class="string">&quot;点击跳转到购买页面&quot;</span>  &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>福尔摩斯探案集<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>作者：柯南·道尔<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>饥荒出版社<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>￥45<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-列表"><a href="#5-列表" class="headerlink" title="5.列表"></a>5.列表</h3><p><img src="/2022/12/09/CSS/%E5%88%97%E8%A1%A8%E4%BB%A3%E7%A0%81.png" alt="列表代码"></p><p><img src="/2022/12/09/CSS/%E5%88%97%E8%A1%A8%E6%88%90%E6%9E%9C.png" alt="列表成果"></p><blockquote><p>1.div标签可以作为一个框，来框住内容。非常常用。</p></blockquote><blockquote><p>2.列表格式如上图所示</p></blockquote><h1 id="004-盒子模型（边框）"><a href="#004-盒子模型（边框）" class="headerlink" title="004.盒子模型（边框）"></a>004.盒子模型（边框）</h1><p><img src="/2022/12/09/CSS/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png" alt="盒子模型"></p><p>margin 外边距</p><p>border 边框</p><p>padding 内边距</p><h3 id="4-1登陆页面"><a href="#4-1登陆页面" class="headerlink" title="4.1登陆页面"></a>4.1登陆页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span> 太保登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>帐号:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="comment">&lt;!--插入输入框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/12/09/CSS/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2.png" alt="登录页面"></p><p><img src="/2022/12/09/CSS/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%A0%87%E7%AD%BE.png" alt="登录页面的标签"></p><blockquote><p>1.第一个div的input</p></blockquote><blockquote><p>2.文本居中</p></blockquote><blockquote><ul><li>```css<br>margin: auto;/<em>这样设置可以实现自动对齐</em><br>否则就要手动设置/margin<br>要求：块元素，且块元素有固定的宽度<br>如<div>…</div>里面<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###  4.2边框border </span><br><span class="line"></span><br><span class="line">粗细</span><br><span class="line"></span><br><span class="line">样式</span><br><span class="line"></span><br><span class="line">颜色</span><br><span class="line"></span><br><span class="line">border: 1px solid red</span><br><span class="line"></span><br><span class="line">###  4.3内边距&amp;外边距</span><br><span class="line"></span><br><span class="line">padding&amp;margin</span><br><span class="line"></span><br><span class="line">(默认时，上下左右）p:0 0 0 0 </span><br><span class="line"></span><br><span class="line">* 外边距的妙用，在居中的时候可以利用</span><br><span class="line"></span><br><span class="line">###  4.4圆角边框</span><br><span class="line"></span><br><span class="line">```css</span><br><span class="line">border-radius: 8px;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>默认：0 0 0 0</p><p>对应左上、右上、右下、左下（顺时针）</p></blockquote><h3 id="4-5圆形"><a href="#4-5圆形" class="headerlink" title="4.5圆形"></a>4.5圆形</h3><blockquote><p>1.根据图片大小调如（50x50)</p><p>border-radius: 25px;就会变成圆形</p></blockquote><h3 id="4-6阴影"><a href="#4-6阴影" class="headerlink" title="4.6阴影"></a>4.6阴影</h3><blockquote><p>1.盒子阴影：box-shadow:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span>  <span class="number">1px</span> darkorange ; &#125;</span><br><span class="line"><span class="comment">/*        水平位移 垂直位移 虚幻程度 颜色*/</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>2.文字阴影：text-shadow:<img src="/2022/12/09/CSS/%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93%E9%98%B4%E5%BD%B1.png" alt="设置字体阴影"></p></blockquote><p><img src="/2022/12/09/CSS/%E9%98%B4%E5%BD%B1%E4%BB%A5%E5%8F%8A%E5%9C%86%E8%BE%B9%E6%A1%86%E7%9A%84%E8%AE%BE%E7%BD%AE.png" alt="阴影以及圆边框的设置"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;<span class="comment">/*设置高、宽，居中*/</span></span><br><span class="line"><span class="selector-id">#boxing</span>&#123;<span class="attribute">border-radius</span>:<span class="number">50px</span> <span class="number">0px</span> <span class="number">50px</span> <span class="number">0px</span>;</span><br><span class="line">    <span class="comment">/*圆角设置*/</span></span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;<span class="comment">/*内边距*/</span></span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">12px</span> <span class="number">12px</span>  <span class="number">10px</span> darkorange ;</span><br><span class="line">    <span class="attribute">font</span>:  bolder <span class="number">44px</span> <span class="string">&quot;楷体&quot;</span> ;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">text-align</span>: center;<span class="comment">/*文字居中*/</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;<span class="comment">/*设置行高让文字水平居中*/</span></span><br><span class="line">    <span class="attribute">text-shadow</span>:darkorange <span class="number">3px</span> <span class="number">3px</span> <span class="number">3px</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*            水平位移 垂直位移 虚幻程度 颜色*/</span></span><br></pre></td></tr></table></figure><h3 id="4-7居中问题"><a href="#4-7居中问题" class="headerlink" title="4.7居中问题"></a>4.7居中问题</h3><blockquote><p>需要给box设定一定的宽度高度</p><p>margin:0 auto;///text-align:center;</p></blockquote><h2 id><a href="#" class="headerlink" title></a></h2><h1 id="5-浮动（行内排列）"><a href="#5-浮动（行内排列）" class="headerlink" title="5.浮动（行内排列）"></a>5.浮动（行内排列）</h1><p><img src="/2022/12/09/CSS/%E6%B5%AE%E5%8A%A8%EF%BC%8C%E5%85%83%E7%B4%A0%E5%B8%83%E5%B1%80.png" alt="浮动，元素布局"></p><ul><li>块元素：独占一行</li></ul><blockquote><p>h1~h6| p | div | 列表：ol/ul(有序或者无序列表)</p></blockquote><ul><li>行元素：不独占一行</li></ul><blockquote><p>span   a    img     strong…..</p></blockquote><h3 id="5-1块元素和行元素的替换（display）"><a href="#5-1块元素和行元素的替换（display）" class="headerlink" title="5.1块元素和行元素的替换（display）"></a>5.1块元素和行元素的替换（display）</h3><blockquote><p>利用display</p><p>1.行元素：</p><p>display:block||</p><p>display:inline-block（块元素可以在一行（内联）</p><p>2.块元素：</p><p>display:none（消失）||</p><p>display:inline-block</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--/*下面放置两种元素*/--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span>&#123;<span class="attribute">font</span>:  bolder <span class="number">30px</span> <span class="string">&quot;楷体&quot;</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">span</span>&#123;<span class="attribute">font</span>:  bolder <span class="number">30px</span> <span class="string">&quot;楷体&quot;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block&quot;</span>&gt;</span>序号一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block&quot;</span>&gt;</span>序号二<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>行内标签</li></ul><p><img src="/2022/12/09/CSS/%E8%A1%8C%E5%85%83%E7%B4%A0%E4%B8%8E%E5%9D%97%E5%85%83%E7%B4%A0%E7%9A%84%E8%BD%AC%E6%8D%A2.png" alt="行元素与块元素的转换"></p><h3 id="5-2图片浮动（float"><a href="#5-2图片浮动（float" class="headerlink" title="5.2图片浮动（float)"></a>5.2图片浮动（float)</h3><p><img src="/2022/12/09/CSS/%E5%9B%BE%E7%89%87%E6%B5%AE%E5%8A%A8.png" alt="图片浮动"></p><blockquote><ol><li>利用class类标签标注图片</li><li>外面div框住整个面板</li><li>对图片进行即可同行处理</li><li>元素加入float:left实现左浮动</li></ol></blockquote><blockquote><ul><li>清除两侧浮动——clear:both;可以选择一侧</li></ul></blockquote><h3 id="5-3父级边框塌陷（文字超出边）的问题"><a href="#5-3父级边框塌陷（文字超出边）的问题" class="headerlink" title="5.3父级边框塌陷（文字超出边）的问题"></a>5.3父级边框塌陷（文字超出边）的问题</h3><ul><li>就是不浮动的文字什么的跑出了边框（设置的div=父级）</li></ul><p>解决塌陷的方法</p><blockquote><p>1.增加父级的高度</p><p>调整height: 500px;</p><p>2.在浮动元素后面增加div，（虽然简单，但是代码中一般避免用空的div）</p><p>3.下面做一个次父级（顶格法）将文字顶回去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.b1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">2px</span> dashed red ; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">&lt;<span class="attr">div</span> <span class="attr">class</span>=<span class="string">&quot;b1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/12/09/CSS/%E5%88%A9%E7%94%A8%E5%9D%97%E5%85%83%E7%B4%A0%E9%A1%B6%E5%9B%9E%E5%8E%BB.png" alt="利用块元素顶回去"></p><blockquote><p>在父级下面做块元素禁止浮动将溢出的文字顶回去</p></blockquote><p>3.overflow:hidden;//auto修剪至不超出（如果加个拖条就可以全部显示overflow: scroll;）（下拉拖条）</p><p><img src="/2022/12/09/CSS/%E6%8B%96%E6%9D%A1.png" alt="拖条"></p><p>4.伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#father</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li><p>在父级之后弄一==个不允许==浮动的块元素，相当于快捷顶格</p><p>==(增加一个伪类：after(推荐)，写法稍微复杂，但是没有副作用)==</p></li></ul></blockquote><h3 id="5-5对比display与float-？"><a href="#5-5对比display与float-？" class="headerlink" title="5.5对比display与float==？=="></a>5.5对比display与float==？==</h3><p>display</p><p>==方向不可控==</p><p>float</p><p>==浮动起来会脱离标准文档流，所以要解决父级边框塌陷的问题==</p><h1 id="6-定位"><a href="#6-定位" class="headerlink" title="6.定位"></a>6.定位</h1><h3 id="6-1相对定位"><a href="#6-1相对定位" class="headerlink" title="6.1相对定位"></a>6.1相对定位</h3><p><img src="/2022/12/09/CSS/%E5%AE%9A%E4%BD%8D%E5%88%9D%E7%BA%A7%E4%BD%BF%E7%94%A8.png" alt="定位初级使用"></p><ul><li>position:</li><li>相对于原来的位置进行指定的偏移（仍然在标准文档中，原来的位置会被保留）</li><li>设置上下左右的操作</li></ul><p><img src="/2022/12/09/CSS/%E5%AE%9A%E4%BD%8D%E4%BD%9C%E4%B8%9A%E7%9A%84%E7%BB%BC%E5%90%88%E4%BD%BF%E7%94%A8.png" alt="定位作业的综合使用"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#asecond</span>&#123;   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">right</span>:-<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>==1.本次作业中，我<strong>使用了多个div</strong>作为块元素==</p><p>==2.实际上<strong>还可以使用display：block</strong>;==</p><p>==将行元素变成块元素就可以设置高度宽度了==</p><p><strong>==3.忘记了逗号的使用==</strong></p></blockquote><h3 id="6-2绝对定位（absolute"><a href="#6-2绝对定位（absolute" class="headerlink" title="6.2绝对定位（absolute)"></a>6.2绝对定位（absolute)</h3><ul><li><p>在没有父级的情况下，以浏览器为边框</p></li><li><p>有父级时，以父级为边框</p></li></ul><blockquote><p>与相对定位不同</p><ol><li>==绝对定位会丢失原来的位置，使其它块元素挤过去==</li><li>==绝对定位不会超出框，最多只能顶格==</li></ol></blockquote><p>position:absolute;</p><h3 id="6-3固定定位"><a href="#6-3固定定位" class="headerlink" title="6.3固定定位"></a>6.3固定定位</h3><p><img src="/2022/12/09/CSS/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D.png" alt="绝对定位与固定定位"></p><ul><li><p>div:nth-of-type(1)//div类型第一个</p></li><li><p>position:fixed;//固定选择器</p></li></ul><p><img src="/2022/12/09/CSS/%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D.png" alt="固定定位"></p><p>固定在屏幕上</p><h3 id="6-5-z-index"><a href="#6-5-z-index" class="headerlink" title="6.5 z-index"></a>6.5 z-index</h3><ul><li><p> 图层设置，初始默认为0层</p></li><li><p> 利用图层设置显示在网页上的顺序</p></li><li><p> 透明度的设置</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">opacity</span>:<span class="number">0.5</span><span class="comment">/*透明度为50%*/</span>新版本</span><br><span class="line">filter:<span class="built_in">Alpha</span>(opacity=<span class="number">50</span>);<span class="comment">/*旧版本识别i8可能不兼容了</span></span><br></pre></td></tr></table></figure><ul><li>利用定位将文字送到图片上</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2022/12/09/HTML/"/>
      <url>/2022/12/09/HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="初识HTML"><a href="#初识HTML" class="headerlink" title="初识HTML"></a>初识HTML</h1><p><img src="/2022/12/09/HTML/image-20220531210016097.png" alt="image-20220531210016097"></p><ul><li><p>ctrl+/就是写注释用的等于</p><p>1.&lt;!–</p></li><li><p>网页一般有两个head,最后一个加/表示自闭合</p></li><li><p>如果用idea开发，<!DOCTYPE HEML></p><p>就是告诉浏览器使用什么软件开发</p><h2 id="HTML标签学习"><a href="#HTML标签学习" class="headerlink" title="HTML标签学习"></a>HTML标签学习</h2></li></ul><p><img src="/2022/12/09/HTML/image-20220531211018666.png" alt="image-20220531211018666"></p><ul><li><p>h+table键可以快速生成标题</p><p><img src="/2022/12/09/HTML/image-20220531211333097.png" alt="image-20220531211333097"></p></li><li><p>p+table可以快速生成段落标签</p></li></ul><p><img src="/2022/12/09/HTML/image-20220531211344329.png" alt="image-20220531211344329"></p><ul><li><p>br+table快速换行标签</p></li><li><p>水平线标签hr+table增加一条水平分界线</p><p><img src="/2022/12/09/HTML/image-20220531211626349.png" alt="image-20220531211626349"></p></li><li><p>粗体斜体的设置</p></li></ul><p><img src="/2022/12/09/HTML/image-20220531212019006.png" alt="image-20220531212019006"></p><ul><li>常用的特殊符号&amp;+</li></ul><h2 id="图像标签学习"><a href="#图像标签学习" class="headerlink" title="图像标签学习"></a>图像标签学习</h2><p><img src="/2022/12/09/HTML/image-20220531213419309.png" alt="image-20220531213419309"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;&#x27;</span>&#x27;&#x27; <span class="attr">alt</span>=<span class="string">&#x27;&#x27;</span>&#x27;&#x27;&gt;</span></span><br><span class="line"><span class="comment">&lt;!--img学习，</span></span><br><span class="line"><span class="comment">src:图片地址</span></span><br><span class="line"><span class="comment">相对路径 绝对路径</span></span><br><span class="line"><span class="comment">../ 表示上一级目录</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注意可能会犯路径错误的情况导致图片加载不出来</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;img src=’’’’ alt=’’’’&gt;表示图片</p><p><img src="/2022/12/09/HTML/image-20220531214138590.png" alt="image-20220531214138590"></p><ul><li>图像设置和图像的一些标签</li></ul><h3 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--a标签</span></span><br><span class="line"><span class="comment">href:为必填项，表示要跳到的那个网页</span></span><br><span class="line"><span class="comment">target:表示窗口在哪里打开</span></span><br><span class="line"><span class="comment">_blank:表示在新标签/页面打开</span></span><br><span class="line"><span class="comment">_self:在自己的网页中打开</span></span><br><span class="line"><span class="comment">不设置的话一般默认实在原网页中打开</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;&#x27;</span><span class="attr">某个网站的地址</span>&#x27;&#x27;&gt;</span>点击跳转到页面-<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>嵌套链接</li></ul><p><img src="/2022/12/09/HTML/image-20220531215807054.png" alt="image-20220531215807054"></p><h4 id="锚链接"><a href="#锚链接" class="headerlink" title="锚链接"></a>锚链接</h4><p><img src="/2022/12/09/HTML/image-20220531220440968.png" alt="image-20220531220440968"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--锚链接</span></span><br><span class="line"><span class="comment">1.需要一个锚标记</span></span><br><span class="line"><span class="comment">2.跳转到标记</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">使用name进行标记，hrefjingxingtiaozhuan</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&#x27;&#x27;</span><span class="attr">top</span>&#x27;&#x27;&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">.中间放置一堆东西</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;&#x27;</span>#<span class="attr">top</span>&#x27;&#x27;&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--实现网页之间的跳转</span></span><br><span class="line"><span class="comment">&lt;a name=&#x27;&#x27;down&#x27;&#x27;&gt;down&lt;/a&gt;</span></span><br><span class="line"><span class="comment">//在某个网页留下标记</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;a href=&#x27;&#x27;4.链接标签.html#down&#x27;&#x27;&gt;&lt;/a&gt;在某个网页跳转</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="功能性链接"><a href="#功能性链接" class="headerlink" title="功能性链接"></a>功能性链接</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">邮件链接：mailto</span></span><br><span class="line"><span class="comment">qq链接</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;&#x27;</span><span class="attr">mailto:121041584</span>@<span class="attr">qq.com</span>&#x27;&#x27;&gt;</span>点击邮箱联系我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&#x27;&#x27;</span><span class="attr">_blank</span>&#x27;&#x27; <span class="attr">href</span>=<span class="string">&#x27;&#x27;</span><span class="attr">网页地址</span>&#x27;&#x27;&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">&#x27;&#x27;</span><span class="attr">o</span>&#x27;&#x27; <span class="attr">src</span>=<span class="string">&#x27;&#x27;</span><span class="attr">直接地址</span>&#x27;&#x27; <span class="attr">alt</span>=<span class="string">&#x27;&#x27;</span><span class="attr">你好</span>，<span class="attr">加我领取100万元</span>&#x27;&#x27; <span class="attr">title</span>=<span class="string">&#x27;&#x27;</span><span class="attr">你好</span>，<span class="attr">加我领取100万元</span>&#x27;&#x27;&lt;/<span class="attr">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="网页中嵌套其它网页"><a href="#网页中嵌套其它网页" class="headerlink" title="网页中嵌套其它网页"></a>网页中嵌套其它网页</h2><p><img src="/2022/12/09/HTML/%E7%BD%91%E9%A1%B5%E5%B5%8C%E5%A5%97.png" alt="网页嵌套"></p><ul><li>嵌套注解</li></ul><p><img src="/2022/12/09/HTML/%E5%B5%8C%E5%A5%97%E6%B3%A8%E8%A7%A3.png" alt="嵌套注解"></p><h2 id="表格的制作"><a href="#表格的制作" class="headerlink" title="表格的制作"></a>表格的制作</h2><p><img src="/2022/12/09/HTML/%E8%A1%A8%E6%A0%BC.png" alt="表格"></p><p>注意跨行跨列的使用</p><ul><li></li></ul><p><img src="/2022/12/09/HTML/%E8%B7%A8%E8%A1%8C%E8%B7%A8%E5%88%97.png" alt="跨行跨列"></p><h2 id="视频和音频"><a href="#视频和音频" class="headerlink" title="视频和音频"></a>视频和音频</h2><p>参考图片元素的学习</p><p>1.创建资源目录</p><p>2.写下对应的类似于图片地址的代码</p><p>3.需要注意要设置可操作+是否自动播放</p><p><img src="/2022/12/09/HTML/%E8%A7%86%E9%A2%91%E9%9F%B3%E9%A2%91%E7%9A%84%E5%AD%A6%E4%B9%A0.png" alt="视频音频的学习"></p><h3 id="网页结构"><a href="#网页结构" class="headerlink" title="网页结构"></a>网页结构</h3><ul><li>为了让代码更加清晰</li></ul><p><img src="/2022/12/09/HTML/%E7%BD%91%E9%A1%B5%E7%BB%93%E6%9E%84.png" alt="网页结构"></p><p>如下面的布局分块</p><p><img src="/2022/12/09/HTML/%E5%B8%83%E5%B1%80%E5%88%86%E5%9D%97.png" alt="布局分块"></p><h2 id="行元素-amp-块元素"><a href="#行元素-amp-块元素" class="headerlink" title="行元素&amp;块元素"></a>行元素&amp;块元素</h2><p><img src="/2022/12/09/HTML/%E5%9D%97%E5%85%83%E7%B4%A0%E5%92%8C%E8%A1%8C%E5%85%83%E7%B4%A0.png" alt="块元素和行元素"></p><h3 id="那些忘记了的元素操作"><a href="#那些忘记了的元素操作" class="headerlink" title="那些忘记了的元素操作"></a>那些忘记了的元素操作</h3><blockquote><p>cursor: pointer; //让元素可以被点击</p><p>display : none;//让元素消失</p></blockquote><p>+++</p><h2 id="列表学习"><a href="#列表学习" class="headerlink" title="列表学习"></a>列表学习</h2><h3 id="有序无序列表"><a href="#有序无序列表" class="headerlink" title="有序无序列表"></a>有序无序列表</h3><p>Ol&amp;ul</p><p><img src="/2022/12/09/HTML/%E5%88%97%E8%A1%A8.png" alt="列表"></p><h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h3><p><img src="/2022/12/09/HTML/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8.png" alt="自定义列表"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/background.css"/>
      <url>/css/background.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }  :root {    --trans-light: rgba(255, 255, 255, 0.88);    --trans-dark: rgba(25, 25, 25, 0.88);    --border-style: 1px solid rgb(169, 169, 169);    --backdrop-filter: blur(5px) saturate(150%);  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border-radius: 25px;    border: var(--border-style);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border-radius: 18px;    border: var(--border-style);  }    /* 文章页、归档页、普通页面 */  div#post,  div#page,  div#archive {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border: var(--border-style);    border-radius: 20px;  }    /* 导航栏 */  #page-header.nav-fixed #nav {    background: rgba(255, 255, 255, 0.75);    backdrop-filter: var(--backdrop-filter);  }    [data-theme="dark"] #page-header.nav-fixed #nav {    background: rgba(0, 0, 0, 0.7) !important;  }    /* 夜间模式遮罩 */  [data-theme="dark"] #recent-posts > .recent-post-item,  [data-theme="dark"] #aside-content .card-widget,  [data-theme="dark"] div#post,  [data-theme="dark"] div#archive,  [data-theme="dark"] div#page {    background: var(--trans-dark);  }      /* 夜间模式页脚页头遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }    /* 阅读模式 */  .read-mode #aside-content .card-widget {    background: rgba(158, 204, 171, 0.5) !important;  }  .read-mode div#post {    background: rgba(158, 204, 171, 0.5) !important;  }    /* 夜间模式下的阅读模式 */  [data-theme="dark"] .read-mode #aside-content .card-widget {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;  }  [data-theme="dark"] .read-mode div#post {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;  }  /*笔者自己修改的部分*/mark{   background: #a5f3a2;    margin: 0px;    padding: 0px 10px 0px 10px;    border-radius: 3.3px;    color:     red;    font: bolder 20px "楷体";}/*添加三个灯*/#article-container .highlight-tools .expand {  position: absolute;  padding: 0.57em 0.7em;  cursor: pointer;  -webkit-transition: -webkit-transform 0.3s;  -moz-transition: -moz-transform 0.3s;  -o-transition: -o-transform 0.3s;  -ms-transition: -ms-transform 0.3s;  transition: transform 0.3s;  right: 2.1em;}#article-container .highlight-tools .expand + .code-lang {  left: 75px;}#article-container .highlight-tools .expand.closed {  -webkit-transition: all s;  -moz-transition: all 0.3s;  -o-transition: all 0.3s;  -ms-transition: all 0.3s;  transition: all 0.3s;  -webkit-transform: rotate(-90deg) !important;  -moz-transform: rotate(-90deg) !important;  -o-transform: rotate(-90deg) !important;  -ms-transform: rotate(-90deg) !important;  transform: rotate(-90deg) !important;}#article-container .highlight-tools .code-lang {  position: absolute;  left: 14px;  text-transform: uppercase;  font-weight: bold;  font-size: 1.15em;  -webkit-user-select: none;  -moz-user-select: none;  -ms-user-select: none;  user-select: none;}#article-container .highlight-tools .copy-notice {  position: absolute;  right: 2.4em;  opacity: 0;  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";  filter: alpha(opacity=0);  -webkit-transition: opacity 0.4s;  -moz-transition: opacity 0.4s;  -o-transition: opacity 0.4s;  -ms-transition: opacity 0.4s;  transition: opacity 0.4s;}#article-container .highlight-tools .copy-button {  position: absolute;  right: 14px;  cursor: pointer;  -webkit-transition: color 0.2s;  -moz-transition: color 0.2s;  -o-transition: color 0.2s;  -ms-transition: color 0.2s;  transition: color 0.2s;}#article-container .highlight-tools .copy-button:hover {  color: #49b1f5;}.highlight-tools:after{    /* float: left; */    position: absolute;    border-radius: 50%;    background: #fc625d;    width: 12px;    height: 12px;    left: 12px;    -webkit-box-shadow: 20px 0 #fdbc40, 40px 0 #35cd4b;    box-shadow: 20px 0 #fdbc40, 40px 0 #35cd4b;    content: '';}/*代码表格背景*/:root {  --blue-custom: #5ea6e5;  --loading-color: rgba(207, 246, 247, 0.92);  --border-color: #c9c9c9;  --color-red: rgb(241, 71, 71);  --color-orange: rgb(241, 162, 71);  --color-yellow: rgb(241, 238, 71);  --color-purple: rgb(179, 71, 241);  --color-blue: rgb(102, 204, 255);  --color-gray: rgb(226, 226, 226);  --color-green: rgb(57, 197, 187);  --color-whitegray: rgb(241, 241, 241);  --color-pink: rgb(237, 112, 155);  --color-black: rgb(0, 0, 0);  --color-darkblue: rgb(97, 100, 159);  --color-heoblue: rgb(66, 90, 239);  --btn-bg: var(--theme-color)!important;  --scrollbar-color: var(--theme-color)!important;  --border-style: 1px solid rgba(169, 169, 169, 0.7);  --hlnumber-bg: #282c34;  --hltools-bg: #1c1c1c;  --hl-bg: #282c34;}/*间隔线*/#article-container figure.highlight table {  display: block;  overflow: auto;  border: #404041 solid 0.1px;  border-radius: 0 0 6px 6px;  border-top: none;}#article-container figure.highlight .gutter pre {  border-right: #808081 solid 0.1px}.highlight-tools{  border: #404041 solid 0.1px;  border-radius: 6px 6px 0 0;  border-bottom: none;}/*框子*/blockquote {  margin: 0 0 20px;  padding: 12px 15px;  border-left: 0.5px solid #808486;  border-radius: 8px;  background-color: var(--blockquote-bg);  color: var(--blockquote-color);  box-shadow: -2px 0px 9px -2px #49b1f5;}.highlight {  border-radius: 6px 6px 6px 6px;}/* 高亮修改 */#article-container code{  background: none;  padding: 0 3px 0 3px;  color: rgb(255, 77, 0);  font: 1.05em bold;  text-shadow: 1px 1px 11px #2285c3;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/%E8%AF%AD%E6%B3%95.js"/>
      <url>/js/%E8%AF%AD%E6%B3%95.js</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
